// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ipc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ipc.proto</summary>
public static partial class IpcReflection {

  #region Descriptor
  /// <summary>File descriptor for ipc.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static IpcReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglpcGMucHJvdG8ijAEKEVJlc291cmNlVXNhZ2VEYXRhEhUKDWNwdV91c2Fn",
          "ZV9wY3QYASABKAESFQoNcmFtX3VzYWdlX3BjdBgCIAEoARIWCg5kaXNrX3Vz",
          "YWdlX3BjdBgDIAEoARIWCg5zd2FwX3VzYWdlX3BjdBgEIAEoARIZChFhdmdf",
          "Y3B1X3VzYWdlX3BjdBgFIAEoASJWCghUaW1lRGF0YRIMCgR0aW1lGAEgASgJ",
          "EhAKCGlzX3ZhbGlkGAIgASgIEhcKD3NvZnR3YXJlX3VwdGltZRgDIAEoBBIR",
          "Cglvc191cHRpbWUYBCABKAQinAEKC1ZlcnNpb25EYXRhEhUKDXNlcmlhbF9u",
          "dW1iZXIYASABKAkSEwoLcGFydF9udW1iZXIYAiABKAkSGAoQaGFyZHdhcmVf",
          "dmVyc2lvbhgDIAEoCRIWCg5rZXJuZWxfdmVyc2lvbhgEIAEoCRIVCg1pbWFn",
          "ZV92ZXJzaW9uGAUgASgJEhgKEHNvZnR3YXJlX3ZlcnNpb24YBiABKAkingIK",
          "CkNiaXRSZXN1bHQSEwoLY2hlY2tfcG93ZXIYASABKAgSFgoOY2hlY2tfYXJp",
          "bmM0MjkYAiABKAgSGAoQY2hlY2tfbWlsc3RkMTU1MxgDIAEoCBIWCg5jaGVj",
          "a19hcmluYzY2NBgEIAEoCBIdChVjaGVja19hdWRpb19pbnRlcmZhY2UYBSAB",
          "KAgSEgoKY2hlY2tfY3NtdRgGIAEoCBISCgpjaGVja19yaXBzGAcgASgIEhEK",
          "CWNoZWNrX2N2chgIIAEoCBIRCgljaGVja19mZHIYCSABKAgSEwoLY2hlY2tf",
          "Y2xvY2sYCiABKAgSEgoKY2hlY2tfbW9kZRgLIAEoCBIbChNjaGVja19kb19u",
          "b3RfcmVjb3JkGAwgASgIIvgCCgpQYml0UmVzdWx0EhMKC2NoZWNrX3Bvd2Vy",
          "GAEgASgIEhYKDmNoZWNrX2FyaW5jNDI5GAIgASgIEhgKEGNoZWNrX21pbHN0",
          "ZDE1NTMYAyABKAgSFgoOY2hlY2tfYXJpbmM2NjQYBCABKAgSHQoVY2hlY2tf",
          "YXVkaW9faW50ZXJmYWNlGAUgASgIEhYKDmNoZWNrX2V0aGVybmV0GAYgASgI",
          "Eh4KFmNoZWNrX3NlcmlhbF9pbnRlcmZhY2UYByABKAgSIAoYY2hlY2tfZGlz",
          "Y3JldGVfaW50ZXJmYWNlGAggASgIEhIKCmNoZWNrX2NzbXUYCSABKAgSEgoK",
          "Y2hlY2tfcmlwcxgKIAEoCBIRCgljaGVja19jdnIYCyABKAgSEQoJY2hlY2tf",
          "ZmRyGAwgASgIEhMKC2NoZWNrX2Nsb2NrGA0gASgIEhIKCmNoZWNrX21vZGUY",
          "DiABKAgSGwoTY2hlY2tfZG9fbm90X3JlY29yZBgPIAEoCCL4AgoKSWJpdFJl",
          "c3VsdBITCgtjaGVja19wb3dlchgBIAEoCBIWCg5jaGVja19hcmluYzQyORgC",
          "IAEoCBIYChBjaGVja19taWxzdGQxNTUzGAMgASgIEhYKDmNoZWNrX2FyaW5j",
          "NjY0GAQgASgIEh0KFWNoZWNrX2F1ZGlvX2ludGVyZmFjZRgFIAEoCBIWCg5j",
          "aGVja19ldGhlcm5ldBgGIAEoCBIeChZjaGVja19zZXJpYWxfaW50ZXJmYWNl",
          "GAcgASgIEiAKGGNoZWNrX2Rpc2NyZXRlX2ludGVyZmFjZRgIIAEoCBISCgpj",
          "aGVja19jc211GAkgASgIEhIKCmNoZWNrX3JpcHMYCiABKAgSEQoJY2hlY2tf",
          "Y3ZyGAsgASgIEhEKCWNoZWNrX2ZkchgMIAEoCBITCgtjaGVja19jbG9jaxgN",
          "IAEoCBISCgpjaGVja19tb2RlGA4gASgIEhsKE2NoZWNrX2RvX25vdF9yZWNv",
          "cmQYDyABKAgibgoJRmRyU3RhdHVzEhQKDGlzX3JlY29yZGluZxgBIAEoCBIX",
          "Cg9hcmluYzQyOV9zdGF0dXMYAiABKAgSGQoRbWlsc3RkMTU1M19zdGF0dXMY",
          "AyABKAgSFwoPYXJpbmM2NjRfc3RhdHVzGAQgASgIIt4BCglDdnJTdGF0dXMS",
          "FAoMaXNfcmVjb3JkaW5nGAEgASgIEh4KFmlzX29wZW5pbmdfbWljcm9waG9u",
          "ZTEYAiABKAgSHgoWaXNfb3BlbmluZ19taWNyb3Bob25lMhgDIAEoCBIeChZp",
          "c19vcGVuaW5nX21pY3JvcGhvbmUzGAQgASgIEh4KFmlzX29wZW5pbmdfbWlj",
          "cm9waG9uZTQYBSABKAgSGwoTaXNfb3BlbmluZ19hcmVhX21pYxgGIAEoCBIe",
          "ChZhdWRpb19pbnRlcmZhY2Vfc3RhdHVzGAcgASgIIvIBCglOYW5kQmxvY2sS",
          "FQoNYmxvY2tfYWRkcmVzcxgBIAEoDRIgCgtyZWNvcmRfdHlwZRgCIAEoDjIL",
          "LlJlY29yZFR5cGUSFwoPc3RhcnRfdGltZXN0YW1wGAMgASgEEhUKDWVuZF90",
          "aW1lc3RhbXAYBCABKAQSEQoJZGF0YV9zaXplGAUgASgNEhUKDWZsaWdodF9u",
          "dW1iZXIYBiABKA0SGgoSc2VxdWVuY2VfaW5fZmxpZ2h0GAcgASgNEhAKCG1k",
          "NV9oYXNoGAggASgJEhAKCGlzX3ZhbGlkGAkgASgIEhIKCmlzX2N1cnJlbnQY",
          "CiABKAgisAIKDEZsaWdodFJlY29yZBIVCg1mbGlnaHRfbnVtYmVyGAEgASgN",
          "EhIKCnN0YXJ0X3RpbWUYAiABKAQSEAoIZW5kX3RpbWUYAyABKAQSGAoQZHVy",
          "YXRpb25fbWludXRlcxgEIAEoDRIXCg9mZHJfYmxvY2tfY291bnQYBSABKA0S",
          "FwoPY3ZyX2Jsb2NrX2NvdW50GAYgASgNEhYKDnRvdGFsX2Zkcl9zaXplGAcg",
          "ASgEEhYKDnRvdGFsX2N2cl9zaXplGAggASgEEhsKE3N0YXJ0X2Jsb2NrX2Fk",
          "ZHJlc3MYCSABKA0SGQoRZW5kX2Jsb2NrX2FkZHJlc3MYCiABKA0SEwoLaXNf",
          "Y29tcGxldGUYCyABKAgSGgoGYmxvY2tzGAwgAygLMgouTmFuZEJsb2NrItoB",
          "ChBOYW5kTWVtb3J5U3RhdHVzEhYKDnRvdGFsX2NhcGFjaXR5GAEgASgEEhUK",
          "DXVzZWRfY2FwYWNpdHkYAiABKAQSGgoSYXZhaWxhYmxlX2NhcGFjaXR5GAMg",
          "ASgEEhQKDHRvdGFsX2Jsb2NrcxgEIAEoDRITCgt1c2VkX2Jsb2NrcxgFIAEo",
          "DRISCgpiYWRfYmxvY2tzGAYgASgNEh0KFWN1cnJlbnRfd3JpdGVfYWRkcmVz",
          "cxgHIAEoDRIdChV3ZWFyX2xldmVsX3BlcmNlbnRhZ2UYCCABKAEi1AEKDlJl",
          "Y29yZEluZm9EYXRhEh4KB2ZsaWdodHMYASADKAsyDS5GbGlnaHRSZWNvcmQS",
          "JQoOY3VycmVudF9mbGlnaHQYAiABKAsyDS5GbGlnaHRSZWNvcmQSKAoNbWVt",
          "b3J5X3N0YXR1cxgDIAEoCzIRLk5hbmRNZW1vcnlTdGF0dXMSFQoNdG90YWxf",
          "ZmxpZ2h0cxgEIAEoDRIcChRvbGRlc3RfZmxpZ2h0X251bWJlchgFIAEoDRIc",
          "ChRuZXdlc3RfZmxpZ2h0X251bWJlchgGIAEoDSK0AgoORG93bmxvYWRSZWNv",
          "cmQSLgoOc2VsZWN0aW9uX3R5cGUYASABKA4yFi5Eb3dubG9hZFNlbGVjdGlv",
          "blR5cGUSFQoNZmxpZ2h0X251bWJlchgCIAEoDRIUCgxsYXN0X21pbnV0ZXMY",
          "AyABKA0SFwoPc3RhcnRfdGltZXN0YW1wGAQgASgEEhUKDWVuZF90aW1lc3Rh",
          "bXAYBSABKAQSFQoNc3RhcnRfYWRkcmVzcxgGIAEoDRITCgtlbmRfYWRkcmVz",
          "cxgHIAEoDRInChJyZWNvcmRfdHlwZV9maWx0ZXIYCCABKA4yCy5SZWNvcmRU",
          "eXBlEhgKEGluY2x1ZGVfbWV0YWRhdGEYCSABKAgSEgoKdmVyaWZ5X21kNRgK",
          "IAEoCBISCgptYXhfYmxvY2tzGAsgASgNIowCChJEb3dubG9hZFJlY29yZERh",
          "dGESIwoPc2VsZWN0ZWRfYmxvY2tzGAEgAygLMgouTmFuZEJsb2NrEhQKDHRv",
          "dGFsX2Jsb2NrcxgCIAEoDRIXCg90b3RhbF9kYXRhX3NpemUYAyABKAQSFAoM",
          "YXJjaGl2ZV9wYXRoGAQgASgJEhMKC2FyY2hpdmVfbWQ1GAUgASgJEhoKEmV4",
          "dHJhY3Rpb25fdGltZV9tcxgGIAEoDRIjChtlc3RpbWF0ZWRfdHJhbnNmZXJf",
          "dGltZV9zZWMYByABKA0SHAoUaGFzX2ludGVncml0eV9lcnJvcnMYCCABKAgS",
          "GAoQY29ycnVwdGVkX2Jsb2NrcxgJIAMoDSLvAQoMVXBsb2FkQ29uZmlnEhQK",
          "DGpzb25fY29udGVudBgBIAEoCRIQCghmaWxlbmFtZRgCIAEoCRIQCghtZDVf",
          "aGFzaBgDIAEoCRISCgppc19jaHVua2VkGAQgASgIEhIKCnNlc3Npb25faWQY",
          "BSABKAkSEwoLY2h1bmtfaW5kZXgYBiABKA0SFAoMdG90YWxfY2h1bmtzGAcg",
          "ASgNEhIKCmNodW5rX2RhdGEYCCABKAwSEgoKY2h1bmtfc2l6ZRgJIAEoDRIR",
          "CgljaHVua19tZDUYCiABKAkSFwoPdG90YWxfZmlsZV9zaXplGAsgASgEIqYB",
          "ChBVcGxvYWRDb25maWdEYXRhEhsKE2lzX2NodW5rZWRfcmVzcG9uc2UYASAB",
          "KAgSEgoKc2Vzc2lvbl9pZBgCIAEoCRIXCg9jaHVua3NfcmVjZWl2ZWQYAyAB",
          "KA0SFwoPY2h1bmtzX2V4cGVjdGVkGAQgASgNEhcKD3VwbG9hZF9jb21wbGV0",
          "ZRgFIAEoCBIWCg5taXNzaW5nX2NodW5rcxgGIAMoDSJdCglHZXRDb25maWcS",
          "EwoLdXNlX2NodW5rZWQYASABKAgSEgoKY2h1bmtfc2l6ZRgCIAEoDRITCgtj",
          "aHVua19pbmRleBgDIAEoDRISCgpzZXNzaW9uX2lkGAQgASgJIvUBCg1HZXRD",
          "b25maWdEYXRhEhQKDGpzb25fY29udGVudBgBIAEoCRIQCghtZDVfaGFzaBgC",
          "IAEoCRISCgppc19jaHVua2VkGAMgASgIEhIKCnNlc3Npb25faWQYBCABKAkS",
          "EwoLY2h1bmtfaW5kZXgYBSABKA0SFAoMdG90YWxfY2h1bmtzGAYgASgNEhIK",
          "CmNodW5rX2RhdGEYByABKAwSEgoKY2h1bmtfc2l6ZRgIIAEoDRIRCgljaHVu",
          "a19tZDUYCSABKAkSFwoPdG90YWxfZmlsZV9zaXplGAogASgEEhUKDWlzX2xh",
          "c3RfY2h1bmsYCyABKAgi1AIKClN0YXR1c0RhdGESIgoMcmVjb3JkX3N0YXRl",
          "GAEgASgOMgwuUmVjb3JkU3RhdGUSIgoMd29ya2luZ19tb2RlGAIgASgOMgwu",
          "V29ya2luZ01vZGUSKgoOcmVzb3VyY2VfdXNhZ2UYAyABKAsyEi5SZXNvdXJj",
          "ZVVzYWdlRGF0YRIXCgR0aW1lGAQgASgLMgkuVGltZURhdGESHgoKZmRyX3N0",
          "YXR1cxgFIAEoCzIKLkZkclN0YXR1cxIeCgpjdnJfc3RhdHVzGAYgASgLMgou",
          "Q3ZyU3RhdHVzEhMKC3JpcHNfc3RhdHVzGAcgASgIEiAKC2NiaXRfcmVzdWx0",
          "GAggASgLMgsuQ2JpdFJlc3VsdBIgCgtwYml0X3Jlc3VsdBgJIAEoCzILLlBi",
          "aXRSZXN1bHQSIAoLaWJpdF9yZXN1bHQYCiABKAsyCy5JYml0UmVzdWx0IoMC",
          "CgpJUENNZXNzYWdlEgsKA2p3dBgBIAEoCRIeCgpjb21tYW5kX2lkGAIgASgO",
          "MgouQ29tbWFuZElkEiQKDHJlY29yZF9zdGF0ZRgDIAEoDjIMLlJlY29yZFN0",
          "YXRlSAASJAoMd29ya2luZ19tb2RlGAQgASgOMgwuV29ya2luZ01vZGVIABIq",
          "Cg9kb3dubG9hZF9yZWNvcmQYBSABKAsyDy5Eb3dubG9hZFJlY29yZEgAEiYK",
          "DXVwbG9hZF9jb25maWcYBiABKAsyDS5VcGxvYWRDb25maWdIABIgCgpnZXRf",
          "Y29uZmlnGAcgASgLMgouR2V0Q29uZmlnSABCBgoEZGF0YSLdAwoLSVBDUmVz",
          "cG9uc2USDwoHc3VjY2VzcxgBIAEoCBIkCgxyZWNvcmRfc3RhdGUYAyABKA4y",
          "DC5SZWNvcmRTdGF0ZUgAEiQKDHdvcmtpbmdfbW9kZRgEIAEoDjIMLldvcmtp",
          "bmdNb2RlSAASIgoLaWJpdF9yZXN1bHQYBSABKAsyCy5JYml0UmVzdWx0SAAS",
          "IgoLY2JpdF9yZXN1bHQYBiABKAsyCy5DYml0UmVzdWx0SAASIgoLcGJpdF9y",
          "ZXN1bHQYByABKAsyCy5QYml0UmVzdWx0SAASHQoGc3RhdHVzGAggASgLMgsu",
          "U3RhdHVzRGF0YUgAEiAKCHZlcnNpb25zGAkgASgLMgwuVmVyc2lvbkRhdGFI",
          "ABIrChByZWNvcmRfaW5mb19kYXRhGAogASgLMg8uUmVjb3JkSW5mb0RhdGFI",
          "ABIzChRkb3dubG9hZF9yZWNvcmRfZGF0YRgLIAEoCzITLkRvd25sb2FkUmVj",
          "b3JkRGF0YUgAEi8KEnVwbG9hZF9jb25maWdfZGF0YRgMIAEoCzIRLlVwbG9h",
          "ZENvbmZpZ0RhdGFIABIpCg9nZXRfY29uZmlnX2RhdGEYDSABKAsyDi5HZXRD",
          "b25maWdEYXRhSABCBgoEZGF0YSrpAQoJQ29tbWFuZElkEhAKDFJFQ09SRF9T",
          "VEFURRAAEhAKDFdPUktJTkdfTU9ERRABEg4KClNUQVJUX0lCSVQQAhIMCghH",
          "RVRfSUJJVBADEgwKCEdFVF9DQklUEAQSDAoIR0VUX1BCSVQQBRIKCgZTVEFU",
          "VVMQBhIMCghWRVJTSU9OUxAHEgsKB0NPTk5FQ1QQCBIOCgpESVNDT05ORUNU",
          "EAkSDwoLUkVDT1JEX0lORk8QChITCg9ET1dOTE9BRF9SRUNPUkQQCxIRCg1V",
          "UExPQURfQ09ORklHEAwSDgoKR0VUX0NPTkZJRxANKiwKC1JlY29yZFN0YXRl",
          "EgoKBlJFQ09SRBAAEhEKDURPX05PVF9SRUNPUkQQASo5CgtXb3JraW5nTW9k",
          "ZRIICgRJRExFEAASDwoLT1BFUkFUSU9OQUwQARIPCgtNQUlOVEVOQU5DRRAC",
          "KuQBCgxDYml0VGVzdEJpdHMSDgoKQ0JJVF9QT1dFUhAAEhEKDUNCSVRfQVJJ",
          "TkM0MjkQARITCg9DQklUX01JTFNURDE1NTMQAhIRCg1DQklUX0FSSU5DNjY0",
          "EAMSGAoUQ0JJVF9BVURJT19JTlRFUkZBQ0UQBBINCglDQklUX0NTTVUQBhIN",
          "CglDQklUX1JJUFMQBxIMCghDQklUX0NWUhAIEgwKCENCSVRfRkRSEAkSDgoK",
          "Q0JJVF9DTE9DSxAKEg0KCUNCSVRfTU9ERRALEhYKEkNCSVRfRE9fTk9UX1JF",
          "Q09SRBAMKq8CCgxQYml0VGVzdEJpdHMSDgoKUEJJVF9QT1dFUhAAEhEKDVBC",
          "SVRfQVJJTkM0MjkQARITCg9QQklUX01JTFNURDE1NTMQAhIRCg1QQklUX0FS",
          "SU5DNjY0EAMSGAoUUEJJVF9BVURJT19JTlRFUkZBQ0UQBBIRCg1QQklUX0VU",
          "SEVSTkVUEAUSGQoVUEJJVF9TRVJJQUxfSU5URVJGQUNFEAYSGwoXUEJJVF9E",
          "SVNDUkVURV9JTlRFUkZBQ0UQBxINCglQQklUX0NTTVUQCBINCglQQklUX1JJ",
          "UFMQCRIMCghQQklUX0NWUhAKEgwKCFBCSVRfRkRSEAsSDgoKUEJJVF9DTE9D",
          "SxAMEg0KCVBCSVRfTU9ERRANEhYKElBCSVRfRE9fTk9UX1JFQ09SRBAOKq8C",
          "CgxJYml0VGVzdEJpdHMSDgoKSUJJVF9QT1dFUhAAEhEKDUlCSVRfQVJJTkM0",
          "MjkQARITCg9JQklUX01JTFNURDE1NTMQAhIRCg1JQklUX0FSSU5DNjY0EAMS",
          "GAoUSUJJVF9BVURJT19JTlRFUkZBQ0UQBBIRCg1JQklUX0VUSEVSTkVUEAUS",
          "GQoVSUJJVF9TRVJJQUxfSU5URVJGQUNFEAYSGwoXSUJJVF9ESVNDUkVURV9J",
          "TlRFUkZBQ0UQBxINCglJQklUX0NTTVUQCBINCglJQklUX1JJUFMQCRIMCghJ",
          "QklUX0NWUhAKEgwKCElCSVRfRkRSEAsSDgoKSUJJVF9DTE9DSxAMEg0KCUlC",
          "SVRfTU9ERRANEhYKEklCSVRfRE9fTk9UX1JFQ09SRBAOKjYKClJlY29yZFR5",
          "cGUSDAoIRkRSX0RBVEEQABIMCghDVlJfREFUQRABEgwKCEFMTF9EQVRBEAIq",
          "fwoVRG93bmxvYWRTZWxlY3Rpb25UeXBlEhQKEEJZX0ZMSUdIVF9OVU1CRVIQ",
          "ABITCg9CWV9MQVNUX01JTlVURVMQARIRCg1CWV9USU1FX1JBTkdFEAISFAoQ",
          "QllfQUREUkVTU19SQU5HRRADEhIKDkNVUlJFTlRfRkxJR0hUEARiBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CommandId), typeof(global::RecordState), typeof(global::WorkingMode), typeof(global::CbitTestBits), typeof(global::PbitTestBits), typeof(global::IbitTestBits), typeof(global::RecordType), typeof(global::DownloadSelectionType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ResourceUsageData), global::ResourceUsageData.Parser, new[]{ "CpuUsagePct", "RamUsagePct", "DiskUsagePct", "SwapUsagePct", "AvgCpuUsagePct" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeData), global::TimeData.Parser, new[]{ "Time", "IsValid", "SoftwareUptime", "OsUptime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VersionData), global::VersionData.Parser, new[]{ "SerialNumber", "PartNumber", "HardwareVersion", "KernelVersion", "ImageVersion", "SoftwareVersion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CbitResult), global::CbitResult.Parser, new[]{ "CheckPower", "CheckArinc429", "CheckMilstd1553", "CheckArinc664", "CheckAudioInterface", "CheckCsmu", "CheckRips", "CheckCvr", "CheckFdr", "CheckClock", "CheckMode", "CheckDoNotRecord" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PbitResult), global::PbitResult.Parser, new[]{ "CheckPower", "CheckArinc429", "CheckMilstd1553", "CheckArinc664", "CheckAudioInterface", "CheckEthernet", "CheckSerialInterface", "CheckDiscreteInterface", "CheckCsmu", "CheckRips", "CheckCvr", "CheckFdr", "CheckClock", "CheckMode", "CheckDoNotRecord" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IbitResult), global::IbitResult.Parser, new[]{ "CheckPower", "CheckArinc429", "CheckMilstd1553", "CheckArinc664", "CheckAudioInterface", "CheckEthernet", "CheckSerialInterface", "CheckDiscreteInterface", "CheckCsmu", "CheckRips", "CheckCvr", "CheckFdr", "CheckClock", "CheckMode", "CheckDoNotRecord" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FdrStatus), global::FdrStatus.Parser, new[]{ "IsRecording", "Arinc429Status", "Milstd1553Status", "Arinc664Status" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CvrStatus), global::CvrStatus.Parser, new[]{ "IsRecording", "IsOpeningMicrophone1", "IsOpeningMicrophone2", "IsOpeningMicrophone3", "IsOpeningMicrophone4", "IsOpeningAreaMic", "AudioInterfaceStatus" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NandBlock), global::NandBlock.Parser, new[]{ "BlockAddress", "RecordType", "StartTimestamp", "EndTimestamp", "DataSize", "FlightNumber", "SequenceInFlight", "Md5Hash", "IsValid", "IsCurrent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FlightRecord), global::FlightRecord.Parser, new[]{ "FlightNumber", "StartTime", "EndTime", "DurationMinutes", "FdrBlockCount", "CvrBlockCount", "TotalFdrSize", "TotalCvrSize", "StartBlockAddress", "EndBlockAddress", "IsComplete", "Blocks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NandMemoryStatus), global::NandMemoryStatus.Parser, new[]{ "TotalCapacity", "UsedCapacity", "AvailableCapacity", "TotalBlocks", "UsedBlocks", "BadBlocks", "CurrentWriteAddress", "WearLevelPercentage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RecordInfoData), global::RecordInfoData.Parser, new[]{ "Flights", "CurrentFlight", "MemoryStatus", "TotalFlights", "OldestFlightNumber", "NewestFlightNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownloadRecord), global::DownloadRecord.Parser, new[]{ "SelectionType", "FlightNumber", "LastMinutes", "StartTimestamp", "EndTimestamp", "StartAddress", "EndAddress", "RecordTypeFilter", "IncludeMetadata", "VerifyMd5", "MaxBlocks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownloadRecordData), global::DownloadRecordData.Parser, new[]{ "SelectedBlocks", "TotalBlocks", "TotalDataSize", "ArchivePath", "ArchiveMd5", "ExtractionTimeMs", "EstimatedTransferTimeSec", "HasIntegrityErrors", "CorruptedBlocks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadConfig), global::UploadConfig.Parser, new[]{ "JsonContent", "Filename", "Md5Hash", "IsChunked", "SessionId", "ChunkIndex", "TotalChunks", "ChunkData", "ChunkSize", "ChunkMd5", "TotalFileSize" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadConfigData), global::UploadConfigData.Parser, new[]{ "IsChunkedResponse", "SessionId", "ChunksReceived", "ChunksExpected", "UploadComplete", "MissingChunks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetConfig), global::GetConfig.Parser, new[]{ "UseChunked", "ChunkSize", "ChunkIndex", "SessionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetConfigData), global::GetConfigData.Parser, new[]{ "JsonContent", "Md5Hash", "IsChunked", "SessionId", "ChunkIndex", "TotalChunks", "ChunkData", "ChunkSize", "ChunkMd5", "TotalFileSize", "IsLastChunk" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusData), global::StatusData.Parser, new[]{ "RecordState", "WorkingMode", "ResourceUsage", "Time", "FdrStatus", "CvrStatus", "RipsStatus", "CbitResult", "PbitResult", "IbitResult" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IPCMessage), global::IPCMessage.Parser, new[]{ "Jwt", "CommandId", "RecordState", "WorkingMode", "DownloadRecord", "UploadConfig", "GetConfig" }, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IPCResponse), global::IPCResponse.Parser, new[]{ "Success", "RecordState", "WorkingMode", "IbitResult", "CbitResult", "PbitResult", "Status", "Versions", "RecordInfoData", "DownloadRecordData", "UploadConfigData", "GetConfigData" }, new[]{ "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
///&#x2F; @brief Command ID
///&#x2F; @details Command ID is used to identify the command sent to the server.
/// </summary>
public enum CommandId {
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("RECORD_STATE")] RecordState = 0,
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("WORKING_MODE")] WorkingMode = 1,
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("START_IBIT")] StartIbit = 2,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("GET_IBIT")] GetIbit = 3,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("GET_CBIT")] GetCbit = 4,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("GET_PBIT")] GetPbit = 5,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("STATUS")] Status = 6,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("VERSIONS")] Versions = 7,
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("CONNECT")] Connect = 8,
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("DISCONNECT")] Disconnect = 9,
  /// <summary>
  /// GET
  /// </summary>
  [pbr::OriginalName("RECORD_INFO")] RecordInfo = 10,
  /// <summary>
  /// SET
  /// </summary>
  [pbr::OriginalName("DOWNLOAD_RECORD")] DownloadRecord = 11,
  /// <summary>
  /// SET - Upload JSON configuration file
  /// </summary>
  [pbr::OriginalName("UPLOAD_CONFIG")] UploadConfig = 12,
  /// <summary>
  /// GET - Get current configuration
  /// </summary>
  [pbr::OriginalName("GET_CONFIG")] GetConfig = 13,
}

/// <summary>
///&#x2F; @brief Record State
///&#x2F; @details Record State is used to set the record state.
/// </summary>
public enum RecordState {
  /// <summary>
  /// RECORD
  /// </summary>
  [pbr::OriginalName("RECORD")] Record = 0,
  /// <summary>
  /// DO_NOT_RECORD
  /// </summary>
  [pbr::OriginalName("DO_NOT_RECORD")] DoNotRecord = 1,
}

/// <summary>
///&#x2F; @brief Working Mode
///&#x2F; @details Working Mode is used to set the working mode.
///&#x2F; IDLE: System is idle. It is the default state.
///&#x2F; OPERATIONAL: System is operational. It is the normal state.
///&#x2F; MAINTENANCE: System is in maintenance mode. It is the maintenance state.
/// </summary>
public enum WorkingMode {
  /// <summary>
  /// IDLE
  /// </summary>
  [pbr::OriginalName("IDLE")] Idle = 0,
  /// <summary>
  /// OPERATIONAL
  /// </summary>
  [pbr::OriginalName("OPERATIONAL")] Operational = 1,
  /// <summary>
  /// MAINTENANCE
  /// </summary>
  [pbr::OriginalName("MAINTENANCE")] Maintenance = 2,
}

/// <summary>
///&#x2F; @brief CBIT test bit positions
///&#x2F; @details CBIT test bit positions are used to identify the test bits.
/// </summary>
public enum CbitTestBits {
  /// <summary>
  /// checkPower
  /// </summary>
  [pbr::OriginalName("CBIT_POWER")] CbitPower = 0,
  /// <summary>
  /// checkARINC429
  /// </summary>
  [pbr::OriginalName("CBIT_ARINC429")] CbitArinc429 = 1,
  /// <summary>
  /// checkMILSTD1553
  /// </summary>
  [pbr::OriginalName("CBIT_MILSTD1553")] CbitMilstd1553 = 2,
  /// <summary>
  /// checkARIN664
  /// </summary>
  [pbr::OriginalName("CBIT_ARINC664")] CbitArinc664 = 3,
  /// <summary>
  /// checkAudioInterface
  /// </summary>
  [pbr::OriginalName("CBIT_AUDIO_INTERFACE")] CbitAudioInterface = 4,
  /// <summary>
  /// checkCSMU (Test 5 atlanm��)
  /// </summary>
  [pbr::OriginalName("CBIT_CSMU")] CbitCsmu = 6,
  /// <summary>
  /// checkRIPS
  /// </summary>
  [pbr::OriginalName("CBIT_RIPS")] CbitRips = 7,
  /// <summary>
  /// checkCVR
  /// </summary>
  [pbr::OriginalName("CBIT_CVR")] CbitCvr = 8,
  /// <summary>
  /// checkFDR
  /// </summary>
  [pbr::OriginalName("CBIT_FDR")] CbitFdr = 9,
  /// <summary>
  /// checkClock
  /// </summary>
  [pbr::OriginalName("CBIT_CLOCK")] CbitClock = 10,
  /// <summary>
  /// checkMode
  /// </summary>
  [pbr::OriginalName("CBIT_MODE")] CbitMode = 11,
  /// <summary>
  /// checkDoNotRecord
  /// </summary>
  [pbr::OriginalName("CBIT_DO_NOT_RECORD")] CbitDoNotRecord = 12,
}

/// <summary>
///&#x2F; @brief PBIT test bit positions
///&#x2F; @details PBIT test bit positions are used to identify the test bits.
/// </summary>
public enum PbitTestBits {
  /// <summary>
  /// checkPower
  /// </summary>
  [pbr::OriginalName("PBIT_POWER")] PbitPower = 0,
  /// <summary>
  /// checkARINC429
  /// </summary>
  [pbr::OriginalName("PBIT_ARINC429")] PbitArinc429 = 1,
  /// <summary>
  /// checkMILSTD1553
  /// </summary>
  [pbr::OriginalName("PBIT_MILSTD1553")] PbitMilstd1553 = 2,
  /// <summary>
  /// checkARIN664
  /// </summary>
  [pbr::OriginalName("PBIT_ARINC664")] PbitArinc664 = 3,
  /// <summary>
  /// checkAudioInterface
  /// </summary>
  [pbr::OriginalName("PBIT_AUDIO_INTERFACE")] PbitAudioInterface = 4,
  /// <summary>
  /// checkEthernet
  /// </summary>
  [pbr::OriginalName("PBIT_ETHERNET")] PbitEthernet = 5,
  /// <summary>
  /// checkSerialInterface
  /// </summary>
  [pbr::OriginalName("PBIT_SERIAL_INTERFACE")] PbitSerialInterface = 6,
  /// <summary>
  /// checkDiscreteInterface
  /// </summary>
  [pbr::OriginalName("PBIT_DISCRETE_INTERFACE")] PbitDiscreteInterface = 7,
  /// <summary>
  /// checkCSMU
  /// </summary>
  [pbr::OriginalName("PBIT_CSMU")] PbitCsmu = 8,
  /// <summary>
  /// checkRIPS
  /// </summary>
  [pbr::OriginalName("PBIT_RIPS")] PbitRips = 9,
  /// <summary>
  /// checkCVR
  /// </summary>
  [pbr::OriginalName("PBIT_CVR")] PbitCvr = 10,
  /// <summary>
  /// checkFDR
  /// </summary>
  [pbr::OriginalName("PBIT_FDR")] PbitFdr = 11,
  /// <summary>
  /// checkClock
  /// </summary>
  [pbr::OriginalName("PBIT_CLOCK")] PbitClock = 12,
  /// <summary>
  /// checkMode
  /// </summary>
  [pbr::OriginalName("PBIT_MODE")] PbitMode = 13,
  /// <summary>
  /// checkDoNotRecord
  /// </summary>
  [pbr::OriginalName("PBIT_DO_NOT_RECORD")] PbitDoNotRecord = 14,
}

/// <summary>
///&#x2F; @brief IBIT test bit positions
///&#x2F; @details IBIT test bit positions are used to identify the test bits.
/// </summary>
public enum IbitTestBits {
  /// <summary>
  /// checkPower
  /// </summary>
  [pbr::OriginalName("IBIT_POWER")] IbitPower = 0,
  /// <summary>
  /// checkARINC429
  /// </summary>
  [pbr::OriginalName("IBIT_ARINC429")] IbitArinc429 = 1,
  /// <summary>
  /// checkMILSTD1553
  /// </summary>
  [pbr::OriginalName("IBIT_MILSTD1553")] IbitMilstd1553 = 2,
  /// <summary>
  /// checkARIN664
  /// </summary>
  [pbr::OriginalName("IBIT_ARINC664")] IbitArinc664 = 3,
  /// <summary>
  /// checkAudioInterface
  /// </summary>
  [pbr::OriginalName("IBIT_AUDIO_INTERFACE")] IbitAudioInterface = 4,
  /// <summary>
  /// checkEthernet
  /// </summary>
  [pbr::OriginalName("IBIT_ETHERNET")] IbitEthernet = 5,
  /// <summary>
  /// checkSerialInterface
  /// </summary>
  [pbr::OriginalName("IBIT_SERIAL_INTERFACE")] IbitSerialInterface = 6,
  /// <summary>
  /// checkDiscreteInterface
  /// </summary>
  [pbr::OriginalName("IBIT_DISCRETE_INTERFACE")] IbitDiscreteInterface = 7,
  /// <summary>
  /// checkCSMU
  /// </summary>
  [pbr::OriginalName("IBIT_CSMU")] IbitCsmu = 8,
  /// <summary>
  /// checkRIPS
  /// </summary>
  [pbr::OriginalName("IBIT_RIPS")] IbitRips = 9,
  /// <summary>
  /// checkCVR
  /// </summary>
  [pbr::OriginalName("IBIT_CVR")] IbitCvr = 10,
  /// <summary>
  /// checkFDR
  /// </summary>
  [pbr::OriginalName("IBIT_FDR")] IbitFdr = 11,
  /// <summary>
  /// checkClock
  /// </summary>
  [pbr::OriginalName("IBIT_CLOCK")] IbitClock = 12,
  /// <summary>
  /// checkMode
  /// </summary>
  [pbr::OriginalName("IBIT_MODE")] IbitMode = 13,
  /// <summary>
  /// checkDoNotRecord
  /// </summary>
  [pbr::OriginalName("IBIT_DO_NOT_RECORD")] IbitDoNotRecord = 14,
}

/// <summary>
///&#x2F; @brief Record Types for NAND Memory System
///&#x2F; @details Defines the type of record data stored in NAND memory
/// </summary>
public enum RecordType {
  /// <summary>
  /// Flight Data Recorder data
  /// </summary>
  [pbr::OriginalName("FDR_DATA")] FdrData = 0,
  /// <summary>
  /// Cockpit Voice Recorder data
  /// </summary>
  [pbr::OriginalName("CVR_DATA")] CvrData = 1,
  /// <summary>
  /// All data (FDR and CVR)
  /// </summary>
  [pbr::OriginalName("ALL_DATA")] AllData = 2,
}

/// <summary>
///&#x2F; @brief Download Selection Type
///&#x2F; @details Defines different download selection criteria
/// </summary>
public enum DownloadSelectionType {
  /// <summary>
  /// Download by specific flight number
  /// </summary>
  [pbr::OriginalName("BY_FLIGHT_NUMBER")] ByFlightNumber = 0,
  /// <summary>
  /// Download last N minutes
  /// </summary>
  [pbr::OriginalName("BY_LAST_MINUTES")] ByLastMinutes = 1,
  /// <summary>
  /// Download by time range
  /// </summary>
  [pbr::OriginalName("BY_TIME_RANGE")] ByTimeRange = 2,
  /// <summary>
  /// Download by NAND address range
  /// </summary>
  [pbr::OriginalName("BY_ADDRESS_RANGE")] ByAddressRange = 3,
  /// <summary>
  /// Download current/last flight
  /// </summary>
  [pbr::OriginalName("CURRENT_FLIGHT")] CurrentFlight = 4,
}

#endregion

#region Messages
/// <summary>
///&#x2F; @brief Resource Usage Data
///&#x2F; @details Resource Usage Data is used to get the resource usage data.
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class ResourceUsageData : pb::IMessage<ResourceUsageData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ResourceUsageData> _parser = new pb::MessageParser<ResourceUsageData>(() => new ResourceUsageData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ResourceUsageData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ResourceUsageData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ResourceUsageData(ResourceUsageData other) : this() {
    cpuUsagePct_ = other.cpuUsagePct_;
    ramUsagePct_ = other.ramUsagePct_;
    diskUsagePct_ = other.diskUsagePct_;
    swapUsagePct_ = other.swapUsagePct_;
    avgCpuUsagePct_ = other.avgCpuUsagePct_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ResourceUsageData Clone() {
    return new ResourceUsageData(this);
  }

  /// <summary>Field number for the "cpu_usage_pct" field.</summary>
  public const int CpuUsagePctFieldNumber = 1;
  private double cpuUsagePct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double CpuUsagePct {
    get { return cpuUsagePct_; }
    set {
      cpuUsagePct_ = value;
    }
  }

  /// <summary>Field number for the "ram_usage_pct" field.</summary>
  public const int RamUsagePctFieldNumber = 2;
  private double ramUsagePct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double RamUsagePct {
    get { return ramUsagePct_; }
    set {
      ramUsagePct_ = value;
    }
  }

  /// <summary>Field number for the "disk_usage_pct" field.</summary>
  public const int DiskUsagePctFieldNumber = 3;
  private double diskUsagePct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double DiskUsagePct {
    get { return diskUsagePct_; }
    set {
      diskUsagePct_ = value;
    }
  }

  /// <summary>Field number for the "swap_usage_pct" field.</summary>
  public const int SwapUsagePctFieldNumber = 4;
  private double swapUsagePct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SwapUsagePct {
    get { return swapUsagePct_; }
    set {
      swapUsagePct_ = value;
    }
  }

  /// <summary>Field number for the "avg_cpu_usage_pct" field.</summary>
  public const int AvgCpuUsagePctFieldNumber = 5;
  private double avgCpuUsagePct_;
  /// <summary>
  /// For 1 min (e.g., 5, 15)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double AvgCpuUsagePct {
    get { return avgCpuUsagePct_; }
    set {
      avgCpuUsagePct_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ResourceUsageData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ResourceUsageData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuUsagePct, other.CpuUsagePct)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RamUsagePct, other.RamUsagePct)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DiskUsagePct, other.DiskUsagePct)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapUsagePct, other.SwapUsagePct)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgCpuUsagePct, other.AvgCpuUsagePct)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (CpuUsagePct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuUsagePct);
    if (RamUsagePct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RamUsagePct);
    if (DiskUsagePct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DiskUsagePct);
    if (SwapUsagePct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapUsagePct);
    if (AvgCpuUsagePct != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgCpuUsagePct);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CpuUsagePct != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(CpuUsagePct);
    }
    if (RamUsagePct != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(RamUsagePct);
    }
    if (DiskUsagePct != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(DiskUsagePct);
    }
    if (SwapUsagePct != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(SwapUsagePct);
    }
    if (AvgCpuUsagePct != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(AvgCpuUsagePct);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CpuUsagePct != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(CpuUsagePct);
    }
    if (RamUsagePct != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(RamUsagePct);
    }
    if (DiskUsagePct != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(DiskUsagePct);
    }
    if (SwapUsagePct != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(SwapUsagePct);
    }
    if (AvgCpuUsagePct != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(AvgCpuUsagePct);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (CpuUsagePct != 0D) {
      size += 1 + 8;
    }
    if (RamUsagePct != 0D) {
      size += 1 + 8;
    }
    if (DiskUsagePct != 0D) {
      size += 1 + 8;
    }
    if (SwapUsagePct != 0D) {
      size += 1 + 8;
    }
    if (AvgCpuUsagePct != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ResourceUsageData other) {
    if (other == null) {
      return;
    }
    if (other.CpuUsagePct != 0D) {
      CpuUsagePct = other.CpuUsagePct;
    }
    if (other.RamUsagePct != 0D) {
      RamUsagePct = other.RamUsagePct;
    }
    if (other.DiskUsagePct != 0D) {
      DiskUsagePct = other.DiskUsagePct;
    }
    if (other.SwapUsagePct != 0D) {
      SwapUsagePct = other.SwapUsagePct;
    }
    if (other.AvgCpuUsagePct != 0D) {
      AvgCpuUsagePct = other.AvgCpuUsagePct;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          CpuUsagePct = input.ReadDouble();
          break;
        }
        case 17: {
          RamUsagePct = input.ReadDouble();
          break;
        }
        case 25: {
          DiskUsagePct = input.ReadDouble();
          break;
        }
        case 33: {
          SwapUsagePct = input.ReadDouble();
          break;
        }
        case 41: {
          AvgCpuUsagePct = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          CpuUsagePct = input.ReadDouble();
          break;
        }
        case 17: {
          RamUsagePct = input.ReadDouble();
          break;
        }
        case 25: {
          DiskUsagePct = input.ReadDouble();
          break;
        }
        case 33: {
          SwapUsagePct = input.ReadDouble();
          break;
        }
        case 41: {
          AvgCpuUsagePct = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Time Data
///&#x2F; @details Time Data is used to get the time data.
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class TimeData : pb::IMessage<TimeData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TimeData> _parser = new pb::MessageParser<TimeData>(() => new TimeData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<TimeData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TimeData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TimeData(TimeData other) : this() {
    time_ = other.time_;
    isValid_ = other.isValid_;
    softwareUptime_ = other.softwareUptime_;
    osUptime_ = other.osUptime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TimeData Clone() {
    return new TimeData(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private string time_ = "";
  /// <summary>
  /// "YYYY-MM-DD HH:MM:SS.NNNNNNNNN"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Time {
    get { return time_; }
    set {
      time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_valid" field.</summary>
  public const int IsValidFieldNumber = 2;
  private bool isValid_;
  /// <summary>
  /// 1: Valid, 0: Not Valid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsValid {
    get { return isValid_; }
    set {
      isValid_ = value;
    }
  }

  /// <summary>Field number for the "software_uptime" field.</summary>
  public const int SoftwareUptimeFieldNumber = 3;
  private ulong softwareUptime_;
  /// <summary>
  /// Application uptime
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong SoftwareUptime {
    get { return softwareUptime_; }
    set {
      softwareUptime_ = value;
    }
  }

  /// <summary>Field number for the "os_uptime" field.</summary>
  public const int OsUptimeFieldNumber = 4;
  private ulong osUptime_;
  /// <summary>
  /// OS uptime
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong OsUptime {
    get { return osUptime_; }
    set {
      osUptime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as TimeData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(TimeData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (IsValid != other.IsValid) return false;
    if (SoftwareUptime != other.SoftwareUptime) return false;
    if (OsUptime != other.OsUptime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Time.Length != 0) hash ^= Time.GetHashCode();
    if (IsValid != false) hash ^= IsValid.GetHashCode();
    if (SoftwareUptime != 0UL) hash ^= SoftwareUptime.GetHashCode();
    if (OsUptime != 0UL) hash ^= OsUptime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (IsValid != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsValid);
    }
    if (SoftwareUptime != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(SoftwareUptime);
    }
    if (OsUptime != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(OsUptime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (IsValid != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsValid);
    }
    if (SoftwareUptime != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(SoftwareUptime);
    }
    if (OsUptime != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(OsUptime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Time.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
    }
    if (IsValid != false) {
      size += 1 + 1;
    }
    if (SoftwareUptime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SoftwareUptime);
    }
    if (OsUptime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OsUptime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(TimeData other) {
    if (other == null) {
      return;
    }
    if (other.Time.Length != 0) {
      Time = other.Time;
    }
    if (other.IsValid != false) {
      IsValid = other.IsValid;
    }
    if (other.SoftwareUptime != 0UL) {
      SoftwareUptime = other.SoftwareUptime;
    }
    if (other.OsUptime != 0UL) {
      OsUptime = other.OsUptime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 16: {
          IsValid = input.ReadBool();
          break;
        }
        case 24: {
          SoftwareUptime = input.ReadUInt64();
          break;
        }
        case 32: {
          OsUptime = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 16: {
          IsValid = input.ReadBool();
          break;
        }
        case 24: {
          SoftwareUptime = input.ReadUInt64();
          break;
        }
        case 32: {
          OsUptime = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Version Data
///&#x2F; @details Version Data is used to get the version data.
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class VersionData : pb::IMessage<VersionData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<VersionData> _parser = new pb::MessageParser<VersionData>(() => new VersionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<VersionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public VersionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public VersionData(VersionData other) : this() {
    serialNumber_ = other.serialNumber_;
    partNumber_ = other.partNumber_;
    hardwareVersion_ = other.hardwareVersion_;
    kernelVersion_ = other.kernelVersion_;
    imageVersion_ = other.imageVersion_;
    softwareVersion_ = other.softwareVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public VersionData Clone() {
    return new VersionData(this);
  }

  /// <summary>Field number for the "serial_number" field.</summary>
  public const int SerialNumberFieldNumber = 1;
  private string serialNumber_ = "";
  /// <summary>
  /// Serial number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SerialNumber {
    get { return serialNumber_; }
    set {
      serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "part_number" field.</summary>
  public const int PartNumberFieldNumber = 2;
  private string partNumber_ = "";
  /// <summary>
  /// Part number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string PartNumber {
    get { return partNumber_; }
    set {
      partNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardware_version" field.</summary>
  public const int HardwareVersionFieldNumber = 3;
  private string hardwareVersion_ = "";
  /// <summary>
  /// Hardware version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string HardwareVersion {
    get { return hardwareVersion_; }
    set {
      hardwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "kernel_version" field.</summary>
  public const int KernelVersionFieldNumber = 4;
  private string kernelVersion_ = "";
  /// <summary>
  /// Kernel version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string KernelVersion {
    get { return kernelVersion_; }
    set {
      kernelVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "image_version" field.</summary>
  public const int ImageVersionFieldNumber = 5;
  private string imageVersion_ = "";
  /// <summary>
  /// Image version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ImageVersion {
    get { return imageVersion_; }
    set {
      imageVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "software_version" field.</summary>
  public const int SoftwareVersionFieldNumber = 6;
  private string softwareVersion_ = "";
  /// <summary>
  /// Software version
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SoftwareVersion {
    get { return softwareVersion_; }
    set {
      softwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as VersionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(VersionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SerialNumber != other.SerialNumber) return false;
    if (PartNumber != other.PartNumber) return false;
    if (HardwareVersion != other.HardwareVersion) return false;
    if (KernelVersion != other.KernelVersion) return false;
    if (ImageVersion != other.ImageVersion) return false;
    if (SoftwareVersion != other.SoftwareVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
    if (PartNumber.Length != 0) hash ^= PartNumber.GetHashCode();
    if (HardwareVersion.Length != 0) hash ^= HardwareVersion.GetHashCode();
    if (KernelVersion.Length != 0) hash ^= KernelVersion.GetHashCode();
    if (ImageVersion.Length != 0) hash ^= ImageVersion.GetHashCode();
    if (SoftwareVersion.Length != 0) hash ^= SoftwareVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (SerialNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SerialNumber);
    }
    if (PartNumber.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PartNumber);
    }
    if (HardwareVersion.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HardwareVersion);
    }
    if (KernelVersion.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(KernelVersion);
    }
    if (ImageVersion.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ImageVersion);
    }
    if (SoftwareVersion.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(SoftwareVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (SerialNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SerialNumber);
    }
    if (PartNumber.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PartNumber);
    }
    if (HardwareVersion.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HardwareVersion);
    }
    if (KernelVersion.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(KernelVersion);
    }
    if (ImageVersion.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ImageVersion);
    }
    if (SoftwareVersion.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(SoftwareVersion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (SerialNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
    }
    if (PartNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PartNumber);
    }
    if (HardwareVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareVersion);
    }
    if (KernelVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(KernelVersion);
    }
    if (ImageVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageVersion);
    }
    if (SoftwareVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(VersionData other) {
    if (other == null) {
      return;
    }
    if (other.SerialNumber.Length != 0) {
      SerialNumber = other.SerialNumber;
    }
    if (other.PartNumber.Length != 0) {
      PartNumber = other.PartNumber;
    }
    if (other.HardwareVersion.Length != 0) {
      HardwareVersion = other.HardwareVersion;
    }
    if (other.KernelVersion.Length != 0) {
      KernelVersion = other.KernelVersion;
    }
    if (other.ImageVersion.Length != 0) {
      ImageVersion = other.ImageVersion;
    }
    if (other.SoftwareVersion.Length != 0) {
      SoftwareVersion = other.SoftwareVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SerialNumber = input.ReadString();
          break;
        }
        case 18: {
          PartNumber = input.ReadString();
          break;
        }
        case 26: {
          HardwareVersion = input.ReadString();
          break;
        }
        case 34: {
          KernelVersion = input.ReadString();
          break;
        }
        case 42: {
          ImageVersion = input.ReadString();
          break;
        }
        case 50: {
          SoftwareVersion = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          SerialNumber = input.ReadString();
          break;
        }
        case 18: {
          PartNumber = input.ReadString();
          break;
        }
        case 26: {
          HardwareVersion = input.ReadString();
          break;
        }
        case 34: {
          KernelVersion = input.ReadString();
          break;
        }
        case 42: {
          ImageVersion = input.ReadString();
          break;
        }
        case 50: {
          SoftwareVersion = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class CbitResult : pb::IMessage<CbitResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CbitResult> _parser = new pb::MessageParser<CbitResult>(() => new CbitResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CbitResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CbitResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CbitResult(CbitResult other) : this() {
    checkPower_ = other.checkPower_;
    checkArinc429_ = other.checkArinc429_;
    checkMilstd1553_ = other.checkMilstd1553_;
    checkArinc664_ = other.checkArinc664_;
    checkAudioInterface_ = other.checkAudioInterface_;
    checkCsmu_ = other.checkCsmu_;
    checkRips_ = other.checkRips_;
    checkCvr_ = other.checkCvr_;
    checkFdr_ = other.checkFdr_;
    checkClock_ = other.checkClock_;
    checkMode_ = other.checkMode_;
    checkDoNotRecord_ = other.checkDoNotRecord_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CbitResult Clone() {
    return new CbitResult(this);
  }

  /// <summary>Field number for the "check_power" field.</summary>
  public const int CheckPowerFieldNumber = 1;
  private bool checkPower_;
  /// <summary>
  /// Test 0 - G�� kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckPower {
    get { return checkPower_; }
    set {
      checkPower_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc429" field.</summary>
  public const int CheckArinc429FieldNumber = 2;
  private bool checkArinc429_;
  /// <summary>
  /// Test 1 - ARINC429 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc429 {
    get { return checkArinc429_; }
    set {
      checkArinc429_ = value;
    }
  }

  /// <summary>Field number for the "check_milstd1553" field.</summary>
  public const int CheckMilstd1553FieldNumber = 3;
  private bool checkMilstd1553_;
  /// <summary>
  /// Test 2 - MIL-STD-1553 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMilstd1553 {
    get { return checkMilstd1553_; }
    set {
      checkMilstd1553_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc664" field.</summary>
  public const int CheckArinc664FieldNumber = 4;
  private bool checkArinc664_;
  /// <summary>
  /// Test 3 - ARINC664 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc664 {
    get { return checkArinc664_; }
    set {
      checkArinc664_ = value;
    }
  }

  /// <summary>Field number for the "check_audio_interface" field.</summary>
  public const int CheckAudioInterfaceFieldNumber = 5;
  private bool checkAudioInterface_;
  /// <summary>
  /// Test 4 - Audio interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckAudioInterface {
    get { return checkAudioInterface_; }
    set {
      checkAudioInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_csmu" field.</summary>
  public const int CheckCsmuFieldNumber = 6;
  private bool checkCsmu_;
  /// <summary>
  /// Test 6 - CSMU (Crash Survivable Memory Unit)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCsmu {
    get { return checkCsmu_; }
    set {
      checkCsmu_ = value;
    }
  }

  /// <summary>Field number for the "check_rips" field.</summary>
  public const int CheckRipsFieldNumber = 7;
  private bool checkRips_;
  /// <summary>
  /// Test 7 - RIPS sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckRips {
    get { return checkRips_; }
    set {
      checkRips_ = value;
    }
  }

  /// <summary>Field number for the "check_cvr" field.</summary>
  public const int CheckCvrFieldNumber = 8;
  private bool checkCvr_;
  /// <summary>
  /// Test 8 - Cockpit Voice Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCvr {
    get { return checkCvr_; }
    set {
      checkCvr_ = value;
    }
  }

  /// <summary>Field number for the "check_fdr" field.</summary>
  public const int CheckFdrFieldNumber = 9;
  private bool checkFdr_;
  /// <summary>
  /// Test 9 - Flight Data Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckFdr {
    get { return checkFdr_; }
    set {
      checkFdr_ = value;
    }
  }

  /// <summary>Field number for the "check_clock" field.</summary>
  public const int CheckClockFieldNumber = 10;
  private bool checkClock_;
  /// <summary>
  /// Test 10 - Saat sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckClock {
    get { return checkClock_; }
    set {
      checkClock_ = value;
    }
  }

  /// <summary>Field number for the "check_mode" field.</summary>
  public const int CheckModeFieldNumber = 11;
  private bool checkMode_;
  /// <summary>
  /// Test 11 - Mod kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMode {
    get { return checkMode_; }
    set {
      checkMode_ = value;
    }
  }

  /// <summary>Field number for the "check_do_not_record" field.</summary>
  public const int CheckDoNotRecordFieldNumber = 12;
  private bool checkDoNotRecord_;
  /// <summary>
  /// Test 12 - "Kay�t yapma" modu
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckDoNotRecord {
    get { return checkDoNotRecord_; }
    set {
      checkDoNotRecord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CbitResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CbitResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheckPower != other.CheckPower) return false;
    if (CheckArinc429 != other.CheckArinc429) return false;
    if (CheckMilstd1553 != other.CheckMilstd1553) return false;
    if (CheckArinc664 != other.CheckArinc664) return false;
    if (CheckAudioInterface != other.CheckAudioInterface) return false;
    if (CheckCsmu != other.CheckCsmu) return false;
    if (CheckRips != other.CheckRips) return false;
    if (CheckCvr != other.CheckCvr) return false;
    if (CheckFdr != other.CheckFdr) return false;
    if (CheckClock != other.CheckClock) return false;
    if (CheckMode != other.CheckMode) return false;
    if (CheckDoNotRecord != other.CheckDoNotRecord) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (CheckPower != false) hash ^= CheckPower.GetHashCode();
    if (CheckArinc429 != false) hash ^= CheckArinc429.GetHashCode();
    if (CheckMilstd1553 != false) hash ^= CheckMilstd1553.GetHashCode();
    if (CheckArinc664 != false) hash ^= CheckArinc664.GetHashCode();
    if (CheckAudioInterface != false) hash ^= CheckAudioInterface.GetHashCode();
    if (CheckCsmu != false) hash ^= CheckCsmu.GetHashCode();
    if (CheckRips != false) hash ^= CheckRips.GetHashCode();
    if (CheckCvr != false) hash ^= CheckCvr.GetHashCode();
    if (CheckFdr != false) hash ^= CheckFdr.GetHashCode();
    if (CheckClock != false) hash ^= CheckClock.GetHashCode();
    if (CheckMode != false) hash ^= CheckMode.GetHashCode();
    if (CheckDoNotRecord != false) hash ^= CheckDoNotRecord.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (CheckPower != false) {
      size += 1 + 1;
    }
    if (CheckArinc429 != false) {
      size += 1 + 1;
    }
    if (CheckMilstd1553 != false) {
      size += 1 + 1;
    }
    if (CheckArinc664 != false) {
      size += 1 + 1;
    }
    if (CheckAudioInterface != false) {
      size += 1 + 1;
    }
    if (CheckCsmu != false) {
      size += 1 + 1;
    }
    if (CheckRips != false) {
      size += 1 + 1;
    }
    if (CheckCvr != false) {
      size += 1 + 1;
    }
    if (CheckFdr != false) {
      size += 1 + 1;
    }
    if (CheckClock != false) {
      size += 1 + 1;
    }
    if (CheckMode != false) {
      size += 1 + 1;
    }
    if (CheckDoNotRecord != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CbitResult other) {
    if (other == null) {
      return;
    }
    if (other.CheckPower != false) {
      CheckPower = other.CheckPower;
    }
    if (other.CheckArinc429 != false) {
      CheckArinc429 = other.CheckArinc429;
    }
    if (other.CheckMilstd1553 != false) {
      CheckMilstd1553 = other.CheckMilstd1553;
    }
    if (other.CheckArinc664 != false) {
      CheckArinc664 = other.CheckArinc664;
    }
    if (other.CheckAudioInterface != false) {
      CheckAudioInterface = other.CheckAudioInterface;
    }
    if (other.CheckCsmu != false) {
      CheckCsmu = other.CheckCsmu;
    }
    if (other.CheckRips != false) {
      CheckRips = other.CheckRips;
    }
    if (other.CheckCvr != false) {
      CheckCvr = other.CheckCvr;
    }
    if (other.CheckFdr != false) {
      CheckFdr = other.CheckFdr;
    }
    if (other.CheckClock != false) {
      CheckClock = other.CheckClock;
    }
    if (other.CheckMode != false) {
      CheckMode = other.CheckMode;
    }
    if (other.CheckDoNotRecord != false) {
      CheckDoNotRecord = other.CheckDoNotRecord;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 56: {
          CheckRips = input.ReadBool();
          break;
        }
        case 64: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 72: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 80: {
          CheckClock = input.ReadBool();
          break;
        }
        case 88: {
          CheckMode = input.ReadBool();
          break;
        }
        case 96: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 56: {
          CheckRips = input.ReadBool();
          break;
        }
        case 64: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 72: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 80: {
          CheckClock = input.ReadBool();
          break;
        }
        case 88: {
          CheckMode = input.ReadBool();
          break;
        }
        case 96: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class PbitResult : pb::IMessage<PbitResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PbitResult> _parser = new pb::MessageParser<PbitResult>(() => new PbitResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PbitResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PbitResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PbitResult(PbitResult other) : this() {
    checkPower_ = other.checkPower_;
    checkArinc429_ = other.checkArinc429_;
    checkMilstd1553_ = other.checkMilstd1553_;
    checkArinc664_ = other.checkArinc664_;
    checkAudioInterface_ = other.checkAudioInterface_;
    checkEthernet_ = other.checkEthernet_;
    checkSerialInterface_ = other.checkSerialInterface_;
    checkDiscreteInterface_ = other.checkDiscreteInterface_;
    checkCsmu_ = other.checkCsmu_;
    checkRips_ = other.checkRips_;
    checkCvr_ = other.checkCvr_;
    checkFdr_ = other.checkFdr_;
    checkClock_ = other.checkClock_;
    checkMode_ = other.checkMode_;
    checkDoNotRecord_ = other.checkDoNotRecord_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PbitResult Clone() {
    return new PbitResult(this);
  }

  /// <summary>Field number for the "check_power" field.</summary>
  public const int CheckPowerFieldNumber = 1;
  private bool checkPower_;
  /// <summary>
  /// Bit 0 - G�� kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckPower {
    get { return checkPower_; }
    set {
      checkPower_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc429" field.</summary>
  public const int CheckArinc429FieldNumber = 2;
  private bool checkArinc429_;
  /// <summary>
  /// Bit 1 - ARINC429 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc429 {
    get { return checkArinc429_; }
    set {
      checkArinc429_ = value;
    }
  }

  /// <summary>Field number for the "check_milstd1553" field.</summary>
  public const int CheckMilstd1553FieldNumber = 3;
  private bool checkMilstd1553_;
  /// <summary>
  /// Bit 2 - MIL-STD-1553 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMilstd1553 {
    get { return checkMilstd1553_; }
    set {
      checkMilstd1553_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc664" field.</summary>
  public const int CheckArinc664FieldNumber = 4;
  private bool checkArinc664_;
  /// <summary>
  /// Bit 3 - ARINC664 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc664 {
    get { return checkArinc664_; }
    set {
      checkArinc664_ = value;
    }
  }

  /// <summary>Field number for the "check_audio_interface" field.</summary>
  public const int CheckAudioInterfaceFieldNumber = 5;
  private bool checkAudioInterface_;
  /// <summary>
  /// Bit 4 - Audio interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckAudioInterface {
    get { return checkAudioInterface_; }
    set {
      checkAudioInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_ethernet" field.</summary>
  public const int CheckEthernetFieldNumber = 6;
  private bool checkEthernet_;
  /// <summary>
  /// Bit 5 - Ethernet interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckEthernet {
    get { return checkEthernet_; }
    set {
      checkEthernet_ = value;
    }
  }

  /// <summary>Field number for the "check_serial_interface" field.</summary>
  public const int CheckSerialInterfaceFieldNumber = 7;
  private bool checkSerialInterface_;
  /// <summary>
  /// Bit 6 - Serial interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckSerialInterface {
    get { return checkSerialInterface_; }
    set {
      checkSerialInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_discrete_interface" field.</summary>
  public const int CheckDiscreteInterfaceFieldNumber = 8;
  private bool checkDiscreteInterface_;
  /// <summary>
  /// Bit 7 - Discrete interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckDiscreteInterface {
    get { return checkDiscreteInterface_; }
    set {
      checkDiscreteInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_csmu" field.</summary>
  public const int CheckCsmuFieldNumber = 9;
  private bool checkCsmu_;
  /// <summary>
  /// Bit 8 - CSMU (Crash Survivable Memory Unit)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCsmu {
    get { return checkCsmu_; }
    set {
      checkCsmu_ = value;
    }
  }

  /// <summary>Field number for the "check_rips" field.</summary>
  public const int CheckRipsFieldNumber = 10;
  private bool checkRips_;
  /// <summary>
  /// Bit 9 - RIPS sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckRips {
    get { return checkRips_; }
    set {
      checkRips_ = value;
    }
  }

  /// <summary>Field number for the "check_cvr" field.</summary>
  public const int CheckCvrFieldNumber = 11;
  private bool checkCvr_;
  /// <summary>
  /// Bit 10 - Cockpit Voice Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCvr {
    get { return checkCvr_; }
    set {
      checkCvr_ = value;
    }
  }

  /// <summary>Field number for the "check_fdr" field.</summary>
  public const int CheckFdrFieldNumber = 12;
  private bool checkFdr_;
  /// <summary>
  /// Bit 11 - Flight Data Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckFdr {
    get { return checkFdr_; }
    set {
      checkFdr_ = value;
    }
  }

  /// <summary>Field number for the "check_clock" field.</summary>
  public const int CheckClockFieldNumber = 13;
  private bool checkClock_;
  /// <summary>
  /// Bit 12 - Saat sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckClock {
    get { return checkClock_; }
    set {
      checkClock_ = value;
    }
  }

  /// <summary>Field number for the "check_mode" field.</summary>
  public const int CheckModeFieldNumber = 14;
  private bool checkMode_;
  /// <summary>
  /// Bit 13 - Mod kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMode {
    get { return checkMode_; }
    set {
      checkMode_ = value;
    }
  }

  /// <summary>Field number for the "check_do_not_record" field.</summary>
  public const int CheckDoNotRecordFieldNumber = 15;
  private bool checkDoNotRecord_;
  /// <summary>
  /// Bit 14 - "Kay�t yapma" modu
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckDoNotRecord {
    get { return checkDoNotRecord_; }
    set {
      checkDoNotRecord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PbitResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PbitResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheckPower != other.CheckPower) return false;
    if (CheckArinc429 != other.CheckArinc429) return false;
    if (CheckMilstd1553 != other.CheckMilstd1553) return false;
    if (CheckArinc664 != other.CheckArinc664) return false;
    if (CheckAudioInterface != other.CheckAudioInterface) return false;
    if (CheckEthernet != other.CheckEthernet) return false;
    if (CheckSerialInterface != other.CheckSerialInterface) return false;
    if (CheckDiscreteInterface != other.CheckDiscreteInterface) return false;
    if (CheckCsmu != other.CheckCsmu) return false;
    if (CheckRips != other.CheckRips) return false;
    if (CheckCvr != other.CheckCvr) return false;
    if (CheckFdr != other.CheckFdr) return false;
    if (CheckClock != other.CheckClock) return false;
    if (CheckMode != other.CheckMode) return false;
    if (CheckDoNotRecord != other.CheckDoNotRecord) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (CheckPower != false) hash ^= CheckPower.GetHashCode();
    if (CheckArinc429 != false) hash ^= CheckArinc429.GetHashCode();
    if (CheckMilstd1553 != false) hash ^= CheckMilstd1553.GetHashCode();
    if (CheckArinc664 != false) hash ^= CheckArinc664.GetHashCode();
    if (CheckAudioInterface != false) hash ^= CheckAudioInterface.GetHashCode();
    if (CheckEthernet != false) hash ^= CheckEthernet.GetHashCode();
    if (CheckSerialInterface != false) hash ^= CheckSerialInterface.GetHashCode();
    if (CheckDiscreteInterface != false) hash ^= CheckDiscreteInterface.GetHashCode();
    if (CheckCsmu != false) hash ^= CheckCsmu.GetHashCode();
    if (CheckRips != false) hash ^= CheckRips.GetHashCode();
    if (CheckCvr != false) hash ^= CheckCvr.GetHashCode();
    if (CheckFdr != false) hash ^= CheckFdr.GetHashCode();
    if (CheckClock != false) hash ^= CheckClock.GetHashCode();
    if (CheckMode != false) hash ^= CheckMode.GetHashCode();
    if (CheckDoNotRecord != false) hash ^= CheckDoNotRecord.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckEthernet != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckEthernet);
    }
    if (CheckSerialInterface != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckSerialInterface);
    }
    if (CheckDiscreteInterface != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckDiscreteInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(104);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(112);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(120);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckEthernet != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckEthernet);
    }
    if (CheckSerialInterface != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckSerialInterface);
    }
    if (CheckDiscreteInterface != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckDiscreteInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(104);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(112);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(120);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (CheckPower != false) {
      size += 1 + 1;
    }
    if (CheckArinc429 != false) {
      size += 1 + 1;
    }
    if (CheckMilstd1553 != false) {
      size += 1 + 1;
    }
    if (CheckArinc664 != false) {
      size += 1 + 1;
    }
    if (CheckAudioInterface != false) {
      size += 1 + 1;
    }
    if (CheckEthernet != false) {
      size += 1 + 1;
    }
    if (CheckSerialInterface != false) {
      size += 1 + 1;
    }
    if (CheckDiscreteInterface != false) {
      size += 1 + 1;
    }
    if (CheckCsmu != false) {
      size += 1 + 1;
    }
    if (CheckRips != false) {
      size += 1 + 1;
    }
    if (CheckCvr != false) {
      size += 1 + 1;
    }
    if (CheckFdr != false) {
      size += 1 + 1;
    }
    if (CheckClock != false) {
      size += 1 + 1;
    }
    if (CheckMode != false) {
      size += 1 + 1;
    }
    if (CheckDoNotRecord != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PbitResult other) {
    if (other == null) {
      return;
    }
    if (other.CheckPower != false) {
      CheckPower = other.CheckPower;
    }
    if (other.CheckArinc429 != false) {
      CheckArinc429 = other.CheckArinc429;
    }
    if (other.CheckMilstd1553 != false) {
      CheckMilstd1553 = other.CheckMilstd1553;
    }
    if (other.CheckArinc664 != false) {
      CheckArinc664 = other.CheckArinc664;
    }
    if (other.CheckAudioInterface != false) {
      CheckAudioInterface = other.CheckAudioInterface;
    }
    if (other.CheckEthernet != false) {
      CheckEthernet = other.CheckEthernet;
    }
    if (other.CheckSerialInterface != false) {
      CheckSerialInterface = other.CheckSerialInterface;
    }
    if (other.CheckDiscreteInterface != false) {
      CheckDiscreteInterface = other.CheckDiscreteInterface;
    }
    if (other.CheckCsmu != false) {
      CheckCsmu = other.CheckCsmu;
    }
    if (other.CheckRips != false) {
      CheckRips = other.CheckRips;
    }
    if (other.CheckCvr != false) {
      CheckCvr = other.CheckCvr;
    }
    if (other.CheckFdr != false) {
      CheckFdr = other.CheckFdr;
    }
    if (other.CheckClock != false) {
      CheckClock = other.CheckClock;
    }
    if (other.CheckMode != false) {
      CheckMode = other.CheckMode;
    }
    if (other.CheckDoNotRecord != false) {
      CheckDoNotRecord = other.CheckDoNotRecord;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckEthernet = input.ReadBool();
          break;
        }
        case 56: {
          CheckSerialInterface = input.ReadBool();
          break;
        }
        case 64: {
          CheckDiscreteInterface = input.ReadBool();
          break;
        }
        case 72: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 80: {
          CheckRips = input.ReadBool();
          break;
        }
        case 88: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 96: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 104: {
          CheckClock = input.ReadBool();
          break;
        }
        case 112: {
          CheckMode = input.ReadBool();
          break;
        }
        case 120: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckEthernet = input.ReadBool();
          break;
        }
        case 56: {
          CheckSerialInterface = input.ReadBool();
          break;
        }
        case 64: {
          CheckDiscreteInterface = input.ReadBool();
          break;
        }
        case 72: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 80: {
          CheckRips = input.ReadBool();
          break;
        }
        case 88: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 96: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 104: {
          CheckClock = input.ReadBool();
          break;
        }
        case 112: {
          CheckMode = input.ReadBool();
          break;
        }
        case 120: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class IbitResult : pb::IMessage<IbitResult>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<IbitResult> _parser = new pb::MessageParser<IbitResult>(() => new IbitResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<IbitResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IbitResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IbitResult(IbitResult other) : this() {
    checkPower_ = other.checkPower_;
    checkArinc429_ = other.checkArinc429_;
    checkMilstd1553_ = other.checkMilstd1553_;
    checkArinc664_ = other.checkArinc664_;
    checkAudioInterface_ = other.checkAudioInterface_;
    checkEthernet_ = other.checkEthernet_;
    checkSerialInterface_ = other.checkSerialInterface_;
    checkDiscreteInterface_ = other.checkDiscreteInterface_;
    checkCsmu_ = other.checkCsmu_;
    checkRips_ = other.checkRips_;
    checkCvr_ = other.checkCvr_;
    checkFdr_ = other.checkFdr_;
    checkClock_ = other.checkClock_;
    checkMode_ = other.checkMode_;
    checkDoNotRecord_ = other.checkDoNotRecord_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IbitResult Clone() {
    return new IbitResult(this);
  }

  /// <summary>Field number for the "check_power" field.</summary>
  public const int CheckPowerFieldNumber = 1;
  private bool checkPower_;
  /// <summary>
  /// Bit 0 - G�� kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckPower {
    get { return checkPower_; }
    set {
      checkPower_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc429" field.</summary>
  public const int CheckArinc429FieldNumber = 2;
  private bool checkArinc429_;
  /// <summary>
  /// Bit 1 - ARINC429 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc429 {
    get { return checkArinc429_; }
    set {
      checkArinc429_ = value;
    }
  }

  /// <summary>Field number for the "check_milstd1553" field.</summary>
  public const int CheckMilstd1553FieldNumber = 3;
  private bool checkMilstd1553_;
  /// <summary>
  /// Bit 2 - MIL-STD-1553 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMilstd1553 {
    get { return checkMilstd1553_; }
    set {
      checkMilstd1553_ = value;
    }
  }

  /// <summary>Field number for the "check_arinc664" field.</summary>
  public const int CheckArinc664FieldNumber = 4;
  private bool checkArinc664_;
  /// <summary>
  /// Bit 3 - ARINC664 interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckArinc664 {
    get { return checkArinc664_; }
    set {
      checkArinc664_ = value;
    }
  }

  /// <summary>Field number for the "check_audio_interface" field.</summary>
  public const int CheckAudioInterfaceFieldNumber = 5;
  private bool checkAudioInterface_;
  /// <summary>
  /// Bit 4 - Audio interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckAudioInterface {
    get { return checkAudioInterface_; }
    set {
      checkAudioInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_ethernet" field.</summary>
  public const int CheckEthernetFieldNumber = 6;
  private bool checkEthernet_;
  /// <summary>
  /// Bit 5 - Ethernet interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckEthernet {
    get { return checkEthernet_; }
    set {
      checkEthernet_ = value;
    }
  }

  /// <summary>Field number for the "check_serial_interface" field.</summary>
  public const int CheckSerialInterfaceFieldNumber = 7;
  private bool checkSerialInterface_;
  /// <summary>
  /// Bit 6 - Serial interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckSerialInterface {
    get { return checkSerialInterface_; }
    set {
      checkSerialInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_discrete_interface" field.</summary>
  public const int CheckDiscreteInterfaceFieldNumber = 8;
  private bool checkDiscreteInterface_;
  /// <summary>
  /// Bit 7 - Discrete interface
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckDiscreteInterface {
    get { return checkDiscreteInterface_; }
    set {
      checkDiscreteInterface_ = value;
    }
  }

  /// <summary>Field number for the "check_csmu" field.</summary>
  public const int CheckCsmuFieldNumber = 9;
  private bool checkCsmu_;
  /// <summary>
  /// Bit 8 - CSMU (Crash Survivable Memory Unit)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCsmu {
    get { return checkCsmu_; }
    set {
      checkCsmu_ = value;
    }
  }

  /// <summary>Field number for the "check_rips" field.</summary>
  public const int CheckRipsFieldNumber = 10;
  private bool checkRips_;
  /// <summary>
  /// Bit 9 - RIPS sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckRips {
    get { return checkRips_; }
    set {
      checkRips_ = value;
    }
  }

  /// <summary>Field number for the "check_cvr" field.</summary>
  public const int CheckCvrFieldNumber = 11;
  private bool checkCvr_;
  /// <summary>
  /// Bit 10 - Cockpit Voice Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckCvr {
    get { return checkCvr_; }
    set {
      checkCvr_ = value;
    }
  }

  /// <summary>Field number for the "check_fdr" field.</summary>
  public const int CheckFdrFieldNumber = 12;
  private bool checkFdr_;
  /// <summary>
  /// Bit 11 - Flight Data Recorder
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckFdr {
    get { return checkFdr_; }
    set {
      checkFdr_ = value;
    }
  }

  /// <summary>Field number for the "check_clock" field.</summary>
  public const int CheckClockFieldNumber = 13;
  private bool checkClock_;
  /// <summary>
  /// Bit 12 - Saat sistemi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckClock {
    get { return checkClock_; }
    set {
      checkClock_ = value;
    }
  }

  /// <summary>Field number for the "check_mode" field.</summary>
  public const int CheckModeFieldNumber = 14;
  private bool checkMode_;
  /// <summary>
  /// Bit 13 - Mod kontrol�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckMode {
    get { return checkMode_; }
    set {
      checkMode_ = value;
    }
  }

  /// <summary>Field number for the "check_do_not_record" field.</summary>
  public const int CheckDoNotRecordFieldNumber = 15;
  private bool checkDoNotRecord_;
  /// <summary>
  /// Bit 14 - "Kay�t yapma" modu
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CheckDoNotRecord {
    get { return checkDoNotRecord_; }
    set {
      checkDoNotRecord_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as IbitResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(IbitResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheckPower != other.CheckPower) return false;
    if (CheckArinc429 != other.CheckArinc429) return false;
    if (CheckMilstd1553 != other.CheckMilstd1553) return false;
    if (CheckArinc664 != other.CheckArinc664) return false;
    if (CheckAudioInterface != other.CheckAudioInterface) return false;
    if (CheckEthernet != other.CheckEthernet) return false;
    if (CheckSerialInterface != other.CheckSerialInterface) return false;
    if (CheckDiscreteInterface != other.CheckDiscreteInterface) return false;
    if (CheckCsmu != other.CheckCsmu) return false;
    if (CheckRips != other.CheckRips) return false;
    if (CheckCvr != other.CheckCvr) return false;
    if (CheckFdr != other.CheckFdr) return false;
    if (CheckClock != other.CheckClock) return false;
    if (CheckMode != other.CheckMode) return false;
    if (CheckDoNotRecord != other.CheckDoNotRecord) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (CheckPower != false) hash ^= CheckPower.GetHashCode();
    if (CheckArinc429 != false) hash ^= CheckArinc429.GetHashCode();
    if (CheckMilstd1553 != false) hash ^= CheckMilstd1553.GetHashCode();
    if (CheckArinc664 != false) hash ^= CheckArinc664.GetHashCode();
    if (CheckAudioInterface != false) hash ^= CheckAudioInterface.GetHashCode();
    if (CheckEthernet != false) hash ^= CheckEthernet.GetHashCode();
    if (CheckSerialInterface != false) hash ^= CheckSerialInterface.GetHashCode();
    if (CheckDiscreteInterface != false) hash ^= CheckDiscreteInterface.GetHashCode();
    if (CheckCsmu != false) hash ^= CheckCsmu.GetHashCode();
    if (CheckRips != false) hash ^= CheckRips.GetHashCode();
    if (CheckCvr != false) hash ^= CheckCvr.GetHashCode();
    if (CheckFdr != false) hash ^= CheckFdr.GetHashCode();
    if (CheckClock != false) hash ^= CheckClock.GetHashCode();
    if (CheckMode != false) hash ^= CheckMode.GetHashCode();
    if (CheckDoNotRecord != false) hash ^= CheckDoNotRecord.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckEthernet != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckEthernet);
    }
    if (CheckSerialInterface != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckSerialInterface);
    }
    if (CheckDiscreteInterface != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckDiscreteInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(104);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(112);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(120);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CheckPower != false) {
      output.WriteRawTag(8);
      output.WriteBool(CheckPower);
    }
    if (CheckArinc429 != false) {
      output.WriteRawTag(16);
      output.WriteBool(CheckArinc429);
    }
    if (CheckMilstd1553 != false) {
      output.WriteRawTag(24);
      output.WriteBool(CheckMilstd1553);
    }
    if (CheckArinc664 != false) {
      output.WriteRawTag(32);
      output.WriteBool(CheckArinc664);
    }
    if (CheckAudioInterface != false) {
      output.WriteRawTag(40);
      output.WriteBool(CheckAudioInterface);
    }
    if (CheckEthernet != false) {
      output.WriteRawTag(48);
      output.WriteBool(CheckEthernet);
    }
    if (CheckSerialInterface != false) {
      output.WriteRawTag(56);
      output.WriteBool(CheckSerialInterface);
    }
    if (CheckDiscreteInterface != false) {
      output.WriteRawTag(64);
      output.WriteBool(CheckDiscreteInterface);
    }
    if (CheckCsmu != false) {
      output.WriteRawTag(72);
      output.WriteBool(CheckCsmu);
    }
    if (CheckRips != false) {
      output.WriteRawTag(80);
      output.WriteBool(CheckRips);
    }
    if (CheckCvr != false) {
      output.WriteRawTag(88);
      output.WriteBool(CheckCvr);
    }
    if (CheckFdr != false) {
      output.WriteRawTag(96);
      output.WriteBool(CheckFdr);
    }
    if (CheckClock != false) {
      output.WriteRawTag(104);
      output.WriteBool(CheckClock);
    }
    if (CheckMode != false) {
      output.WriteRawTag(112);
      output.WriteBool(CheckMode);
    }
    if (CheckDoNotRecord != false) {
      output.WriteRawTag(120);
      output.WriteBool(CheckDoNotRecord);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (CheckPower != false) {
      size += 1 + 1;
    }
    if (CheckArinc429 != false) {
      size += 1 + 1;
    }
    if (CheckMilstd1553 != false) {
      size += 1 + 1;
    }
    if (CheckArinc664 != false) {
      size += 1 + 1;
    }
    if (CheckAudioInterface != false) {
      size += 1 + 1;
    }
    if (CheckEthernet != false) {
      size += 1 + 1;
    }
    if (CheckSerialInterface != false) {
      size += 1 + 1;
    }
    if (CheckDiscreteInterface != false) {
      size += 1 + 1;
    }
    if (CheckCsmu != false) {
      size += 1 + 1;
    }
    if (CheckRips != false) {
      size += 1 + 1;
    }
    if (CheckCvr != false) {
      size += 1 + 1;
    }
    if (CheckFdr != false) {
      size += 1 + 1;
    }
    if (CheckClock != false) {
      size += 1 + 1;
    }
    if (CheckMode != false) {
      size += 1 + 1;
    }
    if (CheckDoNotRecord != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(IbitResult other) {
    if (other == null) {
      return;
    }
    if (other.CheckPower != false) {
      CheckPower = other.CheckPower;
    }
    if (other.CheckArinc429 != false) {
      CheckArinc429 = other.CheckArinc429;
    }
    if (other.CheckMilstd1553 != false) {
      CheckMilstd1553 = other.CheckMilstd1553;
    }
    if (other.CheckArinc664 != false) {
      CheckArinc664 = other.CheckArinc664;
    }
    if (other.CheckAudioInterface != false) {
      CheckAudioInterface = other.CheckAudioInterface;
    }
    if (other.CheckEthernet != false) {
      CheckEthernet = other.CheckEthernet;
    }
    if (other.CheckSerialInterface != false) {
      CheckSerialInterface = other.CheckSerialInterface;
    }
    if (other.CheckDiscreteInterface != false) {
      CheckDiscreteInterface = other.CheckDiscreteInterface;
    }
    if (other.CheckCsmu != false) {
      CheckCsmu = other.CheckCsmu;
    }
    if (other.CheckRips != false) {
      CheckRips = other.CheckRips;
    }
    if (other.CheckCvr != false) {
      CheckCvr = other.CheckCvr;
    }
    if (other.CheckFdr != false) {
      CheckFdr = other.CheckFdr;
    }
    if (other.CheckClock != false) {
      CheckClock = other.CheckClock;
    }
    if (other.CheckMode != false) {
      CheckMode = other.CheckMode;
    }
    if (other.CheckDoNotRecord != false) {
      CheckDoNotRecord = other.CheckDoNotRecord;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckEthernet = input.ReadBool();
          break;
        }
        case 56: {
          CheckSerialInterface = input.ReadBool();
          break;
        }
        case 64: {
          CheckDiscreteInterface = input.ReadBool();
          break;
        }
        case 72: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 80: {
          CheckRips = input.ReadBool();
          break;
        }
        case 88: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 96: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 104: {
          CheckClock = input.ReadBool();
          break;
        }
        case 112: {
          CheckMode = input.ReadBool();
          break;
        }
        case 120: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CheckPower = input.ReadBool();
          break;
        }
        case 16: {
          CheckArinc429 = input.ReadBool();
          break;
        }
        case 24: {
          CheckMilstd1553 = input.ReadBool();
          break;
        }
        case 32: {
          CheckArinc664 = input.ReadBool();
          break;
        }
        case 40: {
          CheckAudioInterface = input.ReadBool();
          break;
        }
        case 48: {
          CheckEthernet = input.ReadBool();
          break;
        }
        case 56: {
          CheckSerialInterface = input.ReadBool();
          break;
        }
        case 64: {
          CheckDiscreteInterface = input.ReadBool();
          break;
        }
        case 72: {
          CheckCsmu = input.ReadBool();
          break;
        }
        case 80: {
          CheckRips = input.ReadBool();
          break;
        }
        case 88: {
          CheckCvr = input.ReadBool();
          break;
        }
        case 96: {
          CheckFdr = input.ReadBool();
          break;
        }
        case 104: {
          CheckClock = input.ReadBool();
          break;
        }
        case 112: {
          CheckMode = input.ReadBool();
          break;
        }
        case 120: {
          CheckDoNotRecord = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class FdrStatus : pb::IMessage<FdrStatus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<FdrStatus> _parser = new pb::MessageParser<FdrStatus>(() => new FdrStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<FdrStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FdrStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FdrStatus(FdrStatus other) : this() {
    isRecording_ = other.isRecording_;
    arinc429Status_ = other.arinc429Status_;
    milstd1553Status_ = other.milstd1553Status_;
    arinc664Status_ = other.arinc664Status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FdrStatus Clone() {
    return new FdrStatus(this);
  }

  /// <summary>Field number for the "is_recording" field.</summary>
  public const int IsRecordingFieldNumber = 1;
  private bool isRecording_;
  /// <summary>
  /// 1: Recording, 0: Not Recording
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRecording {
    get { return isRecording_; }
    set {
      isRecording_ = value;
    }
  }

  /// <summary>Field number for the "arinc429_status" field.</summary>
  public const int Arinc429StatusFieldNumber = 2;
  private bool arinc429Status_;
  /// <summary>
  /// 1: OK, 0: Not OK
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Arinc429Status {
    get { return arinc429Status_; }
    set {
      arinc429Status_ = value;
    }
  }

  /// <summary>Field number for the "milstd1553_status" field.</summary>
  public const int Milstd1553StatusFieldNumber = 3;
  private bool milstd1553Status_;
  /// <summary>
  /// 1: OK, 0: Not OK
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Milstd1553Status {
    get { return milstd1553Status_; }
    set {
      milstd1553Status_ = value;
    }
  }

  /// <summary>Field number for the "arinc664_status" field.</summary>
  public const int Arinc664StatusFieldNumber = 4;
  private bool arinc664Status_;
  /// <summary>
  /// 1: OK, 0: Not OK
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Arinc664Status {
    get { return arinc664Status_; }
    set {
      arinc664Status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as FdrStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(FdrStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsRecording != other.IsRecording) return false;
    if (Arinc429Status != other.Arinc429Status) return false;
    if (Milstd1553Status != other.Milstd1553Status) return false;
    if (Arinc664Status != other.Arinc664Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (IsRecording != false) hash ^= IsRecording.GetHashCode();
    if (Arinc429Status != false) hash ^= Arinc429Status.GetHashCode();
    if (Milstd1553Status != false) hash ^= Milstd1553Status.GetHashCode();
    if (Arinc664Status != false) hash ^= Arinc664Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (IsRecording != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsRecording);
    }
    if (Arinc429Status != false) {
      output.WriteRawTag(16);
      output.WriteBool(Arinc429Status);
    }
    if (Milstd1553Status != false) {
      output.WriteRawTag(24);
      output.WriteBool(Milstd1553Status);
    }
    if (Arinc664Status != false) {
      output.WriteRawTag(32);
      output.WriteBool(Arinc664Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (IsRecording != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsRecording);
    }
    if (Arinc429Status != false) {
      output.WriteRawTag(16);
      output.WriteBool(Arinc429Status);
    }
    if (Milstd1553Status != false) {
      output.WriteRawTag(24);
      output.WriteBool(Milstd1553Status);
    }
    if (Arinc664Status != false) {
      output.WriteRawTag(32);
      output.WriteBool(Arinc664Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (IsRecording != false) {
      size += 1 + 1;
    }
    if (Arinc429Status != false) {
      size += 1 + 1;
    }
    if (Milstd1553Status != false) {
      size += 1 + 1;
    }
    if (Arinc664Status != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(FdrStatus other) {
    if (other == null) {
      return;
    }
    if (other.IsRecording != false) {
      IsRecording = other.IsRecording;
    }
    if (other.Arinc429Status != false) {
      Arinc429Status = other.Arinc429Status;
    }
    if (other.Milstd1553Status != false) {
      Milstd1553Status = other.Milstd1553Status;
    }
    if (other.Arinc664Status != false) {
      Arinc664Status = other.Arinc664Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsRecording = input.ReadBool();
          break;
        }
        case 16: {
          Arinc429Status = input.ReadBool();
          break;
        }
        case 24: {
          Milstd1553Status = input.ReadBool();
          break;
        }
        case 32: {
          Arinc664Status = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          IsRecording = input.ReadBool();
          break;
        }
        case 16: {
          Arinc429Status = input.ReadBool();
          break;
        }
        case 24: {
          Milstd1553Status = input.ReadBool();
          break;
        }
        case 32: {
          Arinc664Status = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class CvrStatus : pb::IMessage<CvrStatus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CvrStatus> _parser = new pb::MessageParser<CvrStatus>(() => new CvrStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<CvrStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CvrStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CvrStatus(CvrStatus other) : this() {
    isRecording_ = other.isRecording_;
    isOpeningMicrophone1_ = other.isOpeningMicrophone1_;
    isOpeningMicrophone2_ = other.isOpeningMicrophone2_;
    isOpeningMicrophone3_ = other.isOpeningMicrophone3_;
    isOpeningMicrophone4_ = other.isOpeningMicrophone4_;
    isOpeningAreaMic_ = other.isOpeningAreaMic_;
    audioInterfaceStatus_ = other.audioInterfaceStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public CvrStatus Clone() {
    return new CvrStatus(this);
  }

  /// <summary>Field number for the "is_recording" field.</summary>
  public const int IsRecordingFieldNumber = 1;
  private bool isRecording_;
  /// <summary>
  /// 1: Recording, 0: Not Recording
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRecording {
    get { return isRecording_; }
    set {
      isRecording_ = value;
    }
  }

  /// <summary>Field number for the "is_opening_microphone1" field.</summary>
  public const int IsOpeningMicrophone1FieldNumber = 2;
  private bool isOpeningMicrophone1_;
  /// <summary>
  /// 1: Opening, 0: Not Opening
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpeningMicrophone1 {
    get { return isOpeningMicrophone1_; }
    set {
      isOpeningMicrophone1_ = value;
    }
  }

  /// <summary>Field number for the "is_opening_microphone2" field.</summary>
  public const int IsOpeningMicrophone2FieldNumber = 3;
  private bool isOpeningMicrophone2_;
  /// <summary>
  /// 1: Opening, 0: Not Opening
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpeningMicrophone2 {
    get { return isOpeningMicrophone2_; }
    set {
      isOpeningMicrophone2_ = value;
    }
  }

  /// <summary>Field number for the "is_opening_microphone3" field.</summary>
  public const int IsOpeningMicrophone3FieldNumber = 4;
  private bool isOpeningMicrophone3_;
  /// <summary>
  /// 1: Opening, 0: Not Opening
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpeningMicrophone3 {
    get { return isOpeningMicrophone3_; }
    set {
      isOpeningMicrophone3_ = value;
    }
  }

  /// <summary>Field number for the "is_opening_microphone4" field.</summary>
  public const int IsOpeningMicrophone4FieldNumber = 5;
  private bool isOpeningMicrophone4_;
  /// <summary>
  /// 1: Opening, 0: Not Opening
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpeningMicrophone4 {
    get { return isOpeningMicrophone4_; }
    set {
      isOpeningMicrophone4_ = value;
    }
  }

  /// <summary>Field number for the "is_opening_area_mic" field.</summary>
  public const int IsOpeningAreaMicFieldNumber = 6;
  private bool isOpeningAreaMic_;
  /// <summary>
  /// 1: Opening, 0: Not Opening
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpeningAreaMic {
    get { return isOpeningAreaMic_; }
    set {
      isOpeningAreaMic_ = value;
    }
  }

  /// <summary>Field number for the "audio_interface_status" field.</summary>
  public const int AudioInterfaceStatusFieldNumber = 7;
  private bool audioInterfaceStatus_;
  /// <summary>
  /// 1: OK, 0: Not OK
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AudioInterfaceStatus {
    get { return audioInterfaceStatus_; }
    set {
      audioInterfaceStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as CvrStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(CvrStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsRecording != other.IsRecording) return false;
    if (IsOpeningMicrophone1 != other.IsOpeningMicrophone1) return false;
    if (IsOpeningMicrophone2 != other.IsOpeningMicrophone2) return false;
    if (IsOpeningMicrophone3 != other.IsOpeningMicrophone3) return false;
    if (IsOpeningMicrophone4 != other.IsOpeningMicrophone4) return false;
    if (IsOpeningAreaMic != other.IsOpeningAreaMic) return false;
    if (AudioInterfaceStatus != other.AudioInterfaceStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (IsRecording != false) hash ^= IsRecording.GetHashCode();
    if (IsOpeningMicrophone1 != false) hash ^= IsOpeningMicrophone1.GetHashCode();
    if (IsOpeningMicrophone2 != false) hash ^= IsOpeningMicrophone2.GetHashCode();
    if (IsOpeningMicrophone3 != false) hash ^= IsOpeningMicrophone3.GetHashCode();
    if (IsOpeningMicrophone4 != false) hash ^= IsOpeningMicrophone4.GetHashCode();
    if (IsOpeningAreaMic != false) hash ^= IsOpeningAreaMic.GetHashCode();
    if (AudioInterfaceStatus != false) hash ^= AudioInterfaceStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (IsRecording != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsRecording);
    }
    if (IsOpeningMicrophone1 != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpeningMicrophone1);
    }
    if (IsOpeningMicrophone2 != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsOpeningMicrophone2);
    }
    if (IsOpeningMicrophone3 != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsOpeningMicrophone3);
    }
    if (IsOpeningMicrophone4 != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsOpeningMicrophone4);
    }
    if (IsOpeningAreaMic != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsOpeningAreaMic);
    }
    if (AudioInterfaceStatus != false) {
      output.WriteRawTag(56);
      output.WriteBool(AudioInterfaceStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (IsRecording != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsRecording);
    }
    if (IsOpeningMicrophone1 != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpeningMicrophone1);
    }
    if (IsOpeningMicrophone2 != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsOpeningMicrophone2);
    }
    if (IsOpeningMicrophone3 != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsOpeningMicrophone3);
    }
    if (IsOpeningMicrophone4 != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsOpeningMicrophone4);
    }
    if (IsOpeningAreaMic != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsOpeningAreaMic);
    }
    if (AudioInterfaceStatus != false) {
      output.WriteRawTag(56);
      output.WriteBool(AudioInterfaceStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (IsRecording != false) {
      size += 1 + 1;
    }
    if (IsOpeningMicrophone1 != false) {
      size += 1 + 1;
    }
    if (IsOpeningMicrophone2 != false) {
      size += 1 + 1;
    }
    if (IsOpeningMicrophone3 != false) {
      size += 1 + 1;
    }
    if (IsOpeningMicrophone4 != false) {
      size += 1 + 1;
    }
    if (IsOpeningAreaMic != false) {
      size += 1 + 1;
    }
    if (AudioInterfaceStatus != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(CvrStatus other) {
    if (other == null) {
      return;
    }
    if (other.IsRecording != false) {
      IsRecording = other.IsRecording;
    }
    if (other.IsOpeningMicrophone1 != false) {
      IsOpeningMicrophone1 = other.IsOpeningMicrophone1;
    }
    if (other.IsOpeningMicrophone2 != false) {
      IsOpeningMicrophone2 = other.IsOpeningMicrophone2;
    }
    if (other.IsOpeningMicrophone3 != false) {
      IsOpeningMicrophone3 = other.IsOpeningMicrophone3;
    }
    if (other.IsOpeningMicrophone4 != false) {
      IsOpeningMicrophone4 = other.IsOpeningMicrophone4;
    }
    if (other.IsOpeningAreaMic != false) {
      IsOpeningAreaMic = other.IsOpeningAreaMic;
    }
    if (other.AudioInterfaceStatus != false) {
      AudioInterfaceStatus = other.AudioInterfaceStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsRecording = input.ReadBool();
          break;
        }
        case 16: {
          IsOpeningMicrophone1 = input.ReadBool();
          break;
        }
        case 24: {
          IsOpeningMicrophone2 = input.ReadBool();
          break;
        }
        case 32: {
          IsOpeningMicrophone3 = input.ReadBool();
          break;
        }
        case 40: {
          IsOpeningMicrophone4 = input.ReadBool();
          break;
        }
        case 48: {
          IsOpeningAreaMic = input.ReadBool();
          break;
        }
        case 56: {
          AudioInterfaceStatus = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          IsRecording = input.ReadBool();
          break;
        }
        case 16: {
          IsOpeningMicrophone1 = input.ReadBool();
          break;
        }
        case 24: {
          IsOpeningMicrophone2 = input.ReadBool();
          break;
        }
        case 32: {
          IsOpeningMicrophone3 = input.ReadBool();
          break;
        }
        case 40: {
          IsOpeningMicrophone4 = input.ReadBool();
          break;
        }
        case 48: {
          IsOpeningAreaMic = input.ReadBool();
          break;
        }
        case 56: {
          AudioInterfaceStatus = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief NAND Memory Block Information
///&#x2F; @details Information about a single block in NAND memory (1-minute data)
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class NandBlock : pb::IMessage<NandBlock>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NandBlock> _parser = new pb::MessageParser<NandBlock>(() => new NandBlock());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<NandBlock> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandBlock() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandBlock(NandBlock other) : this() {
    blockAddress_ = other.blockAddress_;
    recordType_ = other.recordType_;
    startTimestamp_ = other.startTimestamp_;
    endTimestamp_ = other.endTimestamp_;
    dataSize_ = other.dataSize_;
    flightNumber_ = other.flightNumber_;
    sequenceInFlight_ = other.sequenceInFlight_;
    md5Hash_ = other.md5Hash_;
    isValid_ = other.isValid_;
    isCurrent_ = other.isCurrent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandBlock Clone() {
    return new NandBlock(this);
  }

  /// <summary>Field number for the "block_address" field.</summary>
  public const int BlockAddressFieldNumber = 1;
  private uint blockAddress_;
  /// <summary>
  /// NAND block address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BlockAddress {
    get { return blockAddress_; }
    set {
      blockAddress_ = value;
    }
  }

  /// <summary>Field number for the "record_type" field.</summary>
  public const int RecordTypeFieldNumber = 2;
  private global::RecordType recordType_ = global::RecordType.FdrData;
  /// <summary>
  /// FDR or CVR data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordType RecordType {
    get { return recordType_; }
    set {
      recordType_ = value;
    }
  }

  /// <summary>Field number for the "start_timestamp" field.</summary>
  public const int StartTimestampFieldNumber = 3;
  private ulong startTimestamp_;
  /// <summary>
  /// Block start time (Unix timestamp)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong StartTimestamp {
    get { return startTimestamp_; }
    set {
      startTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "end_timestamp" field.</summary>
  public const int EndTimestampFieldNumber = 4;
  private ulong endTimestamp_;
  /// <summary>
  /// Block end time (Unix timestamp)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong EndTimestamp {
    get { return endTimestamp_; }
    set {
      endTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "data_size" field.</summary>
  public const int DataSizeFieldNumber = 5;
  private uint dataSize_;
  /// <summary>
  /// Actual data size in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DataSize {
    get { return dataSize_; }
    set {
      dataSize_ = value;
    }
  }

  /// <summary>Field number for the "flight_number" field.</summary>
  public const int FlightNumberFieldNumber = 6;
  private uint flightNumber_;
  /// <summary>
  /// Flight number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FlightNumber {
    get { return flightNumber_; }
    set {
      flightNumber_ = value;
    }
  }

  /// <summary>Field number for the "sequence_in_flight" field.</summary>
  public const int SequenceInFlightFieldNumber = 7;
  private uint sequenceInFlight_;
  /// <summary>
  /// Sequence number within flight
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SequenceInFlight {
    get { return sequenceInFlight_; }
    set {
      sequenceInFlight_ = value;
    }
  }

  /// <summary>Field number for the "md5_hash" field.</summary>
  public const int Md5HashFieldNumber = 8;
  private string md5Hash_ = "";
  /// <summary>
  /// MD5 hash of the block data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Md5Hash {
    get { return md5Hash_; }
    set {
      md5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_valid" field.</summary>
  public const int IsValidFieldNumber = 9;
  private bool isValid_;
  /// <summary>
  /// Block data integrity status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsValid {
    get { return isValid_; }
    set {
      isValid_ = value;
    }
  }

  /// <summary>Field number for the "is_current" field.</summary>
  public const int IsCurrentFieldNumber = 10;
  private bool isCurrent_;
  /// <summary>
  /// Currently being written
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsCurrent {
    get { return isCurrent_; }
    set {
      isCurrent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as NandBlock);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(NandBlock other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BlockAddress != other.BlockAddress) return false;
    if (RecordType != other.RecordType) return false;
    if (StartTimestamp != other.StartTimestamp) return false;
    if (EndTimestamp != other.EndTimestamp) return false;
    if (DataSize != other.DataSize) return false;
    if (FlightNumber != other.FlightNumber) return false;
    if (SequenceInFlight != other.SequenceInFlight) return false;
    if (Md5Hash != other.Md5Hash) return false;
    if (IsValid != other.IsValid) return false;
    if (IsCurrent != other.IsCurrent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (BlockAddress != 0) hash ^= BlockAddress.GetHashCode();
    if (RecordType != global::RecordType.FdrData) hash ^= RecordType.GetHashCode();
    if (StartTimestamp != 0UL) hash ^= StartTimestamp.GetHashCode();
    if (EndTimestamp != 0UL) hash ^= EndTimestamp.GetHashCode();
    if (DataSize != 0) hash ^= DataSize.GetHashCode();
    if (FlightNumber != 0) hash ^= FlightNumber.GetHashCode();
    if (SequenceInFlight != 0) hash ^= SequenceInFlight.GetHashCode();
    if (Md5Hash.Length != 0) hash ^= Md5Hash.GetHashCode();
    if (IsValid != false) hash ^= IsValid.GetHashCode();
    if (IsCurrent != false) hash ^= IsCurrent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (BlockAddress != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BlockAddress);
    }
    if (RecordType != global::RecordType.FdrData) {
      output.WriteRawTag(16);
      output.WriteEnum((int) RecordType);
    }
    if (StartTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(EndTimestamp);
    }
    if (DataSize != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(DataSize);
    }
    if (FlightNumber != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(FlightNumber);
    }
    if (SequenceInFlight != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(SequenceInFlight);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Md5Hash);
    }
    if (IsValid != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsValid);
    }
    if (IsCurrent != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsCurrent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (BlockAddress != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BlockAddress);
    }
    if (RecordType != global::RecordType.FdrData) {
      output.WriteRawTag(16);
      output.WriteEnum((int) RecordType);
    }
    if (StartTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(EndTimestamp);
    }
    if (DataSize != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(DataSize);
    }
    if (FlightNumber != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(FlightNumber);
    }
    if (SequenceInFlight != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(SequenceInFlight);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Md5Hash);
    }
    if (IsValid != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsValid);
    }
    if (IsCurrent != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsCurrent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (BlockAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockAddress);
    }
    if (RecordType != global::RecordType.FdrData) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordType);
    }
    if (StartTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTimestamp);
    }
    if (DataSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSize);
    }
    if (FlightNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FlightNumber);
    }
    if (SequenceInFlight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceInFlight);
    }
    if (Md5Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5Hash);
    }
    if (IsValid != false) {
      size += 1 + 1;
    }
    if (IsCurrent != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(NandBlock other) {
    if (other == null) {
      return;
    }
    if (other.BlockAddress != 0) {
      BlockAddress = other.BlockAddress;
    }
    if (other.RecordType != global::RecordType.FdrData) {
      RecordType = other.RecordType;
    }
    if (other.StartTimestamp != 0UL) {
      StartTimestamp = other.StartTimestamp;
    }
    if (other.EndTimestamp != 0UL) {
      EndTimestamp = other.EndTimestamp;
    }
    if (other.DataSize != 0) {
      DataSize = other.DataSize;
    }
    if (other.FlightNumber != 0) {
      FlightNumber = other.FlightNumber;
    }
    if (other.SequenceInFlight != 0) {
      SequenceInFlight = other.SequenceInFlight;
    }
    if (other.Md5Hash.Length != 0) {
      Md5Hash = other.Md5Hash;
    }
    if (other.IsValid != false) {
      IsValid = other.IsValid;
    }
    if (other.IsCurrent != false) {
      IsCurrent = other.IsCurrent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BlockAddress = input.ReadUInt32();
          break;
        }
        case 16: {
          RecordType = (global::RecordType) input.ReadEnum();
          break;
        }
        case 24: {
          StartTimestamp = input.ReadUInt64();
          break;
        }
        case 32: {
          EndTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          DataSize = input.ReadUInt32();
          break;
        }
        case 48: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 56: {
          SequenceInFlight = input.ReadUInt32();
          break;
        }
        case 66: {
          Md5Hash = input.ReadString();
          break;
        }
        case 72: {
          IsValid = input.ReadBool();
          break;
        }
        case 80: {
          IsCurrent = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          BlockAddress = input.ReadUInt32();
          break;
        }
        case 16: {
          RecordType = (global::RecordType) input.ReadEnum();
          break;
        }
        case 24: {
          StartTimestamp = input.ReadUInt64();
          break;
        }
        case 32: {
          EndTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          DataSize = input.ReadUInt32();
          break;
        }
        case 48: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 56: {
          SequenceInFlight = input.ReadUInt32();
          break;
        }
        case 66: {
          Md5Hash = input.ReadString();
          break;
        }
        case 72: {
          IsValid = input.ReadBool();
          break;
        }
        case 80: {
          IsCurrent = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Flight Session Summary
///&#x2F; @details Summary of a complete flight session stored in NAND
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class FlightRecord : pb::IMessage<FlightRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<FlightRecord> _parser = new pb::MessageParser<FlightRecord>(() => new FlightRecord());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<FlightRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FlightRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FlightRecord(FlightRecord other) : this() {
    flightNumber_ = other.flightNumber_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    durationMinutes_ = other.durationMinutes_;
    fdrBlockCount_ = other.fdrBlockCount_;
    cvrBlockCount_ = other.cvrBlockCount_;
    totalFdrSize_ = other.totalFdrSize_;
    totalCvrSize_ = other.totalCvrSize_;
    startBlockAddress_ = other.startBlockAddress_;
    endBlockAddress_ = other.endBlockAddress_;
    isComplete_ = other.isComplete_;
    blocks_ = other.blocks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public FlightRecord Clone() {
    return new FlightRecord(this);
  }

  /// <summary>Field number for the "flight_number" field.</summary>
  public const int FlightNumberFieldNumber = 1;
  private uint flightNumber_;
  /// <summary>
  /// Flight session number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FlightNumber {
    get { return flightNumber_; }
    set {
      flightNumber_ = value;
    }
  }

  /// <summary>Field number for the "start_time" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private ulong startTime_;
  /// <summary>
  /// Flight start time (Unix timestamp)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "end_time" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private ulong endTime_;
  /// <summary>
  /// Flight end time (Unix timestamp)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "duration_minutes" field.</summary>
  public const int DurationMinutesFieldNumber = 4;
  private uint durationMinutes_;
  /// <summary>
  /// Total flight duration in minutes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint DurationMinutes {
    get { return durationMinutes_; }
    set {
      durationMinutes_ = value;
    }
  }

  /// <summary>Field number for the "fdr_block_count" field.</summary>
  public const int FdrBlockCountFieldNumber = 5;
  private uint fdrBlockCount_;
  /// <summary>
  /// Number of FDR blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FdrBlockCount {
    get { return fdrBlockCount_; }
    set {
      fdrBlockCount_ = value;
    }
  }

  /// <summary>Field number for the "cvr_block_count" field.</summary>
  public const int CvrBlockCountFieldNumber = 6;
  private uint cvrBlockCount_;
  /// <summary>
  /// Number of CVR blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint CvrBlockCount {
    get { return cvrBlockCount_; }
    set {
      cvrBlockCount_ = value;
    }
  }

  /// <summary>Field number for the "total_fdr_size" field.</summary>
  public const int TotalFdrSizeFieldNumber = 7;
  private ulong totalFdrSize_;
  /// <summary>
  /// Total FDR data size
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalFdrSize {
    get { return totalFdrSize_; }
    set {
      totalFdrSize_ = value;
    }
  }

  /// <summary>Field number for the "total_cvr_size" field.</summary>
  public const int TotalCvrSizeFieldNumber = 8;
  private ulong totalCvrSize_;
  /// <summary>
  /// Total CVR data size
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalCvrSize {
    get { return totalCvrSize_; }
    set {
      totalCvrSize_ = value;
    }
  }

  /// <summary>Field number for the "start_block_address" field.</summary>
  public const int StartBlockAddressFieldNumber = 9;
  private uint startBlockAddress_;
  /// <summary>
  /// First block address in NAND
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint StartBlockAddress {
    get { return startBlockAddress_; }
    set {
      startBlockAddress_ = value;
    }
  }

  /// <summary>Field number for the "end_block_address" field.</summary>
  public const int EndBlockAddressFieldNumber = 10;
  private uint endBlockAddress_;
  /// <summary>
  /// Last block address in NAND
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EndBlockAddress {
    get { return endBlockAddress_; }
    set {
      endBlockAddress_ = value;
    }
  }

  /// <summary>Field number for the "is_complete" field.</summary>
  public const int IsCompleteFieldNumber = 11;
  private bool isComplete_;
  /// <summary>
  /// Flight record completed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsComplete {
    get { return isComplete_; }
    set {
      isComplete_ = value;
    }
  }

  /// <summary>Field number for the "blocks" field.</summary>
  public const int BlocksFieldNumber = 12;
  private static readonly pb::FieldCodec<global::NandBlock> _repeated_blocks_codec
      = pb::FieldCodec.ForMessage(98, global::NandBlock.Parser);
  private readonly pbc::RepeatedField<global::NandBlock> blocks_ = new pbc::RepeatedField<global::NandBlock>();
  /// <summary>
  /// All blocks for this flight
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::NandBlock> Blocks {
    get { return blocks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as FlightRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(FlightRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FlightNumber != other.FlightNumber) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    if (DurationMinutes != other.DurationMinutes) return false;
    if (FdrBlockCount != other.FdrBlockCount) return false;
    if (CvrBlockCount != other.CvrBlockCount) return false;
    if (TotalFdrSize != other.TotalFdrSize) return false;
    if (TotalCvrSize != other.TotalCvrSize) return false;
    if (StartBlockAddress != other.StartBlockAddress) return false;
    if (EndBlockAddress != other.EndBlockAddress) return false;
    if (IsComplete != other.IsComplete) return false;
    if(!blocks_.Equals(other.blocks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (FlightNumber != 0) hash ^= FlightNumber.GetHashCode();
    if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
    if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
    if (DurationMinutes != 0) hash ^= DurationMinutes.GetHashCode();
    if (FdrBlockCount != 0) hash ^= FdrBlockCount.GetHashCode();
    if (CvrBlockCount != 0) hash ^= CvrBlockCount.GetHashCode();
    if (TotalFdrSize != 0UL) hash ^= TotalFdrSize.GetHashCode();
    if (TotalCvrSize != 0UL) hash ^= TotalCvrSize.GetHashCode();
    if (StartBlockAddress != 0) hash ^= StartBlockAddress.GetHashCode();
    if (EndBlockAddress != 0) hash ^= EndBlockAddress.GetHashCode();
    if (IsComplete != false) hash ^= IsComplete.GetHashCode();
    hash ^= blocks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (FlightNumber != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FlightNumber);
    }
    if (StartTime != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(StartTime);
    }
    if (EndTime != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(EndTime);
    }
    if (DurationMinutes != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(DurationMinutes);
    }
    if (FdrBlockCount != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(FdrBlockCount);
    }
    if (CvrBlockCount != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(CvrBlockCount);
    }
    if (TotalFdrSize != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(TotalFdrSize);
    }
    if (TotalCvrSize != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(TotalCvrSize);
    }
    if (StartBlockAddress != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(StartBlockAddress);
    }
    if (EndBlockAddress != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(EndBlockAddress);
    }
    if (IsComplete != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsComplete);
    }
    blocks_.WriteTo(output, _repeated_blocks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (FlightNumber != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FlightNumber);
    }
    if (StartTime != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(StartTime);
    }
    if (EndTime != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(EndTime);
    }
    if (DurationMinutes != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(DurationMinutes);
    }
    if (FdrBlockCount != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(FdrBlockCount);
    }
    if (CvrBlockCount != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(CvrBlockCount);
    }
    if (TotalFdrSize != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(TotalFdrSize);
    }
    if (TotalCvrSize != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(TotalCvrSize);
    }
    if (StartBlockAddress != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(StartBlockAddress);
    }
    if (EndBlockAddress != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(EndBlockAddress);
    }
    if (IsComplete != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsComplete);
    }
    blocks_.WriteTo(ref output, _repeated_blocks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (FlightNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FlightNumber);
    }
    if (StartTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
    }
    if (EndTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
    }
    if (DurationMinutes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationMinutes);
    }
    if (FdrBlockCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FdrBlockCount);
    }
    if (CvrBlockCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CvrBlockCount);
    }
    if (TotalFdrSize != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalFdrSize);
    }
    if (TotalCvrSize != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalCvrSize);
    }
    if (StartBlockAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartBlockAddress);
    }
    if (EndBlockAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndBlockAddress);
    }
    if (IsComplete != false) {
      size += 1 + 1;
    }
    size += blocks_.CalculateSize(_repeated_blocks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(FlightRecord other) {
    if (other == null) {
      return;
    }
    if (other.FlightNumber != 0) {
      FlightNumber = other.FlightNumber;
    }
    if (other.StartTime != 0UL) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0UL) {
      EndTime = other.EndTime;
    }
    if (other.DurationMinutes != 0) {
      DurationMinutes = other.DurationMinutes;
    }
    if (other.FdrBlockCount != 0) {
      FdrBlockCount = other.FdrBlockCount;
    }
    if (other.CvrBlockCount != 0) {
      CvrBlockCount = other.CvrBlockCount;
    }
    if (other.TotalFdrSize != 0UL) {
      TotalFdrSize = other.TotalFdrSize;
    }
    if (other.TotalCvrSize != 0UL) {
      TotalCvrSize = other.TotalCvrSize;
    }
    if (other.StartBlockAddress != 0) {
      StartBlockAddress = other.StartBlockAddress;
    }
    if (other.EndBlockAddress != 0) {
      EndBlockAddress = other.EndBlockAddress;
    }
    if (other.IsComplete != false) {
      IsComplete = other.IsComplete;
    }
    blocks_.Add(other.blocks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 16: {
          StartTime = input.ReadUInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadUInt64();
          break;
        }
        case 32: {
          DurationMinutes = input.ReadUInt32();
          break;
        }
        case 40: {
          FdrBlockCount = input.ReadUInt32();
          break;
        }
        case 48: {
          CvrBlockCount = input.ReadUInt32();
          break;
        }
        case 56: {
          TotalFdrSize = input.ReadUInt64();
          break;
        }
        case 64: {
          TotalCvrSize = input.ReadUInt64();
          break;
        }
        case 72: {
          StartBlockAddress = input.ReadUInt32();
          break;
        }
        case 80: {
          EndBlockAddress = input.ReadUInt32();
          break;
        }
        case 88: {
          IsComplete = input.ReadBool();
          break;
        }
        case 98: {
          blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 16: {
          StartTime = input.ReadUInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadUInt64();
          break;
        }
        case 32: {
          DurationMinutes = input.ReadUInt32();
          break;
        }
        case 40: {
          FdrBlockCount = input.ReadUInt32();
          break;
        }
        case 48: {
          CvrBlockCount = input.ReadUInt32();
          break;
        }
        case 56: {
          TotalFdrSize = input.ReadUInt64();
          break;
        }
        case 64: {
          TotalCvrSize = input.ReadUInt64();
          break;
        }
        case 72: {
          StartBlockAddress = input.ReadUInt32();
          break;
        }
        case 80: {
          EndBlockAddress = input.ReadUInt32();
          break;
        }
        case 88: {
          IsComplete = input.ReadBool();
          break;
        }
        case 98: {
          blocks_.AddEntriesFrom(ref input, _repeated_blocks_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief NAND Memory Status
///&#x2F; @details Current status of NAND memory system
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class NandMemoryStatus : pb::IMessage<NandMemoryStatus>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<NandMemoryStatus> _parser = new pb::MessageParser<NandMemoryStatus>(() => new NandMemoryStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<NandMemoryStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandMemoryStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandMemoryStatus(NandMemoryStatus other) : this() {
    totalCapacity_ = other.totalCapacity_;
    usedCapacity_ = other.usedCapacity_;
    availableCapacity_ = other.availableCapacity_;
    totalBlocks_ = other.totalBlocks_;
    usedBlocks_ = other.usedBlocks_;
    badBlocks_ = other.badBlocks_;
    currentWriteAddress_ = other.currentWriteAddress_;
    wearLevelPercentage_ = other.wearLevelPercentage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public NandMemoryStatus Clone() {
    return new NandMemoryStatus(this);
  }

  /// <summary>Field number for the "total_capacity" field.</summary>
  public const int TotalCapacityFieldNumber = 1;
  private ulong totalCapacity_;
  /// <summary>
  /// Total NAND capacity in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalCapacity {
    get { return totalCapacity_; }
    set {
      totalCapacity_ = value;
    }
  }

  /// <summary>Field number for the "used_capacity" field.</summary>
  public const int UsedCapacityFieldNumber = 2;
  private ulong usedCapacity_;
  /// <summary>
  /// Used NAND capacity in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong UsedCapacity {
    get { return usedCapacity_; }
    set {
      usedCapacity_ = value;
    }
  }

  /// <summary>Field number for the "available_capacity" field.</summary>
  public const int AvailableCapacityFieldNumber = 3;
  private ulong availableCapacity_;
  /// <summary>
  /// Available NAND capacity in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong AvailableCapacity {
    get { return availableCapacity_; }
    set {
      availableCapacity_ = value;
    }
  }

  /// <summary>Field number for the "total_blocks" field.</summary>
  public const int TotalBlocksFieldNumber = 4;
  private uint totalBlocks_;
  /// <summary>
  /// Total number of blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalBlocks {
    get { return totalBlocks_; }
    set {
      totalBlocks_ = value;
    }
  }

  /// <summary>Field number for the "used_blocks" field.</summary>
  public const int UsedBlocksFieldNumber = 5;
  private uint usedBlocks_;
  /// <summary>
  /// Used number of blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint UsedBlocks {
    get { return usedBlocks_; }
    set {
      usedBlocks_ = value;
    }
  }

  /// <summary>Field number for the "bad_blocks" field.</summary>
  public const int BadBlocksFieldNumber = 6;
  private uint badBlocks_;
  /// <summary>
  /// Number of bad blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BadBlocks {
    get { return badBlocks_; }
    set {
      badBlocks_ = value;
    }
  }

  /// <summary>Field number for the "current_write_address" field.</summary>
  public const int CurrentWriteAddressFieldNumber = 7;
  private uint currentWriteAddress_;
  /// <summary>
  /// Current write position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint CurrentWriteAddress {
    get { return currentWriteAddress_; }
    set {
      currentWriteAddress_ = value;
    }
  }

  /// <summary>Field number for the "wear_level_percentage" field.</summary>
  public const int WearLevelPercentageFieldNumber = 8;
  private double wearLevelPercentage_;
  /// <summary>
  /// Wear leveling percentage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double WearLevelPercentage {
    get { return wearLevelPercentage_; }
    set {
      wearLevelPercentage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as NandMemoryStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(NandMemoryStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TotalCapacity != other.TotalCapacity) return false;
    if (UsedCapacity != other.UsedCapacity) return false;
    if (AvailableCapacity != other.AvailableCapacity) return false;
    if (TotalBlocks != other.TotalBlocks) return false;
    if (UsedBlocks != other.UsedBlocks) return false;
    if (BadBlocks != other.BadBlocks) return false;
    if (CurrentWriteAddress != other.CurrentWriteAddress) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WearLevelPercentage, other.WearLevelPercentage)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (TotalCapacity != 0UL) hash ^= TotalCapacity.GetHashCode();
    if (UsedCapacity != 0UL) hash ^= UsedCapacity.GetHashCode();
    if (AvailableCapacity != 0UL) hash ^= AvailableCapacity.GetHashCode();
    if (TotalBlocks != 0) hash ^= TotalBlocks.GetHashCode();
    if (UsedBlocks != 0) hash ^= UsedBlocks.GetHashCode();
    if (BadBlocks != 0) hash ^= BadBlocks.GetHashCode();
    if (CurrentWriteAddress != 0) hash ^= CurrentWriteAddress.GetHashCode();
    if (WearLevelPercentage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WearLevelPercentage);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TotalCapacity != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(TotalCapacity);
    }
    if (UsedCapacity != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(UsedCapacity);
    }
    if (AvailableCapacity != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(AvailableCapacity);
    }
    if (TotalBlocks != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalBlocks);
    }
    if (UsedBlocks != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(UsedBlocks);
    }
    if (BadBlocks != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(BadBlocks);
    }
    if (CurrentWriteAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(CurrentWriteAddress);
    }
    if (WearLevelPercentage != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(WearLevelPercentage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TotalCapacity != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(TotalCapacity);
    }
    if (UsedCapacity != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(UsedCapacity);
    }
    if (AvailableCapacity != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(AvailableCapacity);
    }
    if (TotalBlocks != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalBlocks);
    }
    if (UsedBlocks != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(UsedBlocks);
    }
    if (BadBlocks != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(BadBlocks);
    }
    if (CurrentWriteAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(CurrentWriteAddress);
    }
    if (WearLevelPercentage != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(WearLevelPercentage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (TotalCapacity != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalCapacity);
    }
    if (UsedCapacity != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UsedCapacity);
    }
    if (AvailableCapacity != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvailableCapacity);
    }
    if (TotalBlocks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBlocks);
    }
    if (UsedBlocks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedBlocks);
    }
    if (BadBlocks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BadBlocks);
    }
    if (CurrentWriteAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentWriteAddress);
    }
    if (WearLevelPercentage != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(NandMemoryStatus other) {
    if (other == null) {
      return;
    }
    if (other.TotalCapacity != 0UL) {
      TotalCapacity = other.TotalCapacity;
    }
    if (other.UsedCapacity != 0UL) {
      UsedCapacity = other.UsedCapacity;
    }
    if (other.AvailableCapacity != 0UL) {
      AvailableCapacity = other.AvailableCapacity;
    }
    if (other.TotalBlocks != 0) {
      TotalBlocks = other.TotalBlocks;
    }
    if (other.UsedBlocks != 0) {
      UsedBlocks = other.UsedBlocks;
    }
    if (other.BadBlocks != 0) {
      BadBlocks = other.BadBlocks;
    }
    if (other.CurrentWriteAddress != 0) {
      CurrentWriteAddress = other.CurrentWriteAddress;
    }
    if (other.WearLevelPercentage != 0D) {
      WearLevelPercentage = other.WearLevelPercentage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TotalCapacity = input.ReadUInt64();
          break;
        }
        case 16: {
          UsedCapacity = input.ReadUInt64();
          break;
        }
        case 24: {
          AvailableCapacity = input.ReadUInt64();
          break;
        }
        case 32: {
          TotalBlocks = input.ReadUInt32();
          break;
        }
        case 40: {
          UsedBlocks = input.ReadUInt32();
          break;
        }
        case 48: {
          BadBlocks = input.ReadUInt32();
          break;
        }
        case 56: {
          CurrentWriteAddress = input.ReadUInt32();
          break;
        }
        case 65: {
          WearLevelPercentage = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TotalCapacity = input.ReadUInt64();
          break;
        }
        case 16: {
          UsedCapacity = input.ReadUInt64();
          break;
        }
        case 24: {
          AvailableCapacity = input.ReadUInt64();
          break;
        }
        case 32: {
          TotalBlocks = input.ReadUInt32();
          break;
        }
        case 40: {
          UsedBlocks = input.ReadUInt32();
          break;
        }
        case 48: {
          BadBlocks = input.ReadUInt32();
          break;
        }
        case 56: {
          CurrentWriteAddress = input.ReadUInt32();
          break;
        }
        case 65: {
          WearLevelPercentage = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Record Information Response
///&#x2F; @details Complete record information from NAND memory
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class RecordInfoData : pb::IMessage<RecordInfoData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RecordInfoData> _parser = new pb::MessageParser<RecordInfoData>(() => new RecordInfoData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RecordInfoData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RecordInfoData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RecordInfoData(RecordInfoData other) : this() {
    flights_ = other.flights_.Clone();
    currentFlight_ = other.currentFlight_ != null ? other.currentFlight_.Clone() : null;
    memoryStatus_ = other.memoryStatus_ != null ? other.memoryStatus_.Clone() : null;
    totalFlights_ = other.totalFlights_;
    oldestFlightNumber_ = other.oldestFlightNumber_;
    newestFlightNumber_ = other.newestFlightNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RecordInfoData Clone() {
    return new RecordInfoData(this);
  }

  /// <summary>Field number for the "flights" field.</summary>
  public const int FlightsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FlightRecord> _repeated_flights_codec
      = pb::FieldCodec.ForMessage(10, global::FlightRecord.Parser);
  private readonly pbc::RepeatedField<global::FlightRecord> flights_ = new pbc::RepeatedField<global::FlightRecord>();
  /// <summary>
  /// All flight records
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::FlightRecord> Flights {
    get { return flights_; }
  }

  /// <summary>Field number for the "current_flight" field.</summary>
  public const int CurrentFlightFieldNumber = 2;
  private global::FlightRecord currentFlight_;
  /// <summary>
  /// Currently active flight (if any)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::FlightRecord CurrentFlight {
    get { return currentFlight_; }
    set {
      currentFlight_ = value;
    }
  }

  /// <summary>Field number for the "memory_status" field.</summary>
  public const int MemoryStatusFieldNumber = 3;
  private global::NandMemoryStatus memoryStatus_;
  /// <summary>
  /// NAND memory status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::NandMemoryStatus MemoryStatus {
    get { return memoryStatus_; }
    set {
      memoryStatus_ = value;
    }
  }

  /// <summary>Field number for the "total_flights" field.</summary>
  public const int TotalFlightsFieldNumber = 4;
  private uint totalFlights_;
  /// <summary>
  /// Total number of flights stored
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalFlights {
    get { return totalFlights_; }
    set {
      totalFlights_ = value;
    }
  }

  /// <summary>Field number for the "oldest_flight_number" field.</summary>
  public const int OldestFlightNumberFieldNumber = 5;
  private uint oldestFlightNumber_;
  /// <summary>
  /// Oldest available flight number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint OldestFlightNumber {
    get { return oldestFlightNumber_; }
    set {
      oldestFlightNumber_ = value;
    }
  }

  /// <summary>Field number for the "newest_flight_number" field.</summary>
  public const int NewestFlightNumberFieldNumber = 6;
  private uint newestFlightNumber_;
  /// <summary>
  /// Newest flight number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NewestFlightNumber {
    get { return newestFlightNumber_; }
    set {
      newestFlightNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RecordInfoData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RecordInfoData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!flights_.Equals(other.flights_)) return false;
    if (!object.Equals(CurrentFlight, other.CurrentFlight)) return false;
    if (!object.Equals(MemoryStatus, other.MemoryStatus)) return false;
    if (TotalFlights != other.TotalFlights) return false;
    if (OldestFlightNumber != other.OldestFlightNumber) return false;
    if (NewestFlightNumber != other.NewestFlightNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= flights_.GetHashCode();
    if (currentFlight_ != null) hash ^= CurrentFlight.GetHashCode();
    if (memoryStatus_ != null) hash ^= MemoryStatus.GetHashCode();
    if (TotalFlights != 0) hash ^= TotalFlights.GetHashCode();
    if (OldestFlightNumber != 0) hash ^= OldestFlightNumber.GetHashCode();
    if (NewestFlightNumber != 0) hash ^= NewestFlightNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    flights_.WriteTo(output, _repeated_flights_codec);
    if (currentFlight_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CurrentFlight);
    }
    if (memoryStatus_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MemoryStatus);
    }
    if (TotalFlights != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalFlights);
    }
    if (OldestFlightNumber != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(OldestFlightNumber);
    }
    if (NewestFlightNumber != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(NewestFlightNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    flights_.WriteTo(ref output, _repeated_flights_codec);
    if (currentFlight_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CurrentFlight);
    }
    if (memoryStatus_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MemoryStatus);
    }
    if (TotalFlights != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalFlights);
    }
    if (OldestFlightNumber != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(OldestFlightNumber);
    }
    if (NewestFlightNumber != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(NewestFlightNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += flights_.CalculateSize(_repeated_flights_codec);
    if (currentFlight_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentFlight);
    }
    if (memoryStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemoryStatus);
    }
    if (TotalFlights != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalFlights);
    }
    if (OldestFlightNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldestFlightNumber);
    }
    if (NewestFlightNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewestFlightNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RecordInfoData other) {
    if (other == null) {
      return;
    }
    flights_.Add(other.flights_);
    if (other.currentFlight_ != null) {
      if (currentFlight_ == null) {
        CurrentFlight = new global::FlightRecord();
      }
      CurrentFlight.MergeFrom(other.CurrentFlight);
    }
    if (other.memoryStatus_ != null) {
      if (memoryStatus_ == null) {
        MemoryStatus = new global::NandMemoryStatus();
      }
      MemoryStatus.MergeFrom(other.MemoryStatus);
    }
    if (other.TotalFlights != 0) {
      TotalFlights = other.TotalFlights;
    }
    if (other.OldestFlightNumber != 0) {
      OldestFlightNumber = other.OldestFlightNumber;
    }
    if (other.NewestFlightNumber != 0) {
      NewestFlightNumber = other.NewestFlightNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          flights_.AddEntriesFrom(input, _repeated_flights_codec);
          break;
        }
        case 18: {
          if (currentFlight_ == null) {
            CurrentFlight = new global::FlightRecord();
          }
          input.ReadMessage(CurrentFlight);
          break;
        }
        case 26: {
          if (memoryStatus_ == null) {
            MemoryStatus = new global::NandMemoryStatus();
          }
          input.ReadMessage(MemoryStatus);
          break;
        }
        case 32: {
          TotalFlights = input.ReadUInt32();
          break;
        }
        case 40: {
          OldestFlightNumber = input.ReadUInt32();
          break;
        }
        case 48: {
          NewestFlightNumber = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          flights_.AddEntriesFrom(ref input, _repeated_flights_codec);
          break;
        }
        case 18: {
          if (currentFlight_ == null) {
            CurrentFlight = new global::FlightRecord();
          }
          input.ReadMessage(CurrentFlight);
          break;
        }
        case 26: {
          if (memoryStatus_ == null) {
            MemoryStatus = new global::NandMemoryStatus();
          }
          input.ReadMessage(MemoryStatus);
          break;
        }
        case 32: {
          TotalFlights = input.ReadUInt32();
          break;
        }
        case 40: {
          OldestFlightNumber = input.ReadUInt32();
          break;
        }
        case 48: {
          NewestFlightNumber = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Download Record Request
///&#x2F; @details Request to download records from NAND memory with various selection options
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class DownloadRecord : pb::IMessage<DownloadRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DownloadRecord> _parser = new pb::MessageParser<DownloadRecord>(() => new DownloadRecord());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DownloadRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecord(DownloadRecord other) : this() {
    selectionType_ = other.selectionType_;
    flightNumber_ = other.flightNumber_;
    lastMinutes_ = other.lastMinutes_;
    startTimestamp_ = other.startTimestamp_;
    endTimestamp_ = other.endTimestamp_;
    startAddress_ = other.startAddress_;
    endAddress_ = other.endAddress_;
    recordTypeFilter_ = other.recordTypeFilter_;
    includeMetadata_ = other.includeMetadata_;
    verifyMd5_ = other.verifyMd5_;
    maxBlocks_ = other.maxBlocks_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecord Clone() {
    return new DownloadRecord(this);
  }

  /// <summary>Field number for the "selection_type" field.</summary>
  public const int SelectionTypeFieldNumber = 1;
  private global::DownloadSelectionType selectionType_ = global::DownloadSelectionType.ByFlightNumber;
  /// <summary>
  /// How to select data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::DownloadSelectionType SelectionType {
    get { return selectionType_; }
    set {
      selectionType_ = value;
    }
  }

  /// <summary>Field number for the "flight_number" field.</summary>
  public const int FlightNumberFieldNumber = 2;
  private uint flightNumber_;
  /// <summary>
  /// Selection parameters (use based on selection_type)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FlightNumber {
    get { return flightNumber_; }
    set {
      flightNumber_ = value;
    }
  }

  /// <summary>Field number for the "last_minutes" field.</summary>
  public const int LastMinutesFieldNumber = 3;
  private uint lastMinutes_;
  /// <summary>
  /// For BY_LAST_MINUTES (e.g., 15 for last 15 minutes)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LastMinutes {
    get { return lastMinutes_; }
    set {
      lastMinutes_ = value;
    }
  }

  /// <summary>Field number for the "start_timestamp" field.</summary>
  public const int StartTimestampFieldNumber = 4;
  private ulong startTimestamp_;
  /// <summary>
  /// For BY_TIME_RANGE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong StartTimestamp {
    get { return startTimestamp_; }
    set {
      startTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "end_timestamp" field.</summary>
  public const int EndTimestampFieldNumber = 5;
  private ulong endTimestamp_;
  /// <summary>
  /// For BY_TIME_RANGE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong EndTimestamp {
    get { return endTimestamp_; }
    set {
      endTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "start_address" field.</summary>
  public const int StartAddressFieldNumber = 6;
  private uint startAddress_;
  /// <summary>
  /// For BY_ADDRESS_RANGE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint StartAddress {
    get { return startAddress_; }
    set {
      startAddress_ = value;
    }
  }

  /// <summary>Field number for the "end_address" field.</summary>
  public const int EndAddressFieldNumber = 7;
  private uint endAddress_;
  /// <summary>
  /// For BY_ADDRESS_RANGE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EndAddress {
    get { return endAddress_; }
    set {
      endAddress_ = value;
    }
  }

  /// <summary>Field number for the "record_type_filter" field.</summary>
  public const int RecordTypeFilterFieldNumber = 8;
  private global::RecordType recordTypeFilter_ = global::RecordType.FdrData;
  /// <summary>
  /// Filter options
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordType RecordTypeFilter {
    get { return recordTypeFilter_; }
    set {
      recordTypeFilter_ = value;
    }
  }

  /// <summary>Field number for the "include_metadata" field.</summary>
  public const int IncludeMetadataFieldNumber = 9;
  private bool includeMetadata_;
  /// <summary>
  /// Include block metadata
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IncludeMetadata {
    get { return includeMetadata_; }
    set {
      includeMetadata_ = value;
    }
  }

  /// <summary>Field number for the "verify_md5" field.</summary>
  public const int VerifyMd5FieldNumber = 10;
  private bool verifyMd5_;
  /// <summary>
  /// Verify MD5 during extraction
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool VerifyMd5 {
    get { return verifyMd5_; }
    set {
      verifyMd5_ = value;
    }
  }

  /// <summary>Field number for the "max_blocks" field.</summary>
  public const int MaxBlocksFieldNumber = 11;
  private uint maxBlocks_;
  /// <summary>
  /// Maximum number of blocks to return
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxBlocks {
    get { return maxBlocks_; }
    set {
      maxBlocks_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DownloadRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DownloadRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SelectionType != other.SelectionType) return false;
    if (FlightNumber != other.FlightNumber) return false;
    if (LastMinutes != other.LastMinutes) return false;
    if (StartTimestamp != other.StartTimestamp) return false;
    if (EndTimestamp != other.EndTimestamp) return false;
    if (StartAddress != other.StartAddress) return false;
    if (EndAddress != other.EndAddress) return false;
    if (RecordTypeFilter != other.RecordTypeFilter) return false;
    if (IncludeMetadata != other.IncludeMetadata) return false;
    if (VerifyMd5 != other.VerifyMd5) return false;
    if (MaxBlocks != other.MaxBlocks) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (SelectionType != global::DownloadSelectionType.ByFlightNumber) hash ^= SelectionType.GetHashCode();
    if (FlightNumber != 0) hash ^= FlightNumber.GetHashCode();
    if (LastMinutes != 0) hash ^= LastMinutes.GetHashCode();
    if (StartTimestamp != 0UL) hash ^= StartTimestamp.GetHashCode();
    if (EndTimestamp != 0UL) hash ^= EndTimestamp.GetHashCode();
    if (StartAddress != 0) hash ^= StartAddress.GetHashCode();
    if (EndAddress != 0) hash ^= EndAddress.GetHashCode();
    if (RecordTypeFilter != global::RecordType.FdrData) hash ^= RecordTypeFilter.GetHashCode();
    if (IncludeMetadata != false) hash ^= IncludeMetadata.GetHashCode();
    if (VerifyMd5 != false) hash ^= VerifyMd5.GetHashCode();
    if (MaxBlocks != 0) hash ^= MaxBlocks.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (SelectionType != global::DownloadSelectionType.ByFlightNumber) {
      output.WriteRawTag(8);
      output.WriteEnum((int) SelectionType);
    }
    if (FlightNumber != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FlightNumber);
    }
    if (LastMinutes != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LastMinutes);
    }
    if (StartTimestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(EndTimestamp);
    }
    if (StartAddress != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(StartAddress);
    }
    if (EndAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(EndAddress);
    }
    if (RecordTypeFilter != global::RecordType.FdrData) {
      output.WriteRawTag(64);
      output.WriteEnum((int) RecordTypeFilter);
    }
    if (IncludeMetadata != false) {
      output.WriteRawTag(72);
      output.WriteBool(IncludeMetadata);
    }
    if (VerifyMd5 != false) {
      output.WriteRawTag(80);
      output.WriteBool(VerifyMd5);
    }
    if (MaxBlocks != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(MaxBlocks);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (SelectionType != global::DownloadSelectionType.ByFlightNumber) {
      output.WriteRawTag(8);
      output.WriteEnum((int) SelectionType);
    }
    if (FlightNumber != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FlightNumber);
    }
    if (LastMinutes != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LastMinutes);
    }
    if (StartTimestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(EndTimestamp);
    }
    if (StartAddress != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(StartAddress);
    }
    if (EndAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(EndAddress);
    }
    if (RecordTypeFilter != global::RecordType.FdrData) {
      output.WriteRawTag(64);
      output.WriteEnum((int) RecordTypeFilter);
    }
    if (IncludeMetadata != false) {
      output.WriteRawTag(72);
      output.WriteBool(IncludeMetadata);
    }
    if (VerifyMd5 != false) {
      output.WriteRawTag(80);
      output.WriteBool(VerifyMd5);
    }
    if (MaxBlocks != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(MaxBlocks);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (SelectionType != global::DownloadSelectionType.ByFlightNumber) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelectionType);
    }
    if (FlightNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FlightNumber);
    }
    if (LastMinutes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastMinutes);
    }
    if (StartTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTimestamp);
    }
    if (EndTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTimestamp);
    }
    if (StartAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAddress);
    }
    if (EndAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndAddress);
    }
    if (RecordTypeFilter != global::RecordType.FdrData) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordTypeFilter);
    }
    if (IncludeMetadata != false) {
      size += 1 + 1;
    }
    if (VerifyMd5 != false) {
      size += 1 + 1;
    }
    if (MaxBlocks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBlocks);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DownloadRecord other) {
    if (other == null) {
      return;
    }
    if (other.SelectionType != global::DownloadSelectionType.ByFlightNumber) {
      SelectionType = other.SelectionType;
    }
    if (other.FlightNumber != 0) {
      FlightNumber = other.FlightNumber;
    }
    if (other.LastMinutes != 0) {
      LastMinutes = other.LastMinutes;
    }
    if (other.StartTimestamp != 0UL) {
      StartTimestamp = other.StartTimestamp;
    }
    if (other.EndTimestamp != 0UL) {
      EndTimestamp = other.EndTimestamp;
    }
    if (other.StartAddress != 0) {
      StartAddress = other.StartAddress;
    }
    if (other.EndAddress != 0) {
      EndAddress = other.EndAddress;
    }
    if (other.RecordTypeFilter != global::RecordType.FdrData) {
      RecordTypeFilter = other.RecordTypeFilter;
    }
    if (other.IncludeMetadata != false) {
      IncludeMetadata = other.IncludeMetadata;
    }
    if (other.VerifyMd5 != false) {
      VerifyMd5 = other.VerifyMd5;
    }
    if (other.MaxBlocks != 0) {
      MaxBlocks = other.MaxBlocks;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SelectionType = (global::DownloadSelectionType) input.ReadEnum();
          break;
        }
        case 16: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 24: {
          LastMinutes = input.ReadUInt32();
          break;
        }
        case 32: {
          StartTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          EndTimestamp = input.ReadUInt64();
          break;
        }
        case 48: {
          StartAddress = input.ReadUInt32();
          break;
        }
        case 56: {
          EndAddress = input.ReadUInt32();
          break;
        }
        case 64: {
          RecordTypeFilter = (global::RecordType) input.ReadEnum();
          break;
        }
        case 72: {
          IncludeMetadata = input.ReadBool();
          break;
        }
        case 80: {
          VerifyMd5 = input.ReadBool();
          break;
        }
        case 88: {
          MaxBlocks = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SelectionType = (global::DownloadSelectionType) input.ReadEnum();
          break;
        }
        case 16: {
          FlightNumber = input.ReadUInt32();
          break;
        }
        case 24: {
          LastMinutes = input.ReadUInt32();
          break;
        }
        case 32: {
          StartTimestamp = input.ReadUInt64();
          break;
        }
        case 40: {
          EndTimestamp = input.ReadUInt64();
          break;
        }
        case 48: {
          StartAddress = input.ReadUInt32();
          break;
        }
        case 56: {
          EndAddress = input.ReadUInt32();
          break;
        }
        case 64: {
          RecordTypeFilter = (global::RecordType) input.ReadEnum();
          break;
        }
        case 72: {
          IncludeMetadata = input.ReadBool();
          break;
        }
        case 80: {
          VerifyMd5 = input.ReadBool();
          break;
        }
        case 88: {
          MaxBlocks = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Download Record Response
///&#x2F; @details Response containing NAND memory data
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class DownloadRecordData : pb::IMessage<DownloadRecordData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DownloadRecordData> _parser = new pb::MessageParser<DownloadRecordData>(() => new DownloadRecordData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DownloadRecordData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecordData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecordData(DownloadRecordData other) : this() {
    selectedBlocks_ = other.selectedBlocks_.Clone();
    totalBlocks_ = other.totalBlocks_;
    totalDataSize_ = other.totalDataSize_;
    archivePath_ = other.archivePath_;
    archiveMd5_ = other.archiveMd5_;
    extractionTimeMs_ = other.extractionTimeMs_;
    estimatedTransferTimeSec_ = other.estimatedTransferTimeSec_;
    hasIntegrityErrors_ = other.hasIntegrityErrors_;
    corruptedBlocks_ = other.corruptedBlocks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DownloadRecordData Clone() {
    return new DownloadRecordData(this);
  }

  /// <summary>Field number for the "selected_blocks" field.</summary>
  public const int SelectedBlocksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NandBlock> _repeated_selectedBlocks_codec
      = pb::FieldCodec.ForMessage(10, global::NandBlock.Parser);
  private readonly pbc::RepeatedField<global::NandBlock> selectedBlocks_ = new pbc::RepeatedField<global::NandBlock>();
  /// <summary>
  /// Selected blocks from NAND
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::NandBlock> SelectedBlocks {
    get { return selectedBlocks_; }
  }

  /// <summary>Field number for the "total_blocks" field.</summary>
  public const int TotalBlocksFieldNumber = 2;
  private uint totalBlocks_;
  /// <summary>
  /// Total number of blocks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalBlocks {
    get { return totalBlocks_; }
    set {
      totalBlocks_ = value;
    }
  }

  /// <summary>Field number for the "total_data_size" field.</summary>
  public const int TotalDataSizeFieldNumber = 3;
  private ulong totalDataSize_;
  /// <summary>
  /// Total size of all data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalDataSize {
    get { return totalDataSize_; }
    set {
      totalDataSize_ = value;
    }
  }

  /// <summary>Field number for the "archive_path" field.</summary>
  public const int ArchivePathFieldNumber = 4;
  private string archivePath_ = "";
  /// <summary>
  /// Path to generated archive file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ArchivePath {
    get { return archivePath_; }
    set {
      archivePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "archive_md5" field.</summary>
  public const int ArchiveMd5FieldNumber = 5;
  private string archiveMd5_ = "";
  /// <summary>
  /// MD5 of the archive
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ArchiveMd5 {
    get { return archiveMd5_; }
    set {
      archiveMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "extraction_time_ms" field.</summary>
  public const int ExtractionTimeMsFieldNumber = 6;
  private uint extractionTimeMs_;
  /// <summary>
  /// Time taken to extract from NAND
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ExtractionTimeMs {
    get { return extractionTimeMs_; }
    set {
      extractionTimeMs_ = value;
    }
  }

  /// <summary>Field number for the "estimated_transfer_time_sec" field.</summary>
  public const int EstimatedTransferTimeSecFieldNumber = 7;
  private uint estimatedTransferTimeSec_;
  /// <summary>
  /// Estimated transfer time
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EstimatedTransferTimeSec {
    get { return estimatedTransferTimeSec_; }
    set {
      estimatedTransferTimeSec_ = value;
    }
  }

  /// <summary>Field number for the "has_integrity_errors" field.</summary>
  public const int HasIntegrityErrorsFieldNumber = 8;
  private bool hasIntegrityErrors_;
  /// <summary>
  /// Any blocks failed MD5 verification
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntegrityErrors {
    get { return hasIntegrityErrors_; }
    set {
      hasIntegrityErrors_ = value;
    }
  }

  /// <summary>Field number for the "corrupted_blocks" field.</summary>
  public const int CorruptedBlocksFieldNumber = 9;
  private static readonly pb::FieldCodec<uint> _repeated_corruptedBlocks_codec
      = pb::FieldCodec.ForUInt32(74);
  private readonly pbc::RepeatedField<uint> corruptedBlocks_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Addresses of corrupted blocks (if any)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> CorruptedBlocks {
    get { return corruptedBlocks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DownloadRecordData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DownloadRecordData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!selectedBlocks_.Equals(other.selectedBlocks_)) return false;
    if (TotalBlocks != other.TotalBlocks) return false;
    if (TotalDataSize != other.TotalDataSize) return false;
    if (ArchivePath != other.ArchivePath) return false;
    if (ArchiveMd5 != other.ArchiveMd5) return false;
    if (ExtractionTimeMs != other.ExtractionTimeMs) return false;
    if (EstimatedTransferTimeSec != other.EstimatedTransferTimeSec) return false;
    if (HasIntegrityErrors != other.HasIntegrityErrors) return false;
    if(!corruptedBlocks_.Equals(other.corruptedBlocks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= selectedBlocks_.GetHashCode();
    if (TotalBlocks != 0) hash ^= TotalBlocks.GetHashCode();
    if (TotalDataSize != 0UL) hash ^= TotalDataSize.GetHashCode();
    if (ArchivePath.Length != 0) hash ^= ArchivePath.GetHashCode();
    if (ArchiveMd5.Length != 0) hash ^= ArchiveMd5.GetHashCode();
    if (ExtractionTimeMs != 0) hash ^= ExtractionTimeMs.GetHashCode();
    if (EstimatedTransferTimeSec != 0) hash ^= EstimatedTransferTimeSec.GetHashCode();
    if (HasIntegrityErrors != false) hash ^= HasIntegrityErrors.GetHashCode();
    hash ^= corruptedBlocks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    selectedBlocks_.WriteTo(output, _repeated_selectedBlocks_codec);
    if (TotalBlocks != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TotalBlocks);
    }
    if (TotalDataSize != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(TotalDataSize);
    }
    if (ArchivePath.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ArchivePath);
    }
    if (ArchiveMd5.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ArchiveMd5);
    }
    if (ExtractionTimeMs != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ExtractionTimeMs);
    }
    if (EstimatedTransferTimeSec != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(EstimatedTransferTimeSec);
    }
    if (HasIntegrityErrors != false) {
      output.WriteRawTag(64);
      output.WriteBool(HasIntegrityErrors);
    }
    corruptedBlocks_.WriteTo(output, _repeated_corruptedBlocks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    selectedBlocks_.WriteTo(ref output, _repeated_selectedBlocks_codec);
    if (TotalBlocks != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TotalBlocks);
    }
    if (TotalDataSize != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(TotalDataSize);
    }
    if (ArchivePath.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ArchivePath);
    }
    if (ArchiveMd5.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ArchiveMd5);
    }
    if (ExtractionTimeMs != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ExtractionTimeMs);
    }
    if (EstimatedTransferTimeSec != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(EstimatedTransferTimeSec);
    }
    if (HasIntegrityErrors != false) {
      output.WriteRawTag(64);
      output.WriteBool(HasIntegrityErrors);
    }
    corruptedBlocks_.WriteTo(ref output, _repeated_corruptedBlocks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += selectedBlocks_.CalculateSize(_repeated_selectedBlocks_codec);
    if (TotalBlocks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBlocks);
    }
    if (TotalDataSize != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDataSize);
    }
    if (ArchivePath.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchivePath);
    }
    if (ArchiveMd5.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchiveMd5);
    }
    if (ExtractionTimeMs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtractionTimeMs);
    }
    if (EstimatedTransferTimeSec != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EstimatedTransferTimeSec);
    }
    if (HasIntegrityErrors != false) {
      size += 1 + 1;
    }
    size += corruptedBlocks_.CalculateSize(_repeated_corruptedBlocks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DownloadRecordData other) {
    if (other == null) {
      return;
    }
    selectedBlocks_.Add(other.selectedBlocks_);
    if (other.TotalBlocks != 0) {
      TotalBlocks = other.TotalBlocks;
    }
    if (other.TotalDataSize != 0UL) {
      TotalDataSize = other.TotalDataSize;
    }
    if (other.ArchivePath.Length != 0) {
      ArchivePath = other.ArchivePath;
    }
    if (other.ArchiveMd5.Length != 0) {
      ArchiveMd5 = other.ArchiveMd5;
    }
    if (other.ExtractionTimeMs != 0) {
      ExtractionTimeMs = other.ExtractionTimeMs;
    }
    if (other.EstimatedTransferTimeSec != 0) {
      EstimatedTransferTimeSec = other.EstimatedTransferTimeSec;
    }
    if (other.HasIntegrityErrors != false) {
      HasIntegrityErrors = other.HasIntegrityErrors;
    }
    corruptedBlocks_.Add(other.corruptedBlocks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          selectedBlocks_.AddEntriesFrom(input, _repeated_selectedBlocks_codec);
          break;
        }
        case 16: {
          TotalBlocks = input.ReadUInt32();
          break;
        }
        case 24: {
          TotalDataSize = input.ReadUInt64();
          break;
        }
        case 34: {
          ArchivePath = input.ReadString();
          break;
        }
        case 42: {
          ArchiveMd5 = input.ReadString();
          break;
        }
        case 48: {
          ExtractionTimeMs = input.ReadUInt32();
          break;
        }
        case 56: {
          EstimatedTransferTimeSec = input.ReadUInt32();
          break;
        }
        case 64: {
          HasIntegrityErrors = input.ReadBool();
          break;
        }
        case 74:
        case 72: {
          corruptedBlocks_.AddEntriesFrom(input, _repeated_corruptedBlocks_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          selectedBlocks_.AddEntriesFrom(ref input, _repeated_selectedBlocks_codec);
          break;
        }
        case 16: {
          TotalBlocks = input.ReadUInt32();
          break;
        }
        case 24: {
          TotalDataSize = input.ReadUInt64();
          break;
        }
        case 34: {
          ArchivePath = input.ReadString();
          break;
        }
        case 42: {
          ArchiveMd5 = input.ReadString();
          break;
        }
        case 48: {
          ExtractionTimeMs = input.ReadUInt32();
          break;
        }
        case 56: {
          EstimatedTransferTimeSec = input.ReadUInt32();
          break;
        }
        case 64: {
          HasIntegrityErrors = input.ReadBool();
          break;
        }
        case 74:
        case 72: {
          corruptedBlocks_.AddEntriesFrom(ref input, _repeated_corruptedBlocks_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Configuration Upload Request
///&#x2F; @details Request to upload JSON configuration to the device
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class UploadConfig : pb::IMessage<UploadConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UploadConfig> _parser = new pb::MessageParser<UploadConfig>(() => new UploadConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<UploadConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfig(UploadConfig other) : this() {
    jsonContent_ = other.jsonContent_;
    filename_ = other.filename_;
    md5Hash_ = other.md5Hash_;
    isChunked_ = other.isChunked_;
    sessionId_ = other.sessionId_;
    chunkIndex_ = other.chunkIndex_;
    totalChunks_ = other.totalChunks_;
    chunkData_ = other.chunkData_;
    chunkSize_ = other.chunkSize_;
    chunkMd5_ = other.chunkMd5_;
    totalFileSize_ = other.totalFileSize_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfig Clone() {
    return new UploadConfig(this);
  }

  /// <summary>Field number for the "json_content" field.</summary>
  public const int JsonContentFieldNumber = 1;
  private string jsonContent_ = "";
  /// <summary>
  /// JSON configuration content (for small files &lt; 1MB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string JsonContent {
    get { return jsonContent_; }
    set {
      jsonContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "filename" field.</summary>
  public const int FilenameFieldNumber = 2;
  private string filename_ = "";
  /// <summary>
  /// Original filename
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Filename {
    get { return filename_; }
    set {
      filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "md5_hash" field.</summary>
  public const int Md5HashFieldNumber = 3;
  private string md5Hash_ = "";
  /// <summary>
  /// MD5 hash of the JSON content
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Md5Hash {
    get { return md5Hash_; }
    set {
      md5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_chunked" field.</summary>
  public const int IsChunkedFieldNumber = 4;
  private bool isChunked_;
  /// <summary>
  /// Chunked upload support for large files
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsChunked {
    get { return isChunked_; }
    set {
      isChunked_ = value;
    }
  }

  /// <summary>Field number for the "session_id" field.</summary>
  public const int SessionIdFieldNumber = 5;
  private string sessionId_ = "";
  /// <summary>
  /// Unique session ID for chunked uploads
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunk_index" field.</summary>
  public const int ChunkIndexFieldNumber = 6;
  private uint chunkIndex_;
  /// <summary>
  /// Current chunk number (0-based)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkIndex {
    get { return chunkIndex_; }
    set {
      chunkIndex_ = value;
    }
  }

  /// <summary>Field number for the "total_chunks" field.</summary>
  public const int TotalChunksFieldNumber = 7;
  private uint totalChunks_;
  /// <summary>
  /// Total number of chunks in this upload
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalChunks {
    get { return totalChunks_; }
    set {
      totalChunks_ = value;
    }
  }

  /// <summary>Field number for the "chunk_data" field.</summary>
  public const int ChunkDataFieldNumber = 8;
  private pb::ByteString chunkData_ = pb::ByteString.Empty;
  /// <summary>
  /// Raw chunk data (for large files)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString ChunkData {
    get { return chunkData_; }
    set {
      chunkData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunk_size" field.</summary>
  public const int ChunkSizeFieldNumber = 9;
  private uint chunkSize_;
  /// <summary>
  /// Size of this chunk in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkSize {
    get { return chunkSize_; }
    set {
      chunkSize_ = value;
    }
  }

  /// <summary>Field number for the "chunk_md5" field.</summary>
  public const int ChunkMd5FieldNumber = 10;
  private string chunkMd5_ = "";
  /// <summary>
  /// MD5 hash of this specific chunk
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ChunkMd5 {
    get { return chunkMd5_; }
    set {
      chunkMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "total_file_size" field.</summary>
  public const int TotalFileSizeFieldNumber = 11;
  private ulong totalFileSize_;
  /// <summary>
  /// Total size of the complete file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalFileSize {
    get { return totalFileSize_; }
    set {
      totalFileSize_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as UploadConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(UploadConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (JsonContent != other.JsonContent) return false;
    if (Filename != other.Filename) return false;
    if (Md5Hash != other.Md5Hash) return false;
    if (IsChunked != other.IsChunked) return false;
    if (SessionId != other.SessionId) return false;
    if (ChunkIndex != other.ChunkIndex) return false;
    if (TotalChunks != other.TotalChunks) return false;
    if (ChunkData != other.ChunkData) return false;
    if (ChunkSize != other.ChunkSize) return false;
    if (ChunkMd5 != other.ChunkMd5) return false;
    if (TotalFileSize != other.TotalFileSize) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (JsonContent.Length != 0) hash ^= JsonContent.GetHashCode();
    if (Filename.Length != 0) hash ^= Filename.GetHashCode();
    if (Md5Hash.Length != 0) hash ^= Md5Hash.GetHashCode();
    if (IsChunked != false) hash ^= IsChunked.GetHashCode();
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
    if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
    if (ChunkData.Length != 0) hash ^= ChunkData.GetHashCode();
    if (ChunkSize != 0) hash ^= ChunkSize.GetHashCode();
    if (ChunkMd5.Length != 0) hash ^= ChunkMd5.GetHashCode();
    if (TotalFileSize != 0UL) hash ^= TotalFileSize.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (JsonContent.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonContent);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Filename);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Md5Hash);
    }
    if (IsChunked != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsChunked);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(SessionId);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ChunkIndex);
    }
    if (TotalChunks != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(ChunkData);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      output.WriteRawTag(88);
      output.WriteUInt64(TotalFileSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (JsonContent.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonContent);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Filename);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Md5Hash);
    }
    if (IsChunked != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsChunked);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(SessionId);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ChunkIndex);
    }
    if (TotalChunks != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(ChunkData);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      output.WriteRawTag(88);
      output.WriteUInt64(TotalFileSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (JsonContent.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonContent);
    }
    if (Filename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
    }
    if (Md5Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5Hash);
    }
    if (IsChunked != false) {
      size += 1 + 1;
    }
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (ChunkIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
    }
    if (TotalChunks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChunkData);
    }
    if (ChunkSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalFileSize);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(UploadConfig other) {
    if (other == null) {
      return;
    }
    if (other.JsonContent.Length != 0) {
      JsonContent = other.JsonContent;
    }
    if (other.Filename.Length != 0) {
      Filename = other.Filename;
    }
    if (other.Md5Hash.Length != 0) {
      Md5Hash = other.Md5Hash;
    }
    if (other.IsChunked != false) {
      IsChunked = other.IsChunked;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.ChunkIndex != 0) {
      ChunkIndex = other.ChunkIndex;
    }
    if (other.TotalChunks != 0) {
      TotalChunks = other.TotalChunks;
    }
    if (other.ChunkData.Length != 0) {
      ChunkData = other.ChunkData;
    }
    if (other.ChunkSize != 0) {
      ChunkSize = other.ChunkSize;
    }
    if (other.ChunkMd5.Length != 0) {
      ChunkMd5 = other.ChunkMd5;
    }
    if (other.TotalFileSize != 0UL) {
      TotalFileSize = other.TotalFileSize;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonContent = input.ReadString();
          break;
        }
        case 18: {
          Filename = input.ReadString();
          break;
        }
        case 26: {
          Md5Hash = input.ReadString();
          break;
        }
        case 32: {
          IsChunked = input.ReadBool();
          break;
        }
        case 42: {
          SessionId = input.ReadString();
          break;
        }
        case 48: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 56: {
          TotalChunks = input.ReadUInt32();
          break;
        }
        case 66: {
          ChunkData = input.ReadBytes();
          break;
        }
        case 72: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 82: {
          ChunkMd5 = input.ReadString();
          break;
        }
        case 88: {
          TotalFileSize = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          JsonContent = input.ReadString();
          break;
        }
        case 18: {
          Filename = input.ReadString();
          break;
        }
        case 26: {
          Md5Hash = input.ReadString();
          break;
        }
        case 32: {
          IsChunked = input.ReadBool();
          break;
        }
        case 42: {
          SessionId = input.ReadString();
          break;
        }
        case 48: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 56: {
          TotalChunks = input.ReadUInt32();
          break;
        }
        case 66: {
          ChunkData = input.ReadBytes();
          break;
        }
        case 72: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 82: {
          ChunkMd5 = input.ReadString();
          break;
        }
        case 88: {
          TotalFileSize = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Configuration Upload Response
///&#x2F; @details Response to configuration upload request
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class UploadConfigData : pb::IMessage<UploadConfigData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UploadConfigData> _parser = new pb::MessageParser<UploadConfigData>(() => new UploadConfigData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<UploadConfigData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfigData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfigData(UploadConfigData other) : this() {
    isChunkedResponse_ = other.isChunkedResponse_;
    sessionId_ = other.sessionId_;
    chunksReceived_ = other.chunksReceived_;
    chunksExpected_ = other.chunksExpected_;
    uploadComplete_ = other.uploadComplete_;
    missingChunks_ = other.missingChunks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UploadConfigData Clone() {
    return new UploadConfigData(this);
  }

  /// <summary>Field number for the "is_chunked_response" field.</summary>
  public const int IsChunkedResponseFieldNumber = 1;
  private bool isChunkedResponse_;
  /// <summary>
  /// Chunked upload support
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsChunkedResponse {
    get { return isChunkedResponse_; }
    set {
      isChunkedResponse_ = value;
    }
  }

  /// <summary>Field number for the "session_id" field.</summary>
  public const int SessionIdFieldNumber = 2;
  private string sessionId_ = "";
  /// <summary>
  /// Session ID for chunked uploads
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunks_received" field.</summary>
  public const int ChunksReceivedFieldNumber = 3;
  private uint chunksReceived_;
  /// <summary>
  /// Number of chunks received so far
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunksReceived {
    get { return chunksReceived_; }
    set {
      chunksReceived_ = value;
    }
  }

  /// <summary>Field number for the "chunks_expected" field.</summary>
  public const int ChunksExpectedFieldNumber = 4;
  private uint chunksExpected_;
  /// <summary>
  /// Total chunks expected
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunksExpected {
    get { return chunksExpected_; }
    set {
      chunksExpected_ = value;
    }
  }

  /// <summary>Field number for the "upload_complete" field.</summary>
  public const int UploadCompleteFieldNumber = 5;
  private bool uploadComplete_;
  /// <summary>
  /// True when all chunks received
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool UploadComplete {
    get { return uploadComplete_; }
    set {
      uploadComplete_ = value;
    }
  }

  /// <summary>Field number for the "missing_chunks" field.</summary>
  public const int MissingChunksFieldNumber = 6;
  private static readonly pb::FieldCodec<uint> _repeated_missingChunks_codec
      = pb::FieldCodec.ForUInt32(50);
  private readonly pbc::RepeatedField<uint> missingChunks_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// List of missing chunk indices (if any)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> MissingChunks {
    get { return missingChunks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as UploadConfigData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(UploadConfigData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsChunkedResponse != other.IsChunkedResponse) return false;
    if (SessionId != other.SessionId) return false;
    if (ChunksReceived != other.ChunksReceived) return false;
    if (ChunksExpected != other.ChunksExpected) return false;
    if (UploadComplete != other.UploadComplete) return false;
    if(!missingChunks_.Equals(other.missingChunks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (IsChunkedResponse != false) hash ^= IsChunkedResponse.GetHashCode();
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (ChunksReceived != 0) hash ^= ChunksReceived.GetHashCode();
    if (ChunksExpected != 0) hash ^= ChunksExpected.GetHashCode();
    if (UploadComplete != false) hash ^= UploadComplete.GetHashCode();
    hash ^= missingChunks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (IsChunkedResponse != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsChunkedResponse);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SessionId);
    }
    if (ChunksReceived != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ChunksReceived);
    }
    if (ChunksExpected != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ChunksExpected);
    }
    if (UploadComplete != false) {
      output.WriteRawTag(40);
      output.WriteBool(UploadComplete);
    }
    missingChunks_.WriteTo(output, _repeated_missingChunks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (IsChunkedResponse != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsChunkedResponse);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SessionId);
    }
    if (ChunksReceived != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ChunksReceived);
    }
    if (ChunksExpected != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ChunksExpected);
    }
    if (UploadComplete != false) {
      output.WriteRawTag(40);
      output.WriteBool(UploadComplete);
    }
    missingChunks_.WriteTo(ref output, _repeated_missingChunks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (IsChunkedResponse != false) {
      size += 1 + 1;
    }
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (ChunksReceived != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunksReceived);
    }
    if (ChunksExpected != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunksExpected);
    }
    if (UploadComplete != false) {
      size += 1 + 1;
    }
    size += missingChunks_.CalculateSize(_repeated_missingChunks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(UploadConfigData other) {
    if (other == null) {
      return;
    }
    if (other.IsChunkedResponse != false) {
      IsChunkedResponse = other.IsChunkedResponse;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.ChunksReceived != 0) {
      ChunksReceived = other.ChunksReceived;
    }
    if (other.ChunksExpected != 0) {
      ChunksExpected = other.ChunksExpected;
    }
    if (other.UploadComplete != false) {
      UploadComplete = other.UploadComplete;
    }
    missingChunks_.Add(other.missingChunks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsChunkedResponse = input.ReadBool();
          break;
        }
        case 18: {
          SessionId = input.ReadString();
          break;
        }
        case 24: {
          ChunksReceived = input.ReadUInt32();
          break;
        }
        case 32: {
          ChunksExpected = input.ReadUInt32();
          break;
        }
        case 40: {
          UploadComplete = input.ReadBool();
          break;
        }
        case 50:
        case 48: {
          missingChunks_.AddEntriesFrom(input, _repeated_missingChunks_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          IsChunkedResponse = input.ReadBool();
          break;
        }
        case 18: {
          SessionId = input.ReadString();
          break;
        }
        case 24: {
          ChunksReceived = input.ReadUInt32();
          break;
        }
        case 32: {
          ChunksExpected = input.ReadUInt32();
          break;
        }
        case 40: {
          UploadComplete = input.ReadBool();
          break;
        }
        case 50:
        case 48: {
          missingChunks_.AddEntriesFrom(ref input, _repeated_missingChunks_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Configuration Get Request
///&#x2F; @details Request to get current configuration
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class GetConfig : pb::IMessage<GetConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GetConfig> _parser = new pb::MessageParser<GetConfig>(() => new GetConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GetConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfig(GetConfig other) : this() {
    useChunked_ = other.useChunked_;
    chunkSize_ = other.chunkSize_;
    chunkIndex_ = other.chunkIndex_;
    sessionId_ = other.sessionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfig Clone() {
    return new GetConfig(this);
  }

  /// <summary>Field number for the "use_chunked" field.</summary>
  public const int UseChunkedFieldNumber = 1;
  private bool useChunked_;
  /// <summary>
  /// Chunked download support for large files
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool UseChunked {
    get { return useChunked_; }
    set {
      useChunked_ = value;
    }
  }

  /// <summary>Field number for the "chunk_size" field.</summary>
  public const int ChunkSizeFieldNumber = 2;
  private uint chunkSize_;
  /// <summary>
  /// Preferred chunk size in bytes (default: 1MB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkSize {
    get { return chunkSize_; }
    set {
      chunkSize_ = value;
    }
  }

  /// <summary>Field number for the "chunk_index" field.</summary>
  public const int ChunkIndexFieldNumber = 3;
  private uint chunkIndex_;
  /// <summary>
  /// Specific chunk to download (for chunked mode)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkIndex {
    get { return chunkIndex_; }
    set {
      chunkIndex_ = value;
    }
  }

  /// <summary>Field number for the "session_id" field.</summary>
  public const int SessionIdFieldNumber = 4;
  private string sessionId_ = "";
  /// <summary>
  /// Session ID for chunked downloads
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GetConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GetConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UseChunked != other.UseChunked) return false;
    if (ChunkSize != other.ChunkSize) return false;
    if (ChunkIndex != other.ChunkIndex) return false;
    if (SessionId != other.SessionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (UseChunked != false) hash ^= UseChunked.GetHashCode();
    if (ChunkSize != 0) hash ^= ChunkSize.GetHashCode();
    if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (UseChunked != false) {
      output.WriteRawTag(8);
      output.WriteBool(UseChunked);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ChunkIndex);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (UseChunked != false) {
      output.WriteRawTag(8);
      output.WriteBool(UseChunked);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ChunkIndex);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SessionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (UseChunked != false) {
      size += 1 + 1;
    }
    if (ChunkSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkSize);
    }
    if (ChunkIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
    }
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GetConfig other) {
    if (other == null) {
      return;
    }
    if (other.UseChunked != false) {
      UseChunked = other.UseChunked;
    }
    if (other.ChunkSize != 0) {
      ChunkSize = other.ChunkSize;
    }
    if (other.ChunkIndex != 0) {
      ChunkIndex = other.ChunkIndex;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UseChunked = input.ReadBool();
          break;
        }
        case 16: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 24: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 34: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          UseChunked = input.ReadBool();
          break;
        }
        case 16: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 24: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 34: {
          SessionId = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Configuration Get Response
///&#x2F; @details Response containing current configuration
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class GetConfigData : pb::IMessage<GetConfigData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GetConfigData> _parser = new pb::MessageParser<GetConfigData>(() => new GetConfigData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GetConfigData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfigData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfigData(GetConfigData other) : this() {
    jsonContent_ = other.jsonContent_;
    md5Hash_ = other.md5Hash_;
    isChunked_ = other.isChunked_;
    sessionId_ = other.sessionId_;
    chunkIndex_ = other.chunkIndex_;
    totalChunks_ = other.totalChunks_;
    chunkData_ = other.chunkData_;
    chunkSize_ = other.chunkSize_;
    chunkMd5_ = other.chunkMd5_;
    totalFileSize_ = other.totalFileSize_;
    isLastChunk_ = other.isLastChunk_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GetConfigData Clone() {
    return new GetConfigData(this);
  }

  /// <summary>Field number for the "json_content" field.</summary>
  public const int JsonContentFieldNumber = 1;
  private string jsonContent_ = "";
  /// <summary>
  /// Current JSON configuration (for small files &lt; 1MB)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string JsonContent {
    get { return jsonContent_; }
    set {
      jsonContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "md5_hash" field.</summary>
  public const int Md5HashFieldNumber = 2;
  private string md5Hash_ = "";
  /// <summary>
  /// MD5 hash of current config
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Md5Hash {
    get { return md5Hash_; }
    set {
      md5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_chunked" field.</summary>
  public const int IsChunkedFieldNumber = 3;
  private bool isChunked_;
  /// <summary>
  /// Chunked download support for large files
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsChunked {
    get { return isChunked_; }
    set {
      isChunked_ = value;
    }
  }

  /// <summary>Field number for the "session_id" field.</summary>
  public const int SessionIdFieldNumber = 4;
  private string sessionId_ = "";
  /// <summary>
  /// Session ID for chunked downloads
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SessionId {
    get { return sessionId_; }
    set {
      sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunk_index" field.</summary>
  public const int ChunkIndexFieldNumber = 5;
  private uint chunkIndex_;
  /// <summary>
  /// Current chunk number (0-based)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkIndex {
    get { return chunkIndex_; }
    set {
      chunkIndex_ = value;
    }
  }

  /// <summary>Field number for the "total_chunks" field.</summary>
  public const int TotalChunksFieldNumber = 6;
  private uint totalChunks_;
  /// <summary>
  /// Total number of chunks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalChunks {
    get { return totalChunks_; }
    set {
      totalChunks_ = value;
    }
  }

  /// <summary>Field number for the "chunk_data" field.</summary>
  public const int ChunkDataFieldNumber = 7;
  private pb::ByteString chunkData_ = pb::ByteString.Empty;
  /// <summary>
  /// Raw chunk data (for large files)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString ChunkData {
    get { return chunkData_; }
    set {
      chunkData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chunk_size" field.</summary>
  public const int ChunkSizeFieldNumber = 8;
  private uint chunkSize_;
  /// <summary>
  /// Size of this chunk in bytes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ChunkSize {
    get { return chunkSize_; }
    set {
      chunkSize_ = value;
    }
  }

  /// <summary>Field number for the "chunk_md5" field.</summary>
  public const int ChunkMd5FieldNumber = 9;
  private string chunkMd5_ = "";
  /// <summary>
  /// MD5 hash of this specific chunk
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ChunkMd5 {
    get { return chunkMd5_; }
    set {
      chunkMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "total_file_size" field.</summary>
  public const int TotalFileSizeFieldNumber = 10;
  private ulong totalFileSize_;
  /// <summary>
  /// Total size of the complete file
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong TotalFileSize {
    get { return totalFileSize_; }
    set {
      totalFileSize_ = value;
    }
  }

  /// <summary>Field number for the "is_last_chunk" field.</summary>
  public const int IsLastChunkFieldNumber = 11;
  private bool isLastChunk_;
  /// <summary>
  /// True if this is the last chunk
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLastChunk {
    get { return isLastChunk_; }
    set {
      isLastChunk_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GetConfigData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GetConfigData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (JsonContent != other.JsonContent) return false;
    if (Md5Hash != other.Md5Hash) return false;
    if (IsChunked != other.IsChunked) return false;
    if (SessionId != other.SessionId) return false;
    if (ChunkIndex != other.ChunkIndex) return false;
    if (TotalChunks != other.TotalChunks) return false;
    if (ChunkData != other.ChunkData) return false;
    if (ChunkSize != other.ChunkSize) return false;
    if (ChunkMd5 != other.ChunkMd5) return false;
    if (TotalFileSize != other.TotalFileSize) return false;
    if (IsLastChunk != other.IsLastChunk) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (JsonContent.Length != 0) hash ^= JsonContent.GetHashCode();
    if (Md5Hash.Length != 0) hash ^= Md5Hash.GetHashCode();
    if (IsChunked != false) hash ^= IsChunked.GetHashCode();
    if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
    if (ChunkIndex != 0) hash ^= ChunkIndex.GetHashCode();
    if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
    if (ChunkData.Length != 0) hash ^= ChunkData.GetHashCode();
    if (ChunkSize != 0) hash ^= ChunkSize.GetHashCode();
    if (ChunkMd5.Length != 0) hash ^= ChunkMd5.GetHashCode();
    if (TotalFileSize != 0UL) hash ^= TotalFileSize.GetHashCode();
    if (IsLastChunk != false) hash ^= IsLastChunk.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (JsonContent.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonContent);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Md5Hash);
    }
    if (IsChunked != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsChunked);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SessionId);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(ChunkIndex);
    }
    if (TotalChunks != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(ChunkData);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(TotalFileSize);
    }
    if (IsLastChunk != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsLastChunk);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (JsonContent.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonContent);
    }
    if (Md5Hash.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Md5Hash);
    }
    if (IsChunked != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsChunked);
    }
    if (SessionId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SessionId);
    }
    if (ChunkIndex != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(ChunkIndex);
    }
    if (TotalChunks != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(ChunkData);
    }
    if (ChunkSize != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(TotalFileSize);
    }
    if (IsLastChunk != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsLastChunk);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (JsonContent.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonContent);
    }
    if (Md5Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5Hash);
    }
    if (IsChunked != false) {
      size += 1 + 1;
    }
    if (SessionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
    }
    if (ChunkIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkIndex);
    }
    if (TotalChunks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalChunks);
    }
    if (ChunkData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChunkData);
    }
    if (ChunkSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkSize);
    }
    if (ChunkMd5.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChunkMd5);
    }
    if (TotalFileSize != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalFileSize);
    }
    if (IsLastChunk != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GetConfigData other) {
    if (other == null) {
      return;
    }
    if (other.JsonContent.Length != 0) {
      JsonContent = other.JsonContent;
    }
    if (other.Md5Hash.Length != 0) {
      Md5Hash = other.Md5Hash;
    }
    if (other.IsChunked != false) {
      IsChunked = other.IsChunked;
    }
    if (other.SessionId.Length != 0) {
      SessionId = other.SessionId;
    }
    if (other.ChunkIndex != 0) {
      ChunkIndex = other.ChunkIndex;
    }
    if (other.TotalChunks != 0) {
      TotalChunks = other.TotalChunks;
    }
    if (other.ChunkData.Length != 0) {
      ChunkData = other.ChunkData;
    }
    if (other.ChunkSize != 0) {
      ChunkSize = other.ChunkSize;
    }
    if (other.ChunkMd5.Length != 0) {
      ChunkMd5 = other.ChunkMd5;
    }
    if (other.TotalFileSize != 0UL) {
      TotalFileSize = other.TotalFileSize;
    }
    if (other.IsLastChunk != false) {
      IsLastChunk = other.IsLastChunk;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonContent = input.ReadString();
          break;
        }
        case 18: {
          Md5Hash = input.ReadString();
          break;
        }
        case 24: {
          IsChunked = input.ReadBool();
          break;
        }
        case 34: {
          SessionId = input.ReadString();
          break;
        }
        case 40: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 48: {
          TotalChunks = input.ReadUInt32();
          break;
        }
        case 58: {
          ChunkData = input.ReadBytes();
          break;
        }
        case 64: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 74: {
          ChunkMd5 = input.ReadString();
          break;
        }
        case 80: {
          TotalFileSize = input.ReadUInt64();
          break;
        }
        case 88: {
          IsLastChunk = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          JsonContent = input.ReadString();
          break;
        }
        case 18: {
          Md5Hash = input.ReadString();
          break;
        }
        case 24: {
          IsChunked = input.ReadBool();
          break;
        }
        case 34: {
          SessionId = input.ReadString();
          break;
        }
        case 40: {
          ChunkIndex = input.ReadUInt32();
          break;
        }
        case 48: {
          TotalChunks = input.ReadUInt32();
          break;
        }
        case 58: {
          ChunkData = input.ReadBytes();
          break;
        }
        case 64: {
          ChunkSize = input.ReadUInt32();
          break;
        }
        case 74: {
          ChunkMd5 = input.ReadString();
          break;
        }
        case 80: {
          TotalFileSize = input.ReadUInt64();
          break;
        }
        case 88: {
          IsLastChunk = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///&#x2F; @brief Status Data
///&#x2F; @details Status Data is used to get the status data.
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class StatusData : pb::IMessage<StatusData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<StatusData> _parser = new pb::MessageParser<StatusData>(() => new StatusData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<StatusData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StatusData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StatusData(StatusData other) : this() {
    recordState_ = other.recordState_;
    workingMode_ = other.workingMode_;
    resourceUsage_ = other.resourceUsage_ != null ? other.resourceUsage_.Clone() : null;
    time_ = other.time_ != null ? other.time_.Clone() : null;
    fdrStatus_ = other.fdrStatus_ != null ? other.fdrStatus_.Clone() : null;
    cvrStatus_ = other.cvrStatus_ != null ? other.cvrStatus_.Clone() : null;
    ripsStatus_ = other.ripsStatus_;
    cbitResult_ = other.cbitResult_ != null ? other.cbitResult_.Clone() : null;
    pbitResult_ = other.pbitResult_ != null ? other.pbitResult_.Clone() : null;
    ibitResult_ = other.ibitResult_ != null ? other.ibitResult_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StatusData Clone() {
    return new StatusData(this);
  }

  /// <summary>Field number for the "record_state" field.</summary>
  public const int RecordStateFieldNumber = 1;
  private global::RecordState recordState_ = global::RecordState.Record;
  /// <summary>
  /// 1: Recording, 0: Not Recording
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordState RecordState {
    get { return recordState_; }
    set {
      recordState_ = value;
    }
  }

  /// <summary>Field number for the "working_mode" field.</summary>
  public const int WorkingModeFieldNumber = 2;
  private global::WorkingMode workingMode_ = global::WorkingMode.Idle;
  /// <summary>
  /// 2: Maintenance, 1: Operational, 0: Idle
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::WorkingMode WorkingMode {
    get { return workingMode_; }
    set {
      workingMode_ = value;
    }
  }

  /// <summary>Field number for the "resource_usage" field.</summary>
  public const int ResourceUsageFieldNumber = 3;
  private global::ResourceUsageData resourceUsage_;
  /// <summary>
  /// CPU, RAM, Disk, Swap usage diagnostic
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ResourceUsageData ResourceUsage {
    get { return resourceUsage_; }
    set {
      resourceUsage_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 4;
  private global::TimeData time_;
  /// <summary>
  /// Current time
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::TimeData Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "fdr_status" field.</summary>
  public const int FdrStatusFieldNumber = 5;
  private global::FdrStatus fdrStatus_;
  /// <summary>
  /// FDR status structure
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::FdrStatus FdrStatus {
    get { return fdrStatus_; }
    set {
      fdrStatus_ = value;
    }
  }

  /// <summary>Field number for the "cvr_status" field.</summary>
  public const int CvrStatusFieldNumber = 6;
  private global::CvrStatus cvrStatus_;
  /// <summary>
  /// CVR status structure
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CvrStatus CvrStatus {
    get { return cvrStatus_; }
    set {
      cvrStatus_ = value;
    }
  }

  /// <summary>Field number for the "rips_status" field.</summary>
  public const int RipsStatusFieldNumber = 7;
  private bool ripsStatus_;
  /// <summary>
  /// RIPS status
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool RipsStatus {
    get { return ripsStatus_; }
    set {
      ripsStatus_ = value;
    }
  }

  /// <summary>Field number for the "cbit_result" field.</summary>
  public const int CbitResultFieldNumber = 8;
  private global::CbitResult cbitResult_;
  /// <summary>
  /// CBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CbitResult CbitResult {
    get { return cbitResult_; }
    set {
      cbitResult_ = value;
    }
  }

  /// <summary>Field number for the "pbit_result" field.</summary>
  public const int PbitResultFieldNumber = 9;
  private global::PbitResult pbitResult_;
  /// <summary>
  /// PBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PbitResult PbitResult {
    get { return pbitResult_; }
    set {
      pbitResult_ = value;
    }
  }

  /// <summary>Field number for the "ibit_result" field.</summary>
  public const int IbitResultFieldNumber = 10;
  private global::IbitResult ibitResult_;
  /// <summary>
  /// IBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::IbitResult IbitResult {
    get { return ibitResult_; }
    set {
      ibitResult_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as StatusData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(StatusData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RecordState != other.RecordState) return false;
    if (WorkingMode != other.WorkingMode) return false;
    if (!object.Equals(ResourceUsage, other.ResourceUsage)) return false;
    if (!object.Equals(Time, other.Time)) return false;
    if (!object.Equals(FdrStatus, other.FdrStatus)) return false;
    if (!object.Equals(CvrStatus, other.CvrStatus)) return false;
    if (RipsStatus != other.RipsStatus) return false;
    if (!object.Equals(CbitResult, other.CbitResult)) return false;
    if (!object.Equals(PbitResult, other.PbitResult)) return false;
    if (!object.Equals(IbitResult, other.IbitResult)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (RecordState != global::RecordState.Record) hash ^= RecordState.GetHashCode();
    if (WorkingMode != global::WorkingMode.Idle) hash ^= WorkingMode.GetHashCode();
    if (resourceUsage_ != null) hash ^= ResourceUsage.GetHashCode();
    if (time_ != null) hash ^= Time.GetHashCode();
    if (fdrStatus_ != null) hash ^= FdrStatus.GetHashCode();
    if (cvrStatus_ != null) hash ^= CvrStatus.GetHashCode();
    if (RipsStatus != false) hash ^= RipsStatus.GetHashCode();
    if (cbitResult_ != null) hash ^= CbitResult.GetHashCode();
    if (pbitResult_ != null) hash ^= PbitResult.GetHashCode();
    if (ibitResult_ != null) hash ^= IbitResult.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RecordState != global::RecordState.Record) {
      output.WriteRawTag(8);
      output.WriteEnum((int) RecordState);
    }
    if (WorkingMode != global::WorkingMode.Idle) {
      output.WriteRawTag(16);
      output.WriteEnum((int) WorkingMode);
    }
    if (resourceUsage_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ResourceUsage);
    }
    if (time_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Time);
    }
    if (fdrStatus_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(FdrStatus);
    }
    if (cvrStatus_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(CvrStatus);
    }
    if (RipsStatus != false) {
      output.WriteRawTag(56);
      output.WriteBool(RipsStatus);
    }
    if (cbitResult_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(CbitResult);
    }
    if (pbitResult_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(PbitResult);
    }
    if (ibitResult_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(IbitResult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RecordState != global::RecordState.Record) {
      output.WriteRawTag(8);
      output.WriteEnum((int) RecordState);
    }
    if (WorkingMode != global::WorkingMode.Idle) {
      output.WriteRawTag(16);
      output.WriteEnum((int) WorkingMode);
    }
    if (resourceUsage_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ResourceUsage);
    }
    if (time_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Time);
    }
    if (fdrStatus_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(FdrStatus);
    }
    if (cvrStatus_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(CvrStatus);
    }
    if (RipsStatus != false) {
      output.WriteRawTag(56);
      output.WriteBool(RipsStatus);
    }
    if (cbitResult_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(CbitResult);
    }
    if (pbitResult_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(PbitResult);
    }
    if (ibitResult_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(IbitResult);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (RecordState != global::RecordState.Record) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordState);
    }
    if (WorkingMode != global::WorkingMode.Idle) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WorkingMode);
    }
    if (resourceUsage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceUsage);
    }
    if (time_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
    }
    if (fdrStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FdrStatus);
    }
    if (cvrStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CvrStatus);
    }
    if (RipsStatus != false) {
      size += 1 + 1;
    }
    if (cbitResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CbitResult);
    }
    if (pbitResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbitResult);
    }
    if (ibitResult_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IbitResult);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(StatusData other) {
    if (other == null) {
      return;
    }
    if (other.RecordState != global::RecordState.Record) {
      RecordState = other.RecordState;
    }
    if (other.WorkingMode != global::WorkingMode.Idle) {
      WorkingMode = other.WorkingMode;
    }
    if (other.resourceUsage_ != null) {
      if (resourceUsage_ == null) {
        ResourceUsage = new global::ResourceUsageData();
      }
      ResourceUsage.MergeFrom(other.ResourceUsage);
    }
    if (other.time_ != null) {
      if (time_ == null) {
        Time = new global::TimeData();
      }
      Time.MergeFrom(other.Time);
    }
    if (other.fdrStatus_ != null) {
      if (fdrStatus_ == null) {
        FdrStatus = new global::FdrStatus();
      }
      FdrStatus.MergeFrom(other.FdrStatus);
    }
    if (other.cvrStatus_ != null) {
      if (cvrStatus_ == null) {
        CvrStatus = new global::CvrStatus();
      }
      CvrStatus.MergeFrom(other.CvrStatus);
    }
    if (other.RipsStatus != false) {
      RipsStatus = other.RipsStatus;
    }
    if (other.cbitResult_ != null) {
      if (cbitResult_ == null) {
        CbitResult = new global::CbitResult();
      }
      CbitResult.MergeFrom(other.CbitResult);
    }
    if (other.pbitResult_ != null) {
      if (pbitResult_ == null) {
        PbitResult = new global::PbitResult();
      }
      PbitResult.MergeFrom(other.PbitResult);
    }
    if (other.ibitResult_ != null) {
      if (ibitResult_ == null) {
        IbitResult = new global::IbitResult();
      }
      IbitResult.MergeFrom(other.IbitResult);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RecordState = (global::RecordState) input.ReadEnum();
          break;
        }
        case 16: {
          WorkingMode = (global::WorkingMode) input.ReadEnum();
          break;
        }
        case 26: {
          if (resourceUsage_ == null) {
            ResourceUsage = new global::ResourceUsageData();
          }
          input.ReadMessage(ResourceUsage);
          break;
        }
        case 34: {
          if (time_ == null) {
            Time = new global::TimeData();
          }
          input.ReadMessage(Time);
          break;
        }
        case 42: {
          if (fdrStatus_ == null) {
            FdrStatus = new global::FdrStatus();
          }
          input.ReadMessage(FdrStatus);
          break;
        }
        case 50: {
          if (cvrStatus_ == null) {
            CvrStatus = new global::CvrStatus();
          }
          input.ReadMessage(CvrStatus);
          break;
        }
        case 56: {
          RipsStatus = input.ReadBool();
          break;
        }
        case 66: {
          if (cbitResult_ == null) {
            CbitResult = new global::CbitResult();
          }
          input.ReadMessage(CbitResult);
          break;
        }
        case 74: {
          if (pbitResult_ == null) {
            PbitResult = new global::PbitResult();
          }
          input.ReadMessage(PbitResult);
          break;
        }
        case 82: {
          if (ibitResult_ == null) {
            IbitResult = new global::IbitResult();
          }
          input.ReadMessage(IbitResult);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RecordState = (global::RecordState) input.ReadEnum();
          break;
        }
        case 16: {
          WorkingMode = (global::WorkingMode) input.ReadEnum();
          break;
        }
        case 26: {
          if (resourceUsage_ == null) {
            ResourceUsage = new global::ResourceUsageData();
          }
          input.ReadMessage(ResourceUsage);
          break;
        }
        case 34: {
          if (time_ == null) {
            Time = new global::TimeData();
          }
          input.ReadMessage(Time);
          break;
        }
        case 42: {
          if (fdrStatus_ == null) {
            FdrStatus = new global::FdrStatus();
          }
          input.ReadMessage(FdrStatus);
          break;
        }
        case 50: {
          if (cvrStatus_ == null) {
            CvrStatus = new global::CvrStatus();
          }
          input.ReadMessage(CvrStatus);
          break;
        }
        case 56: {
          RipsStatus = input.ReadBool();
          break;
        }
        case 66: {
          if (cbitResult_ == null) {
            CbitResult = new global::CbitResult();
          }
          input.ReadMessage(CbitResult);
          break;
        }
        case 74: {
          if (pbitResult_ == null) {
            PbitResult = new global::PbitResult();
          }
          input.ReadMessage(PbitResult);
          break;
        }
        case 82: {
          if (ibitResult_ == null) {
            IbitResult = new global::IbitResult();
          }
          input.ReadMessage(IbitResult);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Request main structure
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class IPCMessage : pb::IMessage<IPCMessage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<IPCMessage> _parser = new pb::MessageParser<IPCMessage>(() => new IPCMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<IPCMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCMessage(IPCMessage other) : this() {
    jwt_ = other.jwt_;
    commandId_ = other.commandId_;
    switch (other.DataCase) {
      case DataOneofCase.RecordState:
        RecordState = other.RecordState;
        break;
      case DataOneofCase.WorkingMode:
        WorkingMode = other.WorkingMode;
        break;
      case DataOneofCase.DownloadRecord:
        DownloadRecord = other.DownloadRecord.Clone();
        break;
      case DataOneofCase.UploadConfig:
        UploadConfig = other.UploadConfig.Clone();
        break;
      case DataOneofCase.GetConfig:
        GetConfig = other.GetConfig.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCMessage Clone() {
    return new IPCMessage(this);
  }

  /// <summary>Field number for the "jwt" field.</summary>
  public const int JwtFieldNumber = 1;
  private string jwt_ = "";
  /// <summary>
  /// JWT token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Jwt {
    get { return jwt_; }
    set {
      jwt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "command_id" field.</summary>
  public const int CommandIdFieldNumber = 2;
  private global::CommandId commandId_ = global::CommandId.RecordState;
  /// <summary>
  /// Command ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CommandId CommandId {
    get { return commandId_; }
    set {
      commandId_ = value;
    }
  }

  /// <summary>Field number for the "record_state" field.</summary>
  public const int RecordStateFieldNumber = 3;
  /// <summary>
  /// Set Record State (Record or Do Not Record)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordState RecordState {
    get { return HasRecordState ? (global::RecordState) data_ : global::RecordState.Record; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.RecordState;
    }
  }
  /// <summary>Gets whether the "record_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRecordState {
    get { return dataCase_ == DataOneofCase.RecordState; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "record_state" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRecordState() {
    if (HasRecordState) {
      ClearData();
    }
  }

  /// <summary>Field number for the "working_mode" field.</summary>
  public const int WorkingModeFieldNumber = 4;
  /// <summary>
  /// Set Working Mode (Idle, Operational, Maintenance)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::WorkingMode WorkingMode {
    get { return HasWorkingMode ? (global::WorkingMode) data_ : global::WorkingMode.Idle; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.WorkingMode;
    }
  }
  /// <summary>Gets whether the "working_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWorkingMode {
    get { return dataCase_ == DataOneofCase.WorkingMode; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "working_mode" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWorkingMode() {
    if (HasWorkingMode) {
      ClearData();
    }
  }

  /// <summary>Field number for the "download_record" field.</summary>
  public const int DownloadRecordFieldNumber = 5;
  /// <summary>
  /// Request Download Record
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::DownloadRecord DownloadRecord {
    get { return dataCase_ == DataOneofCase.DownloadRecord ? (global::DownloadRecord) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DownloadRecord;
    }
  }

  /// <summary>Field number for the "upload_config" field.</summary>
  public const int UploadConfigFieldNumber = 6;
  /// <summary>
  /// Upload JSON Configuration
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UploadConfig UploadConfig {
    get { return dataCase_ == DataOneofCase.UploadConfig ? (global::UploadConfig) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.UploadConfig;
    }
  }

  /// <summary>Field number for the "get_config" field.</summary>
  public const int GetConfigFieldNumber = 7;
  /// <summary>
  /// Get Configuration Request
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::GetConfig GetConfig {
    get { return dataCase_ == DataOneofCase.GetConfig ? (global::GetConfig) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.GetConfig;
    }
  }

  private object data_;
  /// <summary>Enum of possible cases for the "data" oneof.</summary>
  public enum DataOneofCase {
    None = 0,
    RecordState = 3,
    WorkingMode = 4,
    DownloadRecord = 5,
    UploadConfig = 6,
    GetConfig = 7,
  }
  private DataOneofCase dataCase_ = DataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DataOneofCase DataCase {
    get { return dataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearData() {
    dataCase_ = DataOneofCase.None;
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as IPCMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(IPCMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Jwt != other.Jwt) return false;
    if (CommandId != other.CommandId) return false;
    if (RecordState != other.RecordState) return false;
    if (WorkingMode != other.WorkingMode) return false;
    if (!object.Equals(DownloadRecord, other.DownloadRecord)) return false;
    if (!object.Equals(UploadConfig, other.UploadConfig)) return false;
    if (!object.Equals(GetConfig, other.GetConfig)) return false;
    if (DataCase != other.DataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Jwt.Length != 0) hash ^= Jwt.GetHashCode();
    if (CommandId != global::CommandId.RecordState) hash ^= CommandId.GetHashCode();
    if (HasRecordState) hash ^= RecordState.GetHashCode();
    if (HasWorkingMode) hash ^= WorkingMode.GetHashCode();
    if (dataCase_ == DataOneofCase.DownloadRecord) hash ^= DownloadRecord.GetHashCode();
    if (dataCase_ == DataOneofCase.UploadConfig) hash ^= UploadConfig.GetHashCode();
    if (dataCase_ == DataOneofCase.GetConfig) hash ^= GetConfig.GetHashCode();
    hash ^= (int) dataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Jwt.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Jwt);
    }
    if (CommandId != global::CommandId.RecordState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CommandId);
    }
    if (HasRecordState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) RecordState);
    }
    if (HasWorkingMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.DownloadRecord) {
      output.WriteRawTag(42);
      output.WriteMessage(DownloadRecord);
    }
    if (dataCase_ == DataOneofCase.UploadConfig) {
      output.WriteRawTag(50);
      output.WriteMessage(UploadConfig);
    }
    if (dataCase_ == DataOneofCase.GetConfig) {
      output.WriteRawTag(58);
      output.WriteMessage(GetConfig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Jwt.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Jwt);
    }
    if (CommandId != global::CommandId.RecordState) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CommandId);
    }
    if (HasRecordState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) RecordState);
    }
    if (HasWorkingMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.DownloadRecord) {
      output.WriteRawTag(42);
      output.WriteMessage(DownloadRecord);
    }
    if (dataCase_ == DataOneofCase.UploadConfig) {
      output.WriteRawTag(50);
      output.WriteMessage(UploadConfig);
    }
    if (dataCase_ == DataOneofCase.GetConfig) {
      output.WriteRawTag(58);
      output.WriteMessage(GetConfig);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Jwt.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Jwt);
    }
    if (CommandId != global::CommandId.RecordState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommandId);
    }
    if (HasRecordState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordState);
    }
    if (HasWorkingMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.DownloadRecord) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadRecord);
    }
    if (dataCase_ == DataOneofCase.UploadConfig) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadConfig);
    }
    if (dataCase_ == DataOneofCase.GetConfig) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetConfig);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(IPCMessage other) {
    if (other == null) {
      return;
    }
    if (other.Jwt.Length != 0) {
      Jwt = other.Jwt;
    }
    if (other.CommandId != global::CommandId.RecordState) {
      CommandId = other.CommandId;
    }
    switch (other.DataCase) {
      case DataOneofCase.RecordState:
        RecordState = other.RecordState;
        break;
      case DataOneofCase.WorkingMode:
        WorkingMode = other.WorkingMode;
        break;
      case DataOneofCase.DownloadRecord:
        if (DownloadRecord == null) {
          DownloadRecord = new global::DownloadRecord();
        }
        DownloadRecord.MergeFrom(other.DownloadRecord);
        break;
      case DataOneofCase.UploadConfig:
        if (UploadConfig == null) {
          UploadConfig = new global::UploadConfig();
        }
        UploadConfig.MergeFrom(other.UploadConfig);
        break;
      case DataOneofCase.GetConfig:
        if (GetConfig == null) {
          GetConfig = new global::GetConfig();
        }
        GetConfig.MergeFrom(other.GetConfig);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Jwt = input.ReadString();
          break;
        }
        case 16: {
          CommandId = (global::CommandId) input.ReadEnum();
          break;
        }
        case 24: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.RecordState;
          break;
        }
        case 32: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.WorkingMode;
          break;
        }
        case 42: {
          global::DownloadRecord subBuilder = new global::DownloadRecord();
          if (dataCase_ == DataOneofCase.DownloadRecord) {
            subBuilder.MergeFrom(DownloadRecord);
          }
          input.ReadMessage(subBuilder);
          DownloadRecord = subBuilder;
          break;
        }
        case 50: {
          global::UploadConfig subBuilder = new global::UploadConfig();
          if (dataCase_ == DataOneofCase.UploadConfig) {
            subBuilder.MergeFrom(UploadConfig);
          }
          input.ReadMessage(subBuilder);
          UploadConfig = subBuilder;
          break;
        }
        case 58: {
          global::GetConfig subBuilder = new global::GetConfig();
          if (dataCase_ == DataOneofCase.GetConfig) {
            subBuilder.MergeFrom(GetConfig);
          }
          input.ReadMessage(subBuilder);
          GetConfig = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Jwt = input.ReadString();
          break;
        }
        case 16: {
          CommandId = (global::CommandId) input.ReadEnum();
          break;
        }
        case 24: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.RecordState;
          break;
        }
        case 32: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.WorkingMode;
          break;
        }
        case 42: {
          global::DownloadRecord subBuilder = new global::DownloadRecord();
          if (dataCase_ == DataOneofCase.DownloadRecord) {
            subBuilder.MergeFrom(DownloadRecord);
          }
          input.ReadMessage(subBuilder);
          DownloadRecord = subBuilder;
          break;
        }
        case 50: {
          global::UploadConfig subBuilder = new global::UploadConfig();
          if (dataCase_ == DataOneofCase.UploadConfig) {
            subBuilder.MergeFrom(UploadConfig);
          }
          input.ReadMessage(subBuilder);
          UploadConfig = subBuilder;
          break;
        }
        case 58: {
          global::GetConfig subBuilder = new global::GetConfig();
          if (dataCase_ == DataOneofCase.GetConfig) {
            subBuilder.MergeFrom(GetConfig);
          }
          input.ReadMessage(subBuilder);
          GetConfig = subBuilder;
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
/// Response main structure
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class IPCResponse : pb::IMessage<IPCResponse>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<IPCResponse> _parser = new pb::MessageParser<IPCResponse>(() => new IPCResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<IPCResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IpcReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCResponse(IPCResponse other) : this() {
    success_ = other.success_;
    switch (other.DataCase) {
      case DataOneofCase.RecordState:
        RecordState = other.RecordState;
        break;
      case DataOneofCase.WorkingMode:
        WorkingMode = other.WorkingMode;
        break;
      case DataOneofCase.IbitResult:
        IbitResult = other.IbitResult.Clone();
        break;
      case DataOneofCase.CbitResult:
        CbitResult = other.CbitResult.Clone();
        break;
      case DataOneofCase.PbitResult:
        PbitResult = other.PbitResult.Clone();
        break;
      case DataOneofCase.Status:
        Status = other.Status.Clone();
        break;
      case DataOneofCase.Versions:
        Versions = other.Versions.Clone();
        break;
      case DataOneofCase.RecordInfoData:
        RecordInfoData = other.RecordInfoData.Clone();
        break;
      case DataOneofCase.DownloadRecordData:
        DownloadRecordData = other.DownloadRecordData.Clone();
        break;
      case DataOneofCase.UploadConfigData:
        UploadConfigData = other.UploadConfigData.Clone();
        break;
      case DataOneofCase.GetConfigData:
        GetConfigData = other.GetConfigData.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public IPCResponse Clone() {
    return new IPCResponse(this);
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  /// <summary>
  /// 1: Success, 0: Failure
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "record_state" field.</summary>
  public const int RecordStateFieldNumber = 3;
  /// <summary>
  /// Returned Record State
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordState RecordState {
    get { return HasRecordState ? (global::RecordState) data_ : global::RecordState.Record; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.RecordState;
    }
  }
  /// <summary>Gets whether the "record_state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRecordState {
    get { return dataCase_ == DataOneofCase.RecordState; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "record_state" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRecordState() {
    if (HasRecordState) {
      ClearData();
    }
  }

  /// <summary>Field number for the "working_mode" field.</summary>
  public const int WorkingModeFieldNumber = 4;
  /// <summary>
  /// Returned Working Mode
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::WorkingMode WorkingMode {
    get { return HasWorkingMode ? (global::WorkingMode) data_ : global::WorkingMode.Idle; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.WorkingMode;
    }
  }
  /// <summary>Gets whether the "working_mode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasWorkingMode {
    get { return dataCase_ == DataOneofCase.WorkingMode; }
  }
  /// <summary> Clears the value of the oneof if it's currently set to "working_mode" </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearWorkingMode() {
    if (HasWorkingMode) {
      ClearData();
    }
  }

  /// <summary>Field number for the "ibit_result" field.</summary>
  public const int IbitResultFieldNumber = 5;
  /// <summary>
  /// Returned IBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::IbitResult IbitResult {
    get { return dataCase_ == DataOneofCase.IbitResult ? (global::IbitResult) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.IbitResult;
    }
  }

  /// <summary>Field number for the "cbit_result" field.</summary>
  public const int CbitResultFieldNumber = 6;
  /// <summary>
  /// Returned CBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CbitResult CbitResult {
    get { return dataCase_ == DataOneofCase.CbitResult ? (global::CbitResult) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CbitResult;
    }
  }

  /// <summary>Field number for the "pbit_result" field.</summary>
  public const int PbitResultFieldNumber = 7;
  /// <summary>
  /// Returned PBIT test results
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PbitResult PbitResult {
    get { return dataCase_ == DataOneofCase.PbitResult ? (global::PbitResult) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.PbitResult;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 8;
  /// <summary>
  /// Returned Status Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::StatusData Status {
    get { return dataCase_ == DataOneofCase.Status ? (global::StatusData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Status;
    }
  }

  /// <summary>Field number for the "versions" field.</summary>
  public const int VersionsFieldNumber = 9;
  /// <summary>
  /// Returned Version Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::VersionData Versions {
    get { return dataCase_ == DataOneofCase.Versions ? (global::VersionData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Versions;
    }
  }

  /// <summary>Field number for the "record_info_data" field.</summary>
  public const int RecordInfoDataFieldNumber = 10;
  /// <summary>
  /// Returned Record Info Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::RecordInfoData RecordInfoData {
    get { return dataCase_ == DataOneofCase.RecordInfoData ? (global::RecordInfoData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.RecordInfoData;
    }
  }

  /// <summary>Field number for the "download_record_data" field.</summary>
  public const int DownloadRecordDataFieldNumber = 11;
  /// <summary>
  /// Returned Download Record Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::DownloadRecordData DownloadRecordData {
    get { return dataCase_ == DataOneofCase.DownloadRecordData ? (global::DownloadRecordData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DownloadRecordData;
    }
  }

  /// <summary>Field number for the "upload_config_data" field.</summary>
  public const int UploadConfigDataFieldNumber = 12;
  /// <summary>
  /// Returned Upload Config Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UploadConfigData UploadConfigData {
    get { return dataCase_ == DataOneofCase.UploadConfigData ? (global::UploadConfigData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.UploadConfigData;
    }
  }

  /// <summary>Field number for the "get_config_data" field.</summary>
  public const int GetConfigDataFieldNumber = 13;
  /// <summary>
  /// Returned Get Config Data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::GetConfigData GetConfigData {
    get { return dataCase_ == DataOneofCase.GetConfigData ? (global::GetConfigData) data_ : null; }
    set {
      data_ = value;
      dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.GetConfigData;
    }
  }

  private object data_;
  /// <summary>Enum of possible cases for the "data" oneof.</summary>
  public enum DataOneofCase {
    None = 0,
    RecordState = 3,
    WorkingMode = 4,
    IbitResult = 5,
    CbitResult = 6,
    PbitResult = 7,
    Status = 8,
    Versions = 9,
    RecordInfoData = 10,
    DownloadRecordData = 11,
    UploadConfigData = 12,
    GetConfigData = 13,
  }
  private DataOneofCase dataCase_ = DataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DataOneofCase DataCase {
    get { return dataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearData() {
    dataCase_ = DataOneofCase.None;
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as IPCResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(IPCResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (RecordState != other.RecordState) return false;
    if (WorkingMode != other.WorkingMode) return false;
    if (!object.Equals(IbitResult, other.IbitResult)) return false;
    if (!object.Equals(CbitResult, other.CbitResult)) return false;
    if (!object.Equals(PbitResult, other.PbitResult)) return false;
    if (!object.Equals(Status, other.Status)) return false;
    if (!object.Equals(Versions, other.Versions)) return false;
    if (!object.Equals(RecordInfoData, other.RecordInfoData)) return false;
    if (!object.Equals(DownloadRecordData, other.DownloadRecordData)) return false;
    if (!object.Equals(UploadConfigData, other.UploadConfigData)) return false;
    if (!object.Equals(GetConfigData, other.GetConfigData)) return false;
    if (DataCase != other.DataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (HasRecordState) hash ^= RecordState.GetHashCode();
    if (HasWorkingMode) hash ^= WorkingMode.GetHashCode();
    if (dataCase_ == DataOneofCase.IbitResult) hash ^= IbitResult.GetHashCode();
    if (dataCase_ == DataOneofCase.CbitResult) hash ^= CbitResult.GetHashCode();
    if (dataCase_ == DataOneofCase.PbitResult) hash ^= PbitResult.GetHashCode();
    if (dataCase_ == DataOneofCase.Status) hash ^= Status.GetHashCode();
    if (dataCase_ == DataOneofCase.Versions) hash ^= Versions.GetHashCode();
    if (dataCase_ == DataOneofCase.RecordInfoData) hash ^= RecordInfoData.GetHashCode();
    if (dataCase_ == DataOneofCase.DownloadRecordData) hash ^= DownloadRecordData.GetHashCode();
    if (dataCase_ == DataOneofCase.UploadConfigData) hash ^= UploadConfigData.GetHashCode();
    if (dataCase_ == DataOneofCase.GetConfigData) hash ^= GetConfigData.GetHashCode();
    hash ^= (int) dataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (HasRecordState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) RecordState);
    }
    if (HasWorkingMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.IbitResult) {
      output.WriteRawTag(42);
      output.WriteMessage(IbitResult);
    }
    if (dataCase_ == DataOneofCase.CbitResult) {
      output.WriteRawTag(50);
      output.WriteMessage(CbitResult);
    }
    if (dataCase_ == DataOneofCase.PbitResult) {
      output.WriteRawTag(58);
      output.WriteMessage(PbitResult);
    }
    if (dataCase_ == DataOneofCase.Status) {
      output.WriteRawTag(66);
      output.WriteMessage(Status);
    }
    if (dataCase_ == DataOneofCase.Versions) {
      output.WriteRawTag(74);
      output.WriteMessage(Versions);
    }
    if (dataCase_ == DataOneofCase.RecordInfoData) {
      output.WriteRawTag(82);
      output.WriteMessage(RecordInfoData);
    }
    if (dataCase_ == DataOneofCase.DownloadRecordData) {
      output.WriteRawTag(90);
      output.WriteMessage(DownloadRecordData);
    }
    if (dataCase_ == DataOneofCase.UploadConfigData) {
      output.WriteRawTag(98);
      output.WriteMessage(UploadConfigData);
    }
    if (dataCase_ == DataOneofCase.GetConfigData) {
      output.WriteRawTag(106);
      output.WriteMessage(GetConfigData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (HasRecordState) {
      output.WriteRawTag(24);
      output.WriteEnum((int) RecordState);
    }
    if (HasWorkingMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.IbitResult) {
      output.WriteRawTag(42);
      output.WriteMessage(IbitResult);
    }
    if (dataCase_ == DataOneofCase.CbitResult) {
      output.WriteRawTag(50);
      output.WriteMessage(CbitResult);
    }
    if (dataCase_ == DataOneofCase.PbitResult) {
      output.WriteRawTag(58);
      output.WriteMessage(PbitResult);
    }
    if (dataCase_ == DataOneofCase.Status) {
      output.WriteRawTag(66);
      output.WriteMessage(Status);
    }
    if (dataCase_ == DataOneofCase.Versions) {
      output.WriteRawTag(74);
      output.WriteMessage(Versions);
    }
    if (dataCase_ == DataOneofCase.RecordInfoData) {
      output.WriteRawTag(82);
      output.WriteMessage(RecordInfoData);
    }
    if (dataCase_ == DataOneofCase.DownloadRecordData) {
      output.WriteRawTag(90);
      output.WriteMessage(DownloadRecordData);
    }
    if (dataCase_ == DataOneofCase.UploadConfigData) {
      output.WriteRawTag(98);
      output.WriteMessage(UploadConfigData);
    }
    if (dataCase_ == DataOneofCase.GetConfigData) {
      output.WriteRawTag(106);
      output.WriteMessage(GetConfigData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (HasRecordState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordState);
    }
    if (HasWorkingMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WorkingMode);
    }
    if (dataCase_ == DataOneofCase.IbitResult) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IbitResult);
    }
    if (dataCase_ == DataOneofCase.CbitResult) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CbitResult);
    }
    if (dataCase_ == DataOneofCase.PbitResult) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbitResult);
    }
    if (dataCase_ == DataOneofCase.Status) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (dataCase_ == DataOneofCase.Versions) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Versions);
    }
    if (dataCase_ == DataOneofCase.RecordInfoData) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordInfoData);
    }
    if (dataCase_ == DataOneofCase.DownloadRecordData) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadRecordData);
    }
    if (dataCase_ == DataOneofCase.UploadConfigData) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadConfigData);
    }
    if (dataCase_ == DataOneofCase.GetConfigData) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetConfigData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(IPCResponse other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    switch (other.DataCase) {
      case DataOneofCase.RecordState:
        RecordState = other.RecordState;
        break;
      case DataOneofCase.WorkingMode:
        WorkingMode = other.WorkingMode;
        break;
      case DataOneofCase.IbitResult:
        if (IbitResult == null) {
          IbitResult = new global::IbitResult();
        }
        IbitResult.MergeFrom(other.IbitResult);
        break;
      case DataOneofCase.CbitResult:
        if (CbitResult == null) {
          CbitResult = new global::CbitResult();
        }
        CbitResult.MergeFrom(other.CbitResult);
        break;
      case DataOneofCase.PbitResult:
        if (PbitResult == null) {
          PbitResult = new global::PbitResult();
        }
        PbitResult.MergeFrom(other.PbitResult);
        break;
      case DataOneofCase.Status:
        if (Status == null) {
          Status = new global::StatusData();
        }
        Status.MergeFrom(other.Status);
        break;
      case DataOneofCase.Versions:
        if (Versions == null) {
          Versions = new global::VersionData();
        }
        Versions.MergeFrom(other.Versions);
        break;
      case DataOneofCase.RecordInfoData:
        if (RecordInfoData == null) {
          RecordInfoData = new global::RecordInfoData();
        }
        RecordInfoData.MergeFrom(other.RecordInfoData);
        break;
      case DataOneofCase.DownloadRecordData:
        if (DownloadRecordData == null) {
          DownloadRecordData = new global::DownloadRecordData();
        }
        DownloadRecordData.MergeFrom(other.DownloadRecordData);
        break;
      case DataOneofCase.UploadConfigData:
        if (UploadConfigData == null) {
          UploadConfigData = new global::UploadConfigData();
        }
        UploadConfigData.MergeFrom(other.UploadConfigData);
        break;
      case DataOneofCase.GetConfigData:
        if (GetConfigData == null) {
          GetConfigData = new global::GetConfigData();
        }
        GetConfigData.MergeFrom(other.GetConfigData);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 24: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.RecordState;
          break;
        }
        case 32: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.WorkingMode;
          break;
        }
        case 42: {
          global::IbitResult subBuilder = new global::IbitResult();
          if (dataCase_ == DataOneofCase.IbitResult) {
            subBuilder.MergeFrom(IbitResult);
          }
          input.ReadMessage(subBuilder);
          IbitResult = subBuilder;
          break;
        }
        case 50: {
          global::CbitResult subBuilder = new global::CbitResult();
          if (dataCase_ == DataOneofCase.CbitResult) {
            subBuilder.MergeFrom(CbitResult);
          }
          input.ReadMessage(subBuilder);
          CbitResult = subBuilder;
          break;
        }
        case 58: {
          global::PbitResult subBuilder = new global::PbitResult();
          if (dataCase_ == DataOneofCase.PbitResult) {
            subBuilder.MergeFrom(PbitResult);
          }
          input.ReadMessage(subBuilder);
          PbitResult = subBuilder;
          break;
        }
        case 66: {
          global::StatusData subBuilder = new global::StatusData();
          if (dataCase_ == DataOneofCase.Status) {
            subBuilder.MergeFrom(Status);
          }
          input.ReadMessage(subBuilder);
          Status = subBuilder;
          break;
        }
        case 74: {
          global::VersionData subBuilder = new global::VersionData();
          if (dataCase_ == DataOneofCase.Versions) {
            subBuilder.MergeFrom(Versions);
          }
          input.ReadMessage(subBuilder);
          Versions = subBuilder;
          break;
        }
        case 82: {
          global::RecordInfoData subBuilder = new global::RecordInfoData();
          if (dataCase_ == DataOneofCase.RecordInfoData) {
            subBuilder.MergeFrom(RecordInfoData);
          }
          input.ReadMessage(subBuilder);
          RecordInfoData = subBuilder;
          break;
        }
        case 90: {
          global::DownloadRecordData subBuilder = new global::DownloadRecordData();
          if (dataCase_ == DataOneofCase.DownloadRecordData) {
            subBuilder.MergeFrom(DownloadRecordData);
          }
          input.ReadMessage(subBuilder);
          DownloadRecordData = subBuilder;
          break;
        }
        case 98: {
          global::UploadConfigData subBuilder = new global::UploadConfigData();
          if (dataCase_ == DataOneofCase.UploadConfigData) {
            subBuilder.MergeFrom(UploadConfigData);
          }
          input.ReadMessage(subBuilder);
          UploadConfigData = subBuilder;
          break;
        }
        case 106: {
          global::GetConfigData subBuilder = new global::GetConfigData();
          if (dataCase_ == DataOneofCase.GetConfigData) {
            subBuilder.MergeFrom(GetConfigData);
          }
          input.ReadMessage(subBuilder);
          GetConfigData = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 24: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.RecordState;
          break;
        }
        case 32: {
          data_ = input.ReadEnum();
          dataCase_ = DataOneofCase.WorkingMode;
          break;
        }
        case 42: {
          global::IbitResult subBuilder = new global::IbitResult();
          if (dataCase_ == DataOneofCase.IbitResult) {
            subBuilder.MergeFrom(IbitResult);
          }
          input.ReadMessage(subBuilder);
          IbitResult = subBuilder;
          break;
        }
        case 50: {
          global::CbitResult subBuilder = new global::CbitResult();
          if (dataCase_ == DataOneofCase.CbitResult) {
            subBuilder.MergeFrom(CbitResult);
          }
          input.ReadMessage(subBuilder);
          CbitResult = subBuilder;
          break;
        }
        case 58: {
          global::PbitResult subBuilder = new global::PbitResult();
          if (dataCase_ == DataOneofCase.PbitResult) {
            subBuilder.MergeFrom(PbitResult);
          }
          input.ReadMessage(subBuilder);
          PbitResult = subBuilder;
          break;
        }
        case 66: {
          global::StatusData subBuilder = new global::StatusData();
          if (dataCase_ == DataOneofCase.Status) {
            subBuilder.MergeFrom(Status);
          }
          input.ReadMessage(subBuilder);
          Status = subBuilder;
          break;
        }
        case 74: {
          global::VersionData subBuilder = new global::VersionData();
          if (dataCase_ == DataOneofCase.Versions) {
            subBuilder.MergeFrom(Versions);
          }
          input.ReadMessage(subBuilder);
          Versions = subBuilder;
          break;
        }
        case 82: {
          global::RecordInfoData subBuilder = new global::RecordInfoData();
          if (dataCase_ == DataOneofCase.RecordInfoData) {
            subBuilder.MergeFrom(RecordInfoData);
          }
          input.ReadMessage(subBuilder);
          RecordInfoData = subBuilder;
          break;
        }
        case 90: {
          global::DownloadRecordData subBuilder = new global::DownloadRecordData();
          if (dataCase_ == DataOneofCase.DownloadRecordData) {
            subBuilder.MergeFrom(DownloadRecordData);
          }
          input.ReadMessage(subBuilder);
          DownloadRecordData = subBuilder;
          break;
        }
        case 98: {
          global::UploadConfigData subBuilder = new global::UploadConfigData();
          if (dataCase_ == DataOneofCase.UploadConfigData) {
            subBuilder.MergeFrom(UploadConfigData);
          }
          input.ReadMessage(subBuilder);
          UploadConfigData = subBuilder;
          break;
        }
        case 106: {
          global::GetConfigData subBuilder = new global::GetConfigData();
          if (dataCase_ == DataOneofCase.GetConfigData) {
            subBuilder.MergeFrom(GetConfigData);
          }
          input.ReadMessage(subBuilder);
          GetConfigData = subBuilder;
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
