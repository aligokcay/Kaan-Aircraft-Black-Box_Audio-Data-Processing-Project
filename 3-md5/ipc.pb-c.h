/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ipc.proto */

#ifndef PROTOBUF_C_ipc_2eproto__INCLUDED
#define PROTOBUF_C_ipc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct ResourceUsageData ResourceUsageData;
typedef struct TimeData TimeData;
typedef struct VersionData VersionData;
typedef struct CbitResult CbitResult;
typedef struct PbitResult PbitResult;
typedef struct IbitResult IbitResult;
typedef struct FdrStatus FdrStatus;
typedef struct CvrStatus CvrStatus;
typedef struct NandBlock NandBlock;
typedef struct FlightRecord FlightRecord;
typedef struct NandMemoryStatus NandMemoryStatus;
typedef struct RecordInfoData RecordInfoData;
typedef struct DownloadRecord DownloadRecord;
typedef struct DownloadRecordData DownloadRecordData;
typedef struct UploadConfig UploadConfig;
typedef struct UploadConfigData UploadConfigData;
typedef struct GetConfig GetConfig;
typedef struct GetConfigData GetConfigData;
typedef struct StatusData StatusData;
typedef struct IPCMessage IPCMessage;
typedef struct IPCResponse IPCResponse;


/* --- enums --- */

/*
 * / @brief Command ID
 * / @details Command ID is used to identify the command sent to the server.
 */
typedef enum _CommandId {
  /*
   * SET
   */
  COMMAND_ID__RECORD_STATE = 0,
  /*
   * SET
   */
  COMMAND_ID__WORKING_MODE = 1,
  /*
   * SET
   */
  COMMAND_ID__START_IBIT = 2,
  /*
   * GET
   */
  COMMAND_ID__GET_IBIT = 3,
  /*
   * GET
   */
  COMMAND_ID__GET_CBIT = 4,
  /*
   * GET
   */
  COMMAND_ID__GET_PBIT = 5,
  /*
   * GET
   */
  COMMAND_ID__STATUS = 6,
  /*
   * GET
   */
  COMMAND_ID__VERSIONS = 7,
  /*
   * SET
   */
  COMMAND_ID__CONNECT = 8,
  /*
   * SET
   */
  COMMAND_ID__DISCONNECT = 9,
  /*
   * GET
   */
  COMMAND_ID__RECORD_INFO = 10,
  /*
   * SET
   */
  COMMAND_ID__DOWNLOAD_RECORD = 11,
  /*
   * SET - Upload JSON configuration file
   */
  COMMAND_ID__UPLOAD_CONFIG = 12,
  /*
   * GET - Get current configuration
   */
  COMMAND_ID__GET_CONFIG = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMMAND_ID)
} CommandId;
/*
 * / @brief Record State
 * / @details Record State is used to set the record state.
 */
typedef enum _RecordState {
  /*
   * RECORD
   */
  RECORD_STATE__RECORD = 0,
  /*
   * DO_NOT_RECORD
   */
  RECORD_STATE__DO_NOT_RECORD = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RECORD_STATE)
} RecordState;
/*
 * / @brief Working Mode
 * / @details Working Mode is used to set the working mode.
 * / IDLE: System is idle. It is the default state.
 * / OPERATIONAL: System is operational. It is the normal state.
 * / MAINTENANCE: System is in maintenance mode. It is the maintenance state.
 */
typedef enum _WorkingMode {
  /*
   * IDLE
   */
  WORKING_MODE__IDLE = 0,
  /*
   * OPERATIONAL
   */
  WORKING_MODE__OPERATIONAL = 1,
  /*
   * MAINTENANCE
   */
  WORKING_MODE__MAINTENANCE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WORKING_MODE)
} WorkingMode;
/*
 * / @brief CBIT test bit positions
 * / @details CBIT test bit positions are used to identify the test bits.
 */
typedef enum _CbitTestBits {
  /*
   * checkPower
   */
  CBIT_TEST_BITS__CBIT_POWER = 0,
  /*
   * checkARINC429
   */
  CBIT_TEST_BITS__CBIT_ARINC429 = 1,
  /*
   * checkMILSTD1553
   */
  CBIT_TEST_BITS__CBIT_MILSTD1553 = 2,
  /*
   * checkARIN664
   */
  CBIT_TEST_BITS__CBIT_ARINC664 = 3,
  /*
   * checkAudioInterface
   */
  CBIT_TEST_BITS__CBIT_AUDIO_INTERFACE = 4,
  /*
   * checkCSMU (Test 5 atlanmýþ)
   */
  CBIT_TEST_BITS__CBIT_CSMU = 6,
  /*
   * checkRIPS
   */
  CBIT_TEST_BITS__CBIT_RIPS = 7,
  /*
   * checkCVR
   */
  CBIT_TEST_BITS__CBIT_CVR = 8,
  /*
   * checkFDR
   */
  CBIT_TEST_BITS__CBIT_FDR = 9,
  /*
   * checkClock
   */
  CBIT_TEST_BITS__CBIT_CLOCK = 10,
  /*
   * checkMode
   */
  CBIT_TEST_BITS__CBIT_MODE = 11,
  /*
   * checkDoNotRecord
   */
  CBIT_TEST_BITS__CBIT_DO_NOT_RECORD = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CBIT_TEST_BITS)
} CbitTestBits;
/*
 * / @brief PBIT test bit positions
 * / @details PBIT test bit positions are used to identify the test bits.
 */
typedef enum _PbitTestBits {
  /*
   * checkPower
   */
  PBIT_TEST_BITS__PBIT_POWER = 0,
  /*
   * checkARINC429
   */
  PBIT_TEST_BITS__PBIT_ARINC429 = 1,
  /*
   * checkMILSTD1553
   */
  PBIT_TEST_BITS__PBIT_MILSTD1553 = 2,
  /*
   * checkARIN664
   */
  PBIT_TEST_BITS__PBIT_ARINC664 = 3,
  /*
   * checkAudioInterface
   */
  PBIT_TEST_BITS__PBIT_AUDIO_INTERFACE = 4,
  /*
   * checkEthernet
   */
  PBIT_TEST_BITS__PBIT_ETHERNET = 5,
  /*
   * checkSerialInterface
   */
  PBIT_TEST_BITS__PBIT_SERIAL_INTERFACE = 6,
  /*
   * checkDiscreteInterface
   */
  PBIT_TEST_BITS__PBIT_DISCRETE_INTERFACE = 7,
  /*
   * checkCSMU
   */
  PBIT_TEST_BITS__PBIT_CSMU = 8,
  /*
   * checkRIPS
   */
  PBIT_TEST_BITS__PBIT_RIPS = 9,
  /*
   * checkCVR
   */
  PBIT_TEST_BITS__PBIT_CVR = 10,
  /*
   * checkFDR
   */
  PBIT_TEST_BITS__PBIT_FDR = 11,
  /*
   * checkClock
   */
  PBIT_TEST_BITS__PBIT_CLOCK = 12,
  /*
   * checkMode
   */
  PBIT_TEST_BITS__PBIT_MODE = 13,
  /*
   * checkDoNotRecord
   */
  PBIT_TEST_BITS__PBIT_DO_NOT_RECORD = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PBIT_TEST_BITS)
} PbitTestBits;
/*
 * / @brief IBIT test bit positions
 * / @details IBIT test bit positions are used to identify the test bits.
 */
typedef enum _IbitTestBits {
  /*
   * checkPower
   */
  IBIT_TEST_BITS__IBIT_POWER = 0,
  /*
   * checkARINC429
   */
  IBIT_TEST_BITS__IBIT_ARINC429 = 1,
  /*
   * checkMILSTD1553
   */
  IBIT_TEST_BITS__IBIT_MILSTD1553 = 2,
  /*
   * checkARIN664
   */
  IBIT_TEST_BITS__IBIT_ARINC664 = 3,
  /*
   * checkAudioInterface
   */
  IBIT_TEST_BITS__IBIT_AUDIO_INTERFACE = 4,
  /*
   * checkEthernet
   */
  IBIT_TEST_BITS__IBIT_ETHERNET = 5,
  /*
   * checkSerialInterface
   */
  IBIT_TEST_BITS__IBIT_SERIAL_INTERFACE = 6,
  /*
   * checkDiscreteInterface
   */
  IBIT_TEST_BITS__IBIT_DISCRETE_INTERFACE = 7,
  /*
   * checkCSMU
   */
  IBIT_TEST_BITS__IBIT_CSMU = 8,
  /*
   * checkRIPS
   */
  IBIT_TEST_BITS__IBIT_RIPS = 9,
  /*
   * checkCVR
   */
  IBIT_TEST_BITS__IBIT_CVR = 10,
  /*
   * checkFDR
   */
  IBIT_TEST_BITS__IBIT_FDR = 11,
  /*
   * checkClock
   */
  IBIT_TEST_BITS__IBIT_CLOCK = 12,
  /*
   * checkMode
   */
  IBIT_TEST_BITS__IBIT_MODE = 13,
  /*
   * checkDoNotRecord
   */
  IBIT_TEST_BITS__IBIT_DO_NOT_RECORD = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IBIT_TEST_BITS)
} IbitTestBits;
/*
 * / @brief Record Types for NAND Memory System
 * / @details Defines the type of record data stored in NAND memory
 */
typedef enum _RecordType {
  /*
   * Flight Data Recorder data
   */
  RECORD_TYPE__FDR_DATA = 0,
  /*
   * Cockpit Voice Recorder data
   */
  RECORD_TYPE__CVR_DATA = 1,
  /*
   * All data (FDR and CVR)
   */
  RECORD_TYPE__ALL_DATA = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RECORD_TYPE)
} RecordType;
/*
 * / @brief Download Selection Type
 * / @details Defines different download selection criteria
 */
typedef enum _DownloadSelectionType {
  /*
   * Download by specific flight number
   */
  DOWNLOAD_SELECTION_TYPE__BY_FLIGHT_NUMBER = 0,
  /*
   * Download last N minutes
   */
  DOWNLOAD_SELECTION_TYPE__BY_LAST_MINUTES = 1,
  /*
   * Download by time range
   */
  DOWNLOAD_SELECTION_TYPE__BY_TIME_RANGE = 2,
  /*
   * Download by NAND address range
   */
  DOWNLOAD_SELECTION_TYPE__BY_ADDRESS_RANGE = 3,
  /*
   * Download current/last flight
   */
  DOWNLOAD_SELECTION_TYPE__CURRENT_FLIGHT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DOWNLOAD_SELECTION_TYPE)
} DownloadSelectionType;

/* --- messages --- */

/*
 * / @brief Resource Usage Data
 * / @details Resource Usage Data is used to get the resource usage data.
 */
struct  ResourceUsageData
{
  ProtobufCMessage base;
  double cpu_usage_pct;
  double ram_usage_pct;
  double disk_usage_pct;
  double swap_usage_pct;
  /*
   * For 1 min (e.g., 5, 15)
   */
  double avg_cpu_usage_pct;
};
#define RESOURCE_USAGE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resource_usage_data__descriptor) \
, 0, 0, 0, 0, 0 }


/*
 * / @brief Time Data
 * / @details Time Data is used to get the time data.
 */
struct  TimeData
{
  ProtobufCMessage base;
  /*
   * "YYYY-MM-DD HH:MM:SS.NNNNNNNNN"
   */
  char *time;
  /*
   * 1: Valid, 0: Not Valid
   */
  protobuf_c_boolean is_valid;
  /*
   * Application uptime
   */
  uint64_t software_uptime;
  /*
   * OS uptime
   */
  uint64_t os_uptime;
};
#define TIME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&time_data__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, 0 }


/*
 * / @brief Version Data
 * / @details Version Data is used to get the version data.
 */
struct  VersionData
{
  ProtobufCMessage base;
  /*
   * Serial number
   */
  char *serial_number;
  /*
   * Part number
   */
  char *part_number;
  /*
   * Hardware version
   */
  char *hardware_version;
  /*
   * Kernel version
   */
  char *kernel_version;
  /*
   * Image version
   */
  char *image_version;
  /*
   * Software version
   */
  char *software_version;
};
#define VERSION_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&version_data__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  CbitResult
{
  ProtobufCMessage base;
  /*
   * Test 0 - Güç kontrolü
   */
  protobuf_c_boolean check_power;
  /*
   * Test 1 - ARINC429 interface
   */
  protobuf_c_boolean check_arinc429;
  /*
   * Test 2 - MIL-STD-1553 interface
   */
  protobuf_c_boolean check_milstd1553;
  /*
   * Test 3 - ARINC664 interface
   */
  protobuf_c_boolean check_arinc664;
  /*
   * Test 4 - Audio interface
   */
  protobuf_c_boolean check_audio_interface;
  /*
   * Test 6 - CSMU (Crash Survivable Memory Unit)
   */
  protobuf_c_boolean check_csmu;
  /*
   * Test 7 - RIPS sistemi
   */
  protobuf_c_boolean check_rips;
  /*
   * Test 8 - Cockpit Voice Recorder
   */
  protobuf_c_boolean check_cvr;
  /*
   * Test 9 - Flight Data Recorder
   */
  protobuf_c_boolean check_fdr;
  /*
   * Test 10 - Saat sistemi
   */
  protobuf_c_boolean check_clock;
  /*
   * Test 11 - Mod kontrolü
   */
  protobuf_c_boolean check_mode;
  /*
   * Test 12 - "Kayýt yapma" modu
   */
  protobuf_c_boolean check_do_not_record;
};
#define CBIT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cbit_result__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  PbitResult
{
  ProtobufCMessage base;
  /*
   * Bit 0 - Güç kontrolü
   */
  protobuf_c_boolean check_power;
  /*
   * Bit 1 - ARINC429 interface
   */
  protobuf_c_boolean check_arinc429;
  /*
   * Bit 2 - MIL-STD-1553 interface
   */
  protobuf_c_boolean check_milstd1553;
  /*
   * Bit 3 - ARINC664 interface
   */
  protobuf_c_boolean check_arinc664;
  /*
   * Bit 4 - Audio interface
   */
  protobuf_c_boolean check_audio_interface;
  /*
   * Bit 5 - Ethernet interface
   */
  protobuf_c_boolean check_ethernet;
  /*
   * Bit 6 - Serial interface
   */
  protobuf_c_boolean check_serial_interface;
  /*
   * Bit 7 - Discrete interface
   */
  protobuf_c_boolean check_discrete_interface;
  /*
   * Bit 8 - CSMU (Crash Survivable Memory Unit)
   */
  protobuf_c_boolean check_csmu;
  /*
   * Bit 9 - RIPS sistemi
   */
  protobuf_c_boolean check_rips;
  /*
   * Bit 10 - Cockpit Voice Recorder
   */
  protobuf_c_boolean check_cvr;
  /*
   * Bit 11 - Flight Data Recorder
   */
  protobuf_c_boolean check_fdr;
  /*
   * Bit 12 - Saat sistemi
   */
  protobuf_c_boolean check_clock;
  /*
   * Bit 13 - Mod kontrolü
   */
  protobuf_c_boolean check_mode;
  /*
   * Bit 14 - "Kayýt yapma" modu
   */
  protobuf_c_boolean check_do_not_record;
};
#define PBIT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pbit_result__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  IbitResult
{
  ProtobufCMessage base;
  /*
   * Bit 0 - Güç kontrolü
   */
  protobuf_c_boolean check_power;
  /*
   * Bit 1 - ARINC429 interface
   */
  protobuf_c_boolean check_arinc429;
  /*
   * Bit 2 - MIL-STD-1553 interface
   */
  protobuf_c_boolean check_milstd1553;
  /*
   * Bit 3 - ARINC664 interface
   */
  protobuf_c_boolean check_arinc664;
  /*
   * Bit 4 - Audio interface
   */
  protobuf_c_boolean check_audio_interface;
  /*
   * Bit 5 - Ethernet interface
   */
  protobuf_c_boolean check_ethernet;
  /*
   * Bit 6 - Serial interface
   */
  protobuf_c_boolean check_serial_interface;
  /*
   * Bit 7 - Discrete interface
   */
  protobuf_c_boolean check_discrete_interface;
  /*
   * Bit 8 - CSMU (Crash Survivable Memory Unit)
   */
  protobuf_c_boolean check_csmu;
  /*
   * Bit 9 - RIPS sistemi
   */
  protobuf_c_boolean check_rips;
  /*
   * Bit 10 - Cockpit Voice Recorder
   */
  protobuf_c_boolean check_cvr;
  /*
   * Bit 11 - Flight Data Recorder
   */
  protobuf_c_boolean check_fdr;
  /*
   * Bit 12 - Saat sistemi
   */
  protobuf_c_boolean check_clock;
  /*
   * Bit 13 - Mod kontrolü
   */
  protobuf_c_boolean check_mode;
  /*
   * Bit 14 - "Kayýt yapma" modu
   */
  protobuf_c_boolean check_do_not_record;
};
#define IBIT_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ibit_result__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  FdrStatus
{
  ProtobufCMessage base;
  /*
   * 1: Recording, 0: Not Recording
   */
  protobuf_c_boolean is_recording;
  /*
   * 1: OK, 0: Not OK
   */
  protobuf_c_boolean arinc429_status;
  /*
   * 1: OK, 0: Not OK
   */
  protobuf_c_boolean milstd1553_status;
  /*
   * 1: OK, 0: Not OK
   */
  protobuf_c_boolean arinc664_status;
};
#define FDR_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fdr_status__descriptor) \
, 0, 0, 0, 0 }


struct  CvrStatus
{
  ProtobufCMessage base;
  /*
   * 1: Recording, 0: Not Recording
   */
  protobuf_c_boolean is_recording;
  /*
   * 1: Opening, 0: Not Opening
   */
  protobuf_c_boolean is_opening_microphone1;
  /*
   * 1: Opening, 0: Not Opening
   */
  protobuf_c_boolean is_opening_microphone2;
  /*
   * 1: Opening, 0: Not Opening
   */
  protobuf_c_boolean is_opening_microphone3;
  /*
   * 1: Opening, 0: Not Opening
   */
  protobuf_c_boolean is_opening_microphone4;
  /*
   * 1: Opening, 0: Not Opening
   */
  protobuf_c_boolean is_opening_area_mic;
  /*
   * 1: OK, 0: Not OK
   */
  protobuf_c_boolean audio_interface_status;
};
#define CVR_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvr_status__descriptor) \
, 0, 0, 0, 0, 0, 0, 0 }


/*
 * / @brief NAND Memory Block Information
 * / @details Information about a single block in NAND memory (1-minute data)
 */
struct  NandBlock
{
  ProtobufCMessage base;
  /*
   * NAND block address
   */
  uint32_t block_address;
  /*
   * FDR or CVR data
   */
  RecordType record_type;
  /*
   * Block start time (Unix timestamp)
   */
  uint64_t start_timestamp;
  /*
   * Block end time (Unix timestamp)
   */
  uint64_t end_timestamp;
  /*
   * Actual data size in bytes
   */
  uint32_t data_size;
  /*
   * Flight number
   */
  uint32_t flight_number;
  /*
   * Sequence number within flight
   */
  uint32_t sequence_in_flight;
  /*
   * MD5 hash of the block data
   */
  char *md5_hash;
  /*
   * Block data integrity status
   */
  protobuf_c_boolean is_valid;
  /*
   * Currently being written
   */
  protobuf_c_boolean is_current;
};
#define NAND_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nand_block__descriptor) \
, 0, RECORD_TYPE__FDR_DATA, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * / @brief Flight Session Summary
 * / @details Summary of a complete flight session stored in NAND
 */
struct  FlightRecord
{
  ProtobufCMessage base;
  /*
   * Flight session number
   */
  uint32_t flight_number;
  /*
   * Flight start time (Unix timestamp)
   */
  uint64_t start_time;
  /*
   * Flight end time (Unix timestamp)
   */
  uint64_t end_time;
  /*
   * Total flight duration in minutes
   */
  uint32_t duration_minutes;
  /*
   * Number of FDR blocks
   */
  uint32_t fdr_block_count;
  /*
   * Number of CVR blocks
   */
  uint32_t cvr_block_count;
  /*
   * Total FDR data size
   */
  uint64_t total_fdr_size;
  /*
   * Total CVR data size
   */
  uint64_t total_cvr_size;
  /*
   * First block address in NAND
   */
  uint32_t start_block_address;
  /*
   * Last block address in NAND
   */
  uint32_t end_block_address;
  /*
   * Flight record completed
   */
  protobuf_c_boolean is_complete;
  /*
   * All blocks for this flight
   */
  size_t n_blocks;
  NandBlock **blocks;
};
#define FLIGHT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&flight_record__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/*
 * / @brief NAND Memory Status
 * / @details Current status of NAND memory system
 */
struct  NandMemoryStatus
{
  ProtobufCMessage base;
  /*
   * Total NAND capacity in bytes
   */
  uint64_t total_capacity;
  /*
   * Used NAND capacity in bytes
   */
  uint64_t used_capacity;
  /*
   * Available NAND capacity in bytes
   */
  uint64_t available_capacity;
  /*
   * Total number of blocks
   */
  uint32_t total_blocks;
  /*
   * Used number of blocks
   */
  uint32_t used_blocks;
  /*
   * Number of bad blocks
   */
  uint32_t bad_blocks;
  /*
   * Current write position
   */
  uint32_t current_write_address;
  /*
   * Wear leveling percentage
   */
  double wear_level_percentage;
};
#define NAND_MEMORY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nand_memory_status__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * / @brief Record Information Response
 * / @details Complete record information from NAND memory
 */
struct  RecordInfoData
{
  ProtobufCMessage base;
  /*
   * All flight records
   */
  size_t n_flights;
  FlightRecord **flights;
  /*
   * Currently active flight (if any)
   */
  FlightRecord *current_flight;
  /*
   * NAND memory status
   */
  NandMemoryStatus *memory_status;
  /*
   * Total number of flights stored
   */
  uint32_t total_flights;
  /*
   * Oldest available flight number
   */
  uint32_t oldest_flight_number;
  /*
   * Newest flight number
   */
  uint32_t newest_flight_number;
};
#define RECORD_INFO_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&record_info_data__descriptor) \
, 0,NULL, NULL, NULL, 0, 0, 0 }


/*
 * / @brief Download Record Request
 * / @details Request to download records from NAND memory with various selection options
 */
struct  DownloadRecord
{
  ProtobufCMessage base;
  /*
   * How to select data
   */
  DownloadSelectionType selection_type;
  /*
   * Selection parameters (use based on selection_type)
   */
  /*
   * For BY_FLIGHT_NUMBER
   */
  uint32_t flight_number;
  /*
   * For BY_LAST_MINUTES (e.g., 15 for last 15 minutes)
   */
  uint32_t last_minutes;
  /*
   * For BY_TIME_RANGE
   */
  uint64_t start_timestamp;
  /*
   * For BY_TIME_RANGE
   */
  uint64_t end_timestamp;
  /*
   * For BY_ADDRESS_RANGE
   */
  uint32_t start_address;
  /*
   * For BY_ADDRESS_RANGE
   */
  uint32_t end_address;
  /*
   * Filter options
   */
  /*
   * Optional: Only FDR or CVR (both if not specified)
   */
  RecordType record_type_filter;
  /*
   * Include block metadata
   */
  protobuf_c_boolean include_metadata;
  /*
   * Verify MD5 during extraction
   */
  protobuf_c_boolean verify_md5;
  /*
   * Maximum number of blocks to return
   */
  uint32_t max_blocks;
};
#define DOWNLOAD_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_record__descriptor) \
, DOWNLOAD_SELECTION_TYPE__BY_FLIGHT_NUMBER, 0, 0, 0, 0, 0, 0, RECORD_TYPE__FDR_DATA, 0, 0, 0 }


/*
 * / @brief Download Record Response
 * / @details Response containing NAND memory data
 */
struct  DownloadRecordData
{
  ProtobufCMessage base;
  /*
   * Selected blocks from NAND
   */
  size_t n_selected_blocks;
  NandBlock **selected_blocks;
  /*
   * Total number of blocks
   */
  uint32_t total_blocks;
  /*
   * Total size of all data
   */
  uint64_t total_data_size;
  /*
   * Path to generated archive file
   */
  char *archive_path;
  /*
   * MD5 of the archive
   */
  char *archive_md5;
  /*
   * Time taken to extract from NAND
   */
  uint32_t extraction_time_ms;
  /*
   * Estimated transfer time
   */
  uint32_t estimated_transfer_time_sec;
  /*
   * Any blocks failed MD5 verification
   */
  protobuf_c_boolean has_integrity_errors;
  /*
   * Addresses of corrupted blocks (if any)
   */
  size_t n_corrupted_blocks;
  uint32_t *corrupted_blocks;
};
#define DOWNLOAD_RECORD_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_record_data__descriptor) \
, 0,NULL, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL }


/*
 * / @brief Configuration Upload Request
 * / @details Request to upload JSON configuration to the device
 */
struct  UploadConfig
{
  ProtobufCMessage base;
  /*
   * JSON configuration content (for small files < 1MB)
   */
  char *json_content;
  /*
   * Original filename
   */
  char *filename;
  /*
   * MD5 hash of the JSON content
   */
  char *md5_hash;
  /*
   * Chunked upload support for large files
   */
  /*
   * True if this is a chunked upload
   */
  protobuf_c_boolean is_chunked;
  /*
   * Unique session ID for chunked uploads
   */
  char *session_id;
  /*
   * Current chunk number (0-based)
   */
  uint32_t chunk_index;
  /*
   * Total number of chunks in this upload
   */
  uint32_t total_chunks;
  /*
   * Raw chunk data (for large files)
   */
  ProtobufCBinaryData chunk_data;
  /*
   * Size of this chunk in bytes
   */
  uint32_t chunk_size;
  /*
   * MD5 hash of this specific chunk
   */
  char *chunk_md5;
  /*
   * Total size of the complete file
   */
  uint64_t total_file_size;
};
#define UPLOAD_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_config__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, 0, {0,NULL}, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * / @brief Configuration Upload Response
 * / @details Response to configuration upload request
 */
struct  UploadConfigData
{
  ProtobufCMessage base;
  /*
   * Chunked upload support
   */
  /*
   * True if this is a chunked upload response
   */
  protobuf_c_boolean is_chunked_response;
  /*
   * Session ID for chunked uploads
   */
  char *session_id;
  /*
   * Number of chunks received so far
   */
  uint32_t chunks_received;
  /*
   * Total chunks expected
   */
  uint32_t chunks_expected;
  /*
   * True when all chunks received
   */
  protobuf_c_boolean upload_complete;
  /*
   * List of missing chunk indices (if any)
   */
  size_t n_missing_chunks;
  uint32_t *missing_chunks;
};
#define UPLOAD_CONFIG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_config_data__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL }


/*
 * / @brief Configuration Get Request
 * / @details Request to get current configuration
 */
struct  GetConfig
{
  ProtobufCMessage base;
  /*
   * Chunked download support for large files
   */
  /*
   * Request chunked download for large files
   */
  protobuf_c_boolean use_chunked;
  /*
   * Preferred chunk size in bytes (default: 1MB)
   */
  uint32_t chunk_size;
  /*
   * Specific chunk to download (for chunked mode)
   */
  uint32_t chunk_index;
  /*
   * Session ID for chunked downloads
   */
  char *session_id;
};
#define GET_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_config__descriptor) \
, 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 * / @brief Configuration Get Response
 * / @details Response containing current configuration
 */
struct  GetConfigData
{
  ProtobufCMessage base;
  /*
   * Current JSON configuration (for small files < 1MB)
   */
  char *json_content;
  /*
   * MD5 hash of current config
   */
  char *md5_hash;
  /*
   * Chunked download support for large files
   */
  /*
   * True if this is a chunked download
   */
  protobuf_c_boolean is_chunked;
  /*
   * Session ID for chunked downloads
   */
  char *session_id;
  /*
   * Current chunk number (0-based)
   */
  uint32_t chunk_index;
  /*
   * Total number of chunks
   */
  uint32_t total_chunks;
  /*
   * Raw chunk data (for large files)
   */
  ProtobufCBinaryData chunk_data;
  /*
   * Size of this chunk in bytes
   */
  uint32_t chunk_size;
  /*
   * MD5 hash of this specific chunk
   */
  char *chunk_md5;
  /*
   * Total size of the complete file
   */
  uint64_t total_file_size;
  /*
   * True if this is the last chunk
   */
  protobuf_c_boolean is_last_chunk;
};
#define GET_CONFIG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_config_data__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, 0, {0,NULL}, 0, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * / @brief Status Data
 * / @details Status Data is used to get the status data.
 */
struct  StatusData
{
  ProtobufCMessage base;
  /*
   * 1: Recording, 0: Not Recording
   */
  RecordState record_state;
  /*
   * 2: Maintenance, 1: Operational, 0: Idle
   */
  WorkingMode working_mode;
  /*
   * CPU, RAM, Disk, Swap usage diagnostic
   */
  ResourceUsageData *resource_usage;
  /*
   * Current time
   */
  TimeData *time;
  /*
   * FDR status structure
   */
  FdrStatus *fdr_status;
  /*
   * CVR status structure
   */
  CvrStatus *cvr_status;
  /*
   * RIPS status
   */
  protobuf_c_boolean rips_status;
  /*
   * CBIT test results
   */
  CbitResult *cbit_result;
  /*
   * PBIT test results
   */
  PbitResult *pbit_result;
  /*
   * IBIT test results
   */
  IbitResult *ibit_result;
};
#define STATUS_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&status_data__descriptor) \
, RECORD_STATE__RECORD, WORKING_MODE__IDLE, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL }


typedef enum {
  IPCMESSAGE__DATA__NOT_SET = 0,
  IPCMESSAGE__DATA_RECORD_STATE = 3,
  IPCMESSAGE__DATA_WORKING_MODE = 4,
  IPCMESSAGE__DATA_DOWNLOAD_RECORD = 5,
  IPCMESSAGE__DATA_UPLOAD_CONFIG = 6,
  IPCMESSAGE__DATA_GET_CONFIG = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPCMESSAGE__DATA__CASE)
} IPCMessage__DataCase;

struct  IPCMessage
{
  ProtobufCMessage base;
  /*
   * JWT token
   */
  char *jwt;
  /*
   * Command ID
   */
  CommandId command_id;
  IPCMessage__DataCase data_case;
  union {
    /*
     * Request Download Record
     */
    DownloadRecord *download_record;
    /*
     * Get Configuration Request
     */
    GetConfig *get_config;
    /*
     * Upload JSON Configuration
     */
    UploadConfig *upload_config;
    /*
     * Set Record State (Record or Do Not Record)
     */
    RecordState record_state;
    /*
     * Set Working Mode (Idle, Operational, Maintenance)
     */
    WorkingMode working_mode;
  };
};
#define IPCMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipcmessage__descriptor) \
, (char *)protobuf_c_empty_string, COMMAND_ID__RECORD_STATE, IPCMESSAGE__DATA__NOT_SET, {0} }


typedef enum {
  IPCRESPONSE__DATA__NOT_SET = 0,
  IPCRESPONSE__DATA_RECORD_STATE = 3,
  IPCRESPONSE__DATA_WORKING_MODE = 4,
  IPCRESPONSE__DATA_IBIT_RESULT = 5,
  IPCRESPONSE__DATA_CBIT_RESULT = 6,
  IPCRESPONSE__DATA_PBIT_RESULT = 7,
  IPCRESPONSE__DATA_STATUS = 8,
  IPCRESPONSE__DATA_VERSIONS = 9,
  IPCRESPONSE__DATA_RECORD_INFO_DATA = 10,
  IPCRESPONSE__DATA_DOWNLOAD_RECORD_DATA = 11,
  IPCRESPONSE__DATA_UPLOAD_CONFIG_DATA = 12,
  IPCRESPONSE__DATA_GET_CONFIG_DATA = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IPCRESPONSE__DATA__CASE)
} IPCResponse__DataCase;

struct  IPCResponse
{
  ProtobufCMessage base;
  /*
   * 1: Success, 0: Failure
   */
  protobuf_c_boolean success;
  IPCResponse__DataCase data_case;
  union {
    /*
     * Returned CBIT test results
     */
    CbitResult *cbit_result;
    /*
     * Returned Download Record Data
     */
    DownloadRecordData *download_record_data;
    /*
     * Returned Get Config Data
     */
    GetConfigData *get_config_data;
    /*
     * Returned IBIT test results
     */
    IbitResult *ibit_result;
    /*
     * Returned PBIT test results
     */
    PbitResult *pbit_result;
    /*
     * Returned Record Info Data
     */
    RecordInfoData *record_info_data;
    /*
     * Returned Status Data
     */
    StatusData *status;
    /*
     * Returned Upload Config Data
     */
    UploadConfigData *upload_config_data;
    /*
     * Returned Version Data
     */
    VersionData *versions;
    /*
     * Returned Record State
     */
    RecordState record_state;
    /*
     * Returned Working Mode
     */
    WorkingMode working_mode;
  };
};
#define IPCRESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ipcresponse__descriptor) \
, 0, IPCRESPONSE__DATA__NOT_SET, {0} }


/* ResourceUsageData methods */
void   resource_usage_data__init
                     (ResourceUsageData         *message);
size_t resource_usage_data__get_packed_size
                     (const ResourceUsageData   *message);
size_t resource_usage_data__pack
                     (const ResourceUsageData   *message,
                      uint8_t             *out);
size_t resource_usage_data__pack_to_buffer
                     (const ResourceUsageData   *message,
                      ProtobufCBuffer     *buffer);
ResourceUsageData *
       resource_usage_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resource_usage_data__free_unpacked
                     (ResourceUsageData *message,
                      ProtobufCAllocator *allocator);
/* TimeData methods */
void   time_data__init
                     (TimeData         *message);
size_t time_data__get_packed_size
                     (const TimeData   *message);
size_t time_data__pack
                     (const TimeData   *message,
                      uint8_t             *out);
size_t time_data__pack_to_buffer
                     (const TimeData   *message,
                      ProtobufCBuffer     *buffer);
TimeData *
       time_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   time_data__free_unpacked
                     (TimeData *message,
                      ProtobufCAllocator *allocator);
/* VersionData methods */
void   version_data__init
                     (VersionData         *message);
size_t version_data__get_packed_size
                     (const VersionData   *message);
size_t version_data__pack
                     (const VersionData   *message,
                      uint8_t             *out);
size_t version_data__pack_to_buffer
                     (const VersionData   *message,
                      ProtobufCBuffer     *buffer);
VersionData *
       version_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   version_data__free_unpacked
                     (VersionData *message,
                      ProtobufCAllocator *allocator);
/* CbitResult methods */
void   cbit_result__init
                     (CbitResult         *message);
size_t cbit_result__get_packed_size
                     (const CbitResult   *message);
size_t cbit_result__pack
                     (const CbitResult   *message,
                      uint8_t             *out);
size_t cbit_result__pack_to_buffer
                     (const CbitResult   *message,
                      ProtobufCBuffer     *buffer);
CbitResult *
       cbit_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbit_result__free_unpacked
                     (CbitResult *message,
                      ProtobufCAllocator *allocator);
/* PbitResult methods */
void   pbit_result__init
                     (PbitResult         *message);
size_t pbit_result__get_packed_size
                     (const PbitResult   *message);
size_t pbit_result__pack
                     (const PbitResult   *message,
                      uint8_t             *out);
size_t pbit_result__pack_to_buffer
                     (const PbitResult   *message,
                      ProtobufCBuffer     *buffer);
PbitResult *
       pbit_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pbit_result__free_unpacked
                     (PbitResult *message,
                      ProtobufCAllocator *allocator);
/* IbitResult methods */
void   ibit_result__init
                     (IbitResult         *message);
size_t ibit_result__get_packed_size
                     (const IbitResult   *message);
size_t ibit_result__pack
                     (const IbitResult   *message,
                      uint8_t             *out);
size_t ibit_result__pack_to_buffer
                     (const IbitResult   *message,
                      ProtobufCBuffer     *buffer);
IbitResult *
       ibit_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ibit_result__free_unpacked
                     (IbitResult *message,
                      ProtobufCAllocator *allocator);
/* FdrStatus methods */
void   fdr_status__init
                     (FdrStatus         *message);
size_t fdr_status__get_packed_size
                     (const FdrStatus   *message);
size_t fdr_status__pack
                     (const FdrStatus   *message,
                      uint8_t             *out);
size_t fdr_status__pack_to_buffer
                     (const FdrStatus   *message,
                      ProtobufCBuffer     *buffer);
FdrStatus *
       fdr_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fdr_status__free_unpacked
                     (FdrStatus *message,
                      ProtobufCAllocator *allocator);
/* CvrStatus methods */
void   cvr_status__init
                     (CvrStatus         *message);
size_t cvr_status__get_packed_size
                     (const CvrStatus   *message);
size_t cvr_status__pack
                     (const CvrStatus   *message,
                      uint8_t             *out);
size_t cvr_status__pack_to_buffer
                     (const CvrStatus   *message,
                      ProtobufCBuffer     *buffer);
CvrStatus *
       cvr_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvr_status__free_unpacked
                     (CvrStatus *message,
                      ProtobufCAllocator *allocator);
/* NandBlock methods */
void   nand_block__init
                     (NandBlock         *message);
size_t nand_block__get_packed_size
                     (const NandBlock   *message);
size_t nand_block__pack
                     (const NandBlock   *message,
                      uint8_t             *out);
size_t nand_block__pack_to_buffer
                     (const NandBlock   *message,
                      ProtobufCBuffer     *buffer);
NandBlock *
       nand_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nand_block__free_unpacked
                     (NandBlock *message,
                      ProtobufCAllocator *allocator);
/* FlightRecord methods */
void   flight_record__init
                     (FlightRecord         *message);
size_t flight_record__get_packed_size
                     (const FlightRecord   *message);
size_t flight_record__pack
                     (const FlightRecord   *message,
                      uint8_t             *out);
size_t flight_record__pack_to_buffer
                     (const FlightRecord   *message,
                      ProtobufCBuffer     *buffer);
FlightRecord *
       flight_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   flight_record__free_unpacked
                     (FlightRecord *message,
                      ProtobufCAllocator *allocator);
/* NandMemoryStatus methods */
void   nand_memory_status__init
                     (NandMemoryStatus         *message);
size_t nand_memory_status__get_packed_size
                     (const NandMemoryStatus   *message);
size_t nand_memory_status__pack
                     (const NandMemoryStatus   *message,
                      uint8_t             *out);
size_t nand_memory_status__pack_to_buffer
                     (const NandMemoryStatus   *message,
                      ProtobufCBuffer     *buffer);
NandMemoryStatus *
       nand_memory_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nand_memory_status__free_unpacked
                     (NandMemoryStatus *message,
                      ProtobufCAllocator *allocator);
/* RecordInfoData methods */
void   record_info_data__init
                     (RecordInfoData         *message);
size_t record_info_data__get_packed_size
                     (const RecordInfoData   *message);
size_t record_info_data__pack
                     (const RecordInfoData   *message,
                      uint8_t             *out);
size_t record_info_data__pack_to_buffer
                     (const RecordInfoData   *message,
                      ProtobufCBuffer     *buffer);
RecordInfoData *
       record_info_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   record_info_data__free_unpacked
                     (RecordInfoData *message,
                      ProtobufCAllocator *allocator);
/* DownloadRecord methods */
void   download_record__init
                     (DownloadRecord         *message);
size_t download_record__get_packed_size
                     (const DownloadRecord   *message);
size_t download_record__pack
                     (const DownloadRecord   *message,
                      uint8_t             *out);
size_t download_record__pack_to_buffer
                     (const DownloadRecord   *message,
                      ProtobufCBuffer     *buffer);
DownloadRecord *
       download_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_record__free_unpacked
                     (DownloadRecord *message,
                      ProtobufCAllocator *allocator);
/* DownloadRecordData methods */
void   download_record_data__init
                     (DownloadRecordData         *message);
size_t download_record_data__get_packed_size
                     (const DownloadRecordData   *message);
size_t download_record_data__pack
                     (const DownloadRecordData   *message,
                      uint8_t             *out);
size_t download_record_data__pack_to_buffer
                     (const DownloadRecordData   *message,
                      ProtobufCBuffer     *buffer);
DownloadRecordData *
       download_record_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_record_data__free_unpacked
                     (DownloadRecordData *message,
                      ProtobufCAllocator *allocator);
/* UploadConfig methods */
void   upload_config__init
                     (UploadConfig         *message);
size_t upload_config__get_packed_size
                     (const UploadConfig   *message);
size_t upload_config__pack
                     (const UploadConfig   *message,
                      uint8_t             *out);
size_t upload_config__pack_to_buffer
                     (const UploadConfig   *message,
                      ProtobufCBuffer     *buffer);
UploadConfig *
       upload_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_config__free_unpacked
                     (UploadConfig *message,
                      ProtobufCAllocator *allocator);
/* UploadConfigData methods */
void   upload_config_data__init
                     (UploadConfigData         *message);
size_t upload_config_data__get_packed_size
                     (const UploadConfigData   *message);
size_t upload_config_data__pack
                     (const UploadConfigData   *message,
                      uint8_t             *out);
size_t upload_config_data__pack_to_buffer
                     (const UploadConfigData   *message,
                      ProtobufCBuffer     *buffer);
UploadConfigData *
       upload_config_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_config_data__free_unpacked
                     (UploadConfigData *message,
                      ProtobufCAllocator *allocator);
/* GetConfig methods */
void   get_config__init
                     (GetConfig         *message);
size_t get_config__get_packed_size
                     (const GetConfig   *message);
size_t get_config__pack
                     (const GetConfig   *message,
                      uint8_t             *out);
size_t get_config__pack_to_buffer
                     (const GetConfig   *message,
                      ProtobufCBuffer     *buffer);
GetConfig *
       get_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_config__free_unpacked
                     (GetConfig *message,
                      ProtobufCAllocator *allocator);
/* GetConfigData methods */
void   get_config_data__init
                     (GetConfigData         *message);
size_t get_config_data__get_packed_size
                     (const GetConfigData   *message);
size_t get_config_data__pack
                     (const GetConfigData   *message,
                      uint8_t             *out);
size_t get_config_data__pack_to_buffer
                     (const GetConfigData   *message,
                      ProtobufCBuffer     *buffer);
GetConfigData *
       get_config_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_config_data__free_unpacked
                     (GetConfigData *message,
                      ProtobufCAllocator *allocator);
/* StatusData methods */
void   status_data__init
                     (StatusData         *message);
size_t status_data__get_packed_size
                     (const StatusData   *message);
size_t status_data__pack
                     (const StatusData   *message,
                      uint8_t             *out);
size_t status_data__pack_to_buffer
                     (const StatusData   *message,
                      ProtobufCBuffer     *buffer);
StatusData *
       status_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   status_data__free_unpacked
                     (StatusData *message,
                      ProtobufCAllocator *allocator);
/* IPCMessage methods */
void   ipcmessage__init
                     (IPCMessage         *message);
size_t ipcmessage__get_packed_size
                     (const IPCMessage   *message);
size_t ipcmessage__pack
                     (const IPCMessage   *message,
                      uint8_t             *out);
size_t ipcmessage__pack_to_buffer
                     (const IPCMessage   *message,
                      ProtobufCBuffer     *buffer);
IPCMessage *
       ipcmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipcmessage__free_unpacked
                     (IPCMessage *message,
                      ProtobufCAllocator *allocator);
/* IPCResponse methods */
void   ipcresponse__init
                     (IPCResponse         *message);
size_t ipcresponse__get_packed_size
                     (const IPCResponse   *message);
size_t ipcresponse__pack
                     (const IPCResponse   *message,
                      uint8_t             *out);
size_t ipcresponse__pack_to_buffer
                     (const IPCResponse   *message,
                      ProtobufCBuffer     *buffer);
IPCResponse *
       ipcresponse__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ipcresponse__free_unpacked
                     (IPCResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ResourceUsageData_Closure)
                 (const ResourceUsageData *message,
                  void *closure_data);
typedef void (*TimeData_Closure)
                 (const TimeData *message,
                  void *closure_data);
typedef void (*VersionData_Closure)
                 (const VersionData *message,
                  void *closure_data);
typedef void (*CbitResult_Closure)
                 (const CbitResult *message,
                  void *closure_data);
typedef void (*PbitResult_Closure)
                 (const PbitResult *message,
                  void *closure_data);
typedef void (*IbitResult_Closure)
                 (const IbitResult *message,
                  void *closure_data);
typedef void (*FdrStatus_Closure)
                 (const FdrStatus *message,
                  void *closure_data);
typedef void (*CvrStatus_Closure)
                 (const CvrStatus *message,
                  void *closure_data);
typedef void (*NandBlock_Closure)
                 (const NandBlock *message,
                  void *closure_data);
typedef void (*FlightRecord_Closure)
                 (const FlightRecord *message,
                  void *closure_data);
typedef void (*NandMemoryStatus_Closure)
                 (const NandMemoryStatus *message,
                  void *closure_data);
typedef void (*RecordInfoData_Closure)
                 (const RecordInfoData *message,
                  void *closure_data);
typedef void (*DownloadRecord_Closure)
                 (const DownloadRecord *message,
                  void *closure_data);
typedef void (*DownloadRecordData_Closure)
                 (const DownloadRecordData *message,
                  void *closure_data);
typedef void (*UploadConfig_Closure)
                 (const UploadConfig *message,
                  void *closure_data);
typedef void (*UploadConfigData_Closure)
                 (const UploadConfigData *message,
                  void *closure_data);
typedef void (*GetConfig_Closure)
                 (const GetConfig *message,
                  void *closure_data);
typedef void (*GetConfigData_Closure)
                 (const GetConfigData *message,
                  void *closure_data);
typedef void (*StatusData_Closure)
                 (const StatusData *message,
                  void *closure_data);
typedef void (*IPCMessage_Closure)
                 (const IPCMessage *message,
                  void *closure_data);
typedef void (*IPCResponse_Closure)
                 (const IPCResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    command_id__descriptor;
extern const ProtobufCEnumDescriptor    record_state__descriptor;
extern const ProtobufCEnumDescriptor    working_mode__descriptor;
extern const ProtobufCEnumDescriptor    cbit_test_bits__descriptor;
extern const ProtobufCEnumDescriptor    pbit_test_bits__descriptor;
extern const ProtobufCEnumDescriptor    ibit_test_bits__descriptor;
extern const ProtobufCEnumDescriptor    record_type__descriptor;
extern const ProtobufCEnumDescriptor    download_selection_type__descriptor;
extern const ProtobufCMessageDescriptor resource_usage_data__descriptor;
extern const ProtobufCMessageDescriptor time_data__descriptor;
extern const ProtobufCMessageDescriptor version_data__descriptor;
extern const ProtobufCMessageDescriptor cbit_result__descriptor;
extern const ProtobufCMessageDescriptor pbit_result__descriptor;
extern const ProtobufCMessageDescriptor ibit_result__descriptor;
extern const ProtobufCMessageDescriptor fdr_status__descriptor;
extern const ProtobufCMessageDescriptor cvr_status__descriptor;
extern const ProtobufCMessageDescriptor nand_block__descriptor;
extern const ProtobufCMessageDescriptor flight_record__descriptor;
extern const ProtobufCMessageDescriptor nand_memory_status__descriptor;
extern const ProtobufCMessageDescriptor record_info_data__descriptor;
extern const ProtobufCMessageDescriptor download_record__descriptor;
extern const ProtobufCMessageDescriptor download_record_data__descriptor;
extern const ProtobufCMessageDescriptor upload_config__descriptor;
extern const ProtobufCMessageDescriptor upload_config_data__descriptor;
extern const ProtobufCMessageDescriptor get_config__descriptor;
extern const ProtobufCMessageDescriptor get_config_data__descriptor;
extern const ProtobufCMessageDescriptor status_data__descriptor;
extern const ProtobufCMessageDescriptor ipcmessage__descriptor;
extern const ProtobufCMessageDescriptor ipcresponse__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ipc_2eproto__INCLUDED */
